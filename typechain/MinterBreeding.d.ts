/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MinterBreedingInterface extends ethers.utils.Interface {
  functions: {
    "breed(uint256,uint256[])": FunctionFragment;
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "createSpecies(address,address,address,uint256)": FunctionFragment;
    "defaultBreedingCooldownSeconds()": FunctionFragment;
    "defaultGenesNum()": FunctionFragment;
    "defaultRequiredParents()": FunctionFragment;
    "getBreedingRules(uint256)": FunctionFragment;
    "getSpecies(uint256)": FunctionFragment;
    "safeBreed(uint256,uint256[])": FunctionFragment;
    "setBreedingRules(uint256,uint8,uint256,uint8[],uint256[])": FunctionFragment;
    "setMintGuard(uint256,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "breed",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createSpecies",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultBreedingCooldownSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultGenesNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultRequiredParents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBreedingRules",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpecies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBreed",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBreedingRules",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintGuard",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "breed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSpecies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultBreedingCooldownSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultGenesNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultRequiredParents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBreedingRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSpecies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeBreed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBreedingRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "CreateSpecies(uint256,address,address,address,address,uint256)": EventFragment;
    "MintSpecies(uint256,address,uint256,uint256[])": EventFragment;
    "SetBreedingRules(uint256,uint8,uint256,uint8[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateSpecies"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintSpecies"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBreedingRules"): EventFragment;
}

export type CreateSpeciesEvent = TypedEvent<
  [BigNumber, string, string, string, string, BigNumber] & {
    speciesId: BigNumber;
    contractAddr: string;
    owner: string;
    mintFeeToken: string;
    mintFeeAddress: string;
    mintFeeAmount: BigNumber;
  }
>;

export type MintSpeciesEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber[]] & {
    speciesId: BigNumber;
    to: string;
    tokenId: BigNumber;
    parents: BigNumber[];
  }
>;

export type SetBreedingRulesEvent = TypedEvent<
  [BigNumber, number, BigNumber, number[], BigNumber[]] & {
    speciesId: BigNumber;
    requiredParents: number;
    breedCooldownSeconds: BigNumber;
    genes: number[];
    mutationRates: BigNumber[];
  }
>;

export class MinterBreeding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MinterBreedingInterface;

  functions: {
    breed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createSpecies(
      contractAddress: string,
      mintFeeToken: string,
      mintFeeAddress: string,
      mintFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultBreedingCooldownSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    defaultGenesNum(overrides?: CallOverrides): Promise<[number]>;

    defaultRequiredParents(overrides?: CallOverrides): Promise<[number]>;

    getBreedingRules(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number[], BigNumber[]] & {
        requiredParents: number;
        breedCooldownSeconds: BigNumber;
        genes: number[];
        mutationRates: BigNumber[];
      }
    >;

    getSpecies(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string] & {
        contractAddr: string;
        owner: string;
        mintFeeToken: string;
        mintFeeAmount: BigNumber;
        mintFeeAddress: string;
      }
    >;

    safeBreed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBreedingRules(
      speciesId: BigNumberish,
      requiredParents: BigNumberish,
      breedCooldownSeconds: BigNumberish,
      genes: BigNumberish[],
      mutationRates: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintGuard(
      speciesId: BigNumberish,
      mintGuardAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  breed(
    speciesId: BigNumberish,
    parents: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canImplementInterfaceForAddress(
    interfaceHash: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  createSpecies(
    contractAddress: string,
    mintFeeToken: string,
    mintFeeAddress: string,
    mintFeeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultBreedingCooldownSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  defaultGenesNum(overrides?: CallOverrides): Promise<number>;

  defaultRequiredParents(overrides?: CallOverrides): Promise<number>;

  getBreedingRules(
    speciesId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, number[], BigNumber[]] & {
      requiredParents: number;
      breedCooldownSeconds: BigNumber;
      genes: number[];
      mutationRates: BigNumber[];
    }
  >;

  getSpecies(
    speciesId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string] & {
      contractAddr: string;
      owner: string;
      mintFeeToken: string;
      mintFeeAmount: BigNumber;
      mintFeeAddress: string;
    }
  >;

  safeBreed(
    speciesId: BigNumberish,
    parents: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBreedingRules(
    speciesId: BigNumberish,
    requiredParents: BigNumberish,
    breedCooldownSeconds: BigNumberish,
    genes: BigNumberish[],
    mutationRates: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintGuard(
    speciesId: BigNumberish,
    mintGuardAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    breed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createSpecies(
      contractAddress: string,
      mintFeeToken: string,
      mintFeeAddress: string,
      mintFeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultBreedingCooldownSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultGenesNum(overrides?: CallOverrides): Promise<number>;

    defaultRequiredParents(overrides?: CallOverrides): Promise<number>;

    getBreedingRules(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number[], BigNumber[]] & {
        requiredParents: number;
        breedCooldownSeconds: BigNumber;
        genes: number[];
        mutationRates: BigNumber[];
      }
    >;

    getSpecies(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string] & {
        contractAddr: string;
        owner: string;
        mintFeeToken: string;
        mintFeeAmount: BigNumber;
        mintFeeAddress: string;
      }
    >;

    safeBreed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBreedingRules(
      speciesId: BigNumberish,
      requiredParents: BigNumberish,
      breedCooldownSeconds: BigNumberish,
      genes: BigNumberish[],
      mutationRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMintGuard(
      speciesId: BigNumberish,
      mintGuardAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CreateSpecies(uint256,address,address,address,address,uint256)"(
      speciesId?: null,
      contractAddr?: null,
      owner?: string | null,
      mintFeeToken?: null,
      mintFeeAddress?: null,
      mintFeeAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string, BigNumber],
      {
        speciesId: BigNumber;
        contractAddr: string;
        owner: string;
        mintFeeToken: string;
        mintFeeAddress: string;
        mintFeeAmount: BigNumber;
      }
    >;

    CreateSpecies(
      speciesId?: null,
      contractAddr?: null,
      owner?: string | null,
      mintFeeToken?: null,
      mintFeeAddress?: null,
      mintFeeAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string, BigNumber],
      {
        speciesId: BigNumber;
        contractAddr: string;
        owner: string;
        mintFeeToken: string;
        mintFeeAddress: string;
        mintFeeAmount: BigNumber;
      }
    >;

    "MintSpecies(uint256,address,uint256,uint256[])"(
      speciesId?: BigNumberish | null,
      to?: null,
      tokenId?: null,
      parents?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber[]],
      {
        speciesId: BigNumber;
        to: string;
        tokenId: BigNumber;
        parents: BigNumber[];
      }
    >;

    MintSpecies(
      speciesId?: BigNumberish | null,
      to?: null,
      tokenId?: null,
      parents?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber[]],
      {
        speciesId: BigNumber;
        to: string;
        tokenId: BigNumber;
        parents: BigNumber[];
      }
    >;

    "SetBreedingRules(uint256,uint8,uint256,uint8[],uint256[])"(
      speciesId?: null,
      requiredParents?: null,
      breedCooldownSeconds?: null,
      genes?: null,
      mutationRates?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber, number[], BigNumber[]],
      {
        speciesId: BigNumber;
        requiredParents: number;
        breedCooldownSeconds: BigNumber;
        genes: number[];
        mutationRates: BigNumber[];
      }
    >;

    SetBreedingRules(
      speciesId?: null,
      requiredParents?: null,
      breedCooldownSeconds?: null,
      genes?: null,
      mutationRates?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber, number[], BigNumber[]],
      {
        speciesId: BigNumber;
        requiredParents: number;
        breedCooldownSeconds: BigNumber;
        genes: number[];
        mutationRates: BigNumber[];
      }
    >;
  };

  estimateGas: {
    breed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSpecies(
      contractAddress: string,
      mintFeeToken: string,
      mintFeeAddress: string,
      mintFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultBreedingCooldownSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultGenesNum(overrides?: CallOverrides): Promise<BigNumber>;

    defaultRequiredParents(overrides?: CallOverrides): Promise<BigNumber>;

    getBreedingRules(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpecies(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBreed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBreedingRules(
      speciesId: BigNumberish,
      requiredParents: BigNumberish,
      breedCooldownSeconds: BigNumberish,
      genes: BigNumberish[],
      mutationRates: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintGuard(
      speciesId: BigNumberish,
      mintGuardAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    breed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSpecies(
      contractAddress: string,
      mintFeeToken: string,
      mintFeeAddress: string,
      mintFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultBreedingCooldownSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultGenesNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultRequiredParents(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBreedingRules(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpecies(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBreed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBreedingRules(
      speciesId: BigNumberish,
      requiredParents: BigNumberish,
      breedCooldownSeconds: BigNumberish,
      genes: BigNumberish[],
      mutationRates: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintGuard(
      speciesId: BigNumberish,
      mintGuardAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
