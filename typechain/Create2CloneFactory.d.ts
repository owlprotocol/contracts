/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface Create2CloneFactoryInterface extends ethers.utils.Interface {
  functions: {
    "create2AtomicallyClone(address,bytes32,bytes)": FunctionFragment;
    "create2Clone(address,bytes32)": FunctionFragment;
    "getBytecodeHash(address)": FunctionFragment;
    "getCloneAddr(address,address,bytes32)": FunctionFragment;
    "getInitBytes(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create2AtomicallyClone",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "create2Clone",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytecodeHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCloneAddr",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitBytes",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "create2AtomicallyClone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create2Clone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCloneAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitBytes",
    data: BytesLike
  ): Result;

  events: {
    "NewClone(address,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewClone"): EventFragment;
}

export type NewCloneEvent = TypedEvent<
  [string, string, string] & {
    proxyAddr: string;
    logicAddr: string;
    salt: string;
  }
>;

export class Create2CloneFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Create2CloneFactoryInterface;

  functions: {
    create2AtomicallyClone(
      logicAddr: string,
      salt: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create2Clone(
      logicAddr: string,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBytecodeHash(
      logicAddr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCloneAddr(
      deployer: string,
      logicAddr: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInitBytes(
      logicAddr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  create2AtomicallyClone(
    logicAddr: string,
    salt: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create2Clone(
    logicAddr: string,
    salt: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBytecodeHash(
    logicAddr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getCloneAddr(
    deployer: string,
    logicAddr: string,
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getInitBytes(logicAddr: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    create2AtomicallyClone(
      logicAddr: string,
      salt: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    create2Clone(
      logicAddr: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getBytecodeHash(
      logicAddr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getCloneAddr(
      deployer: string,
      logicAddr: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getInitBytes(logicAddr: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewClone(address,address,bytes32)"(
      proxyAddr?: null,
      logicAddr?: null,
      salt?: null
    ): TypedEventFilter<
      [string, string, string],
      { proxyAddr: string; logicAddr: string; salt: string }
    >;

    NewClone(
      proxyAddr?: null,
      logicAddr?: null,
      salt?: null
    ): TypedEventFilter<
      [string, string, string],
      { proxyAddr: string; logicAddr: string; salt: string }
    >;
  };

  estimateGas: {
    create2AtomicallyClone(
      logicAddr: string,
      salt: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create2Clone(
      logicAddr: string,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBytecodeHash(
      logicAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCloneAddr(
      deployer: string,
      logicAddr: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitBytes(
      logicAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create2AtomicallyClone(
      logicAddr: string,
      salt: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create2Clone(
      logicAddr: string,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBytecodeHash(
      logicAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCloneAddr(
      deployer: string,
      logicAddr: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitBytes(
      logicAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
