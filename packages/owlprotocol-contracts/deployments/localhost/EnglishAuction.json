{
  "address": "0x28e9139F3eE1f17efAAe8660F82890b5DEea277b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Bid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "Start",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptableToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "enum AuctionLib.TokenType",
          "name": "token",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "grantRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestBidder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_seller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum AuctionLib.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionLib.Asset",
          "name": "_asset",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "ERC20contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_resetTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_saleFee",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_saleFeeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_seller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum AuctionLib.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionLib.Asset",
          "name": "_asset",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "ERC20contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_resetTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_saleFee",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_saleFeeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "proxyInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleFeeAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b9b5dc8b1d80c678cd180febf0768f30e5b237d5b66eecab7cd298fd39f4804",
  "receipt": {
    "to": null,
    "from": "0x6fd935c3BbbDf664b67e28B14236a66a7588D683",
    "contractAddress": "0x28e9139F3eE1f17efAAe8660F82890b5DEea277b",
    "transactionIndex": 0,
    "gasUsed": "2556386",
    "logsBloom": "0x
    "blockHash": "0x53d03d58d5f3afd7a4ff29cfccebd3254c63aa725e7112d96351b0fc5fa71fa5",
    "transactionHash": "0x3b9b5dc8b1d80c678cd180febf0768f30e5b237d5b66eecab7cd298fd39f4804",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26,
        "transactionHash": "0x3b9b5dc8b1d80c678cd180febf0768f30e5b237d5b66eecab7cd298fd39f4804",
        "address": "0x28e9139F3eE1f17efAAe8660F82890b5DEea277b",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x53d03d58d5f3afd7a4ff29cfccebd3254c63aa725e7112d96351b0fc5fa71fa5"
      }
    ],
    "blockNumber": 26,
    "cumulativeGasUsed": "2556386",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "28b4d2e2155903f56ed1fc988848ec0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptableToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"enum AuctionLib.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"grantRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AuctionLib.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionLib.Asset\",\"name\":\"_asset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"ERC20contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resetTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_saleFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AuctionLib.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionLib.Asset\",\"name\":\"_asset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"ERC20contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resetTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_saleFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"proxyInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleFeeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is a standard English Auction smart contract that allows bidders to keep bidding until the highest bidder wins the asset. In an English Auction, the owner defines the starting price and bidders can make bids that are higher than the current price.* The auction duration is defined by the bids being made and if they are made within the resetTime. Theoretically, the auction can go on forever if higher bids continue to be made within the resetTime period.* Once the ending time is passed, the auction finishes and the NFT is transferred to the highest bidder.\",\"kind\":\"dev\",\"methods\":{\"bid(uint256)\":{\"details\":\"Allow a user to place a bid that must be higher than the highest bid\",\"params\":{\"amount\":\"to bid by the bidder\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getCurrentBid()\":{\"details\":\"Returns the current highest bid\"},\"getRemainingTime()\":{\"details\":\"Returns the remaining time in the auction\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"grantRouter(address)\":{\"details\":\"Grants ROUTER_ROLE to {a}\",\"params\":{\"to\":\"address to\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,(uint8,address,uint256),address,uint256,uint256,uint256,uint256,address,address)\":{\"details\":\"Create English Auction instance\",\"params\":{\"ERC20contractAddress\":\"address of ERC20 token accepted as payment\",\"_asset\":\"struct containing information of the asset to be listed\",\"_auctionDuration\":\"duration of auction (in seconds)\",\"_forwarder\":\"the address for the Trusted Forwarder for Open GSN integration\",\"_resetTime\":\"time at which the auction resets when a bid is made within this time frame (in seconds)\",\"_saleFee\":\"the percentage of the sale to be sent to the original owner as commission\",\"_saleFeeAddress\":\"the address to which the sale fee is sent\",\"_seller\":\"address of seller for auction\",\"_startPrice\":\"start bid on nft\"}},\"isTrustedForwarder(address)\":{\"details\":\"Return trusted forwarder status.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"ownerClaim()\":{\"details\":\"Allows owner to claim bid. The seller must call to transfer the ERC20 to themselves\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"ERC165 Support\",\"params\":{\"interfaceId\":\"hash of the interface testing for\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"winnerClaim()\":{\"details\":\"Allows auction winner to claim the asset they won and transfers ownership\"},\"withdraw()\":{\"details\":\"Allows a user to withdraw their bid.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"grantRouter(address)\":{\"notice\":\"Must have owner role\"},\"isTrustedForwarder(address)\":{\"notice\":\"**REQUIRED FOR GSN**\"},\"withdraw()\":{\"notice\":\"Highest bidder cannot withdraw\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/finance/EnglishAuction.sol\":\"EnglishAuction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/OwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\n/**\\n * @dev Base for all OWLPROTOCOL contracts\\n */\\nabstract contract OwlBase is UUPSUpgradeable, AccessControlUpgradeable {\\n    bytes32 internal constant ROUTER_ROLE = keccak256('ROUTER_ROLE');\\n\\n    function __OwlBase_init(address _admin, address _forwarder) internal onlyInitializing {\\n        __OwlBase_init_unchained(_admin, _forwarder);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(ROUTER_ROLE, _forwarder);\\n    }\\n\\n    function __OwlBase_init_unchained(address _admin, address _forwarder) internal onlyInitializing {}\\n\\n    /**\\n     * @notice **REQUIRED FOR GSN**\\n     * @dev Return trusted forwarder status.\\n     */\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return hasRole(ROUTER_ROLE, forwarder);\\n    }\\n\\n    /**\\n     * @notice Must have owner role\\n     * @dev Grants ROUTER_ROLE to {a}\\n     * @param to address to\\n     */\\n    function grantRouter(address to) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(ROUTER_ROLE, to);\\n    }\\n\\n    /**\\n     * UUPS functions\\n     */\\n    function _authorizeUpgrade(address) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /**\\n     * @notice the following 3 functions are all required for OpenGSN integration\\n     */\\n    function _msgSender() internal view virtual override returns (address ret) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    function versionRecipient() external pure virtual returns (string memory) {\\n        return '2.2.6';\\n    }\\n}\\n\",\"keccak256\":\"0x180c31656eea629c79f34679ec30ed6e4330ad68d03d4eacdf836fe1b8f0f06f\",\"license\":\"MIT\"},\"contracts/finance/AuctionLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Basic auction structures used through auction contracts.\\n *\\n */\\nlibrary AuctionLib {\\n    enum TokenType {\\n        erc721,\\n        erc1155\\n    }\\n\\n    struct Asset {\\n        TokenType token;\\n        address contractAddr;\\n        uint256 tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0xe87259d9d296587ca85d8b7fdc970f0ac46e2c458d72864766db7f440f7a7805\",\"license\":\"MIT\"},\"contracts/finance/EnglishAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol';\\n\\nimport '../OwlBase.sol';\\nimport './AuctionLib.sol';\\n\\n/**\\n * @dev This contract is a standard English Auction smart contract that allows\\n * bidders to keep bidding until the highest bidder wins the asset. In an\\n * English Auction, the owner defines the starting price and bidders can make\\n * bids that are higher than the current price.* The auction duration is defined\\n * by the bids being made and if they are made within the resetTime.\\n * Theoretically, the auction can go on forever if higher bids continue to be\\n * made within the resetTime period.* Once the ending time is passed, the\\n * auction finishes and the NFT is transferred to the highest bidder.\\n */\\ncontract EnglishAuction is OwlBase, ERC721HolderUpgradeable, ERC1155HolderUpgradeable {\\n    // Specification + ERC165\\n    string public constant version = 'v0.1';\\n    bytes4 private constant ERC165TAG = bytes4(keccak256(abi.encodePacked('OWLProtocol://EnglishAuction/', version)));\\n\\n    /**********************\\n             Types\\n    **********************/\\n    event Start(uint256 startTime);\\n    event Bid(address indexed sender, uint256 amount);\\n    event Withdraw(address indexed bidder, uint256 amount);\\n\\n    AuctionLib.Asset public asset;\\n    address public acceptableToken;\\n\\n    address payable public seller;\\n    address payable public saleFeeAddress;\\n    bool public ownerClaimed;\\n    bool public winnerClaimed;\\n\\n    uint256 public endAt;\\n    uint256 public auctionDuration;\\n    uint256 public startPrice;\\n    uint256 public resetTime; //number of seconds the auction is reset to after a bid within this time\\n    uint256 public saleFee;\\n\\n    address public highestBidder;\\n    mapping(address => uint256) public bids;\\n\\n    /**********************\\n        Initialization\\n    **********************/\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Create English Auction instance\\n     * @param _seller address of seller for auction\\n     * @param _asset struct containing information of the asset to be listed\\n     * @param ERC20contractAddress address of ERC20 token accepted as payment\\n     * @param _startPrice start bid on nft\\n     * @param _auctionDuration duration of auction (in seconds)\\n     * @param _resetTime time at which the auction resets when a bid is made within this time frame (in seconds)\\n     * @param _saleFee the percentage of the sale to be sent to the original owner as commission\\n     * @param _saleFeeAddress the address to which the sale fee is sent\\n     * @param _forwarder the address for the Trusted Forwarder for Open GSN integration\\n     */\\n    function initialize(\\n        address payable _seller,\\n        AuctionLib.Asset calldata _asset,\\n        address ERC20contractAddress,\\n        uint256 _startPrice,\\n        uint256 _auctionDuration,\\n        uint256 _resetTime,\\n        uint256 _saleFee,\\n        address payable _saleFeeAddress,\\n        address _forwarder\\n    ) external initializer {\\n        __EnglishAuction_init(\\n            _seller,\\n            _asset,\\n            ERC20contractAddress,\\n            _startPrice,\\n            _auctionDuration,\\n            _resetTime,\\n            _saleFee,\\n            _saleFeeAddress,\\n            _forwarder\\n        );\\n    }\\n\\n    function proxyInitialize(\\n        address payable _seller,\\n        AuctionLib.Asset calldata _asset,\\n        address ERC20contractAddress,\\n        uint256 _startPrice,\\n        uint256 _auctionDuration,\\n        uint256 _resetTime,\\n        uint256 _saleFee,\\n        address payable _saleFeeAddress,\\n        address _forwarder\\n    ) external onlyInitializing {\\n        __EnglishAuction_init(\\n            _seller,\\n            _asset,\\n            ERC20contractAddress,\\n            _startPrice,\\n            _auctionDuration,\\n            _resetTime,\\n            _saleFee,\\n            _saleFeeAddress,\\n            _forwarder\\n        );\\n    }\\n\\n    function __EnglishAuction_init(\\n        address payable _seller,\\n        AuctionLib.Asset calldata _asset,\\n        address ERC20contractAddress,\\n        uint256 _startPrice,\\n        uint256 _auctionDuration,\\n        uint256 _resetTime,\\n        uint256 _saleFee,\\n        address payable _saleFeeAddress,\\n        address _forwarder\\n    ) internal onlyInitializing {\\n        __OwlBase_init(_seller, _forwarder);\\n\\n        __EnglishAuction_init_unchained(\\n            _seller,\\n            _asset,\\n            ERC20contractAddress,\\n            _startPrice,\\n            _auctionDuration,\\n            _resetTime,\\n            _saleFee,\\n            _saleFeeAddress\\n        );\\n    }\\n\\n    function __EnglishAuction_init_unchained(\\n        address payable _seller,\\n        AuctionLib.Asset calldata _asset,\\n        address ERC20contractAddress,\\n        uint256 _startPrice,\\n        uint256 _auctionDuration,\\n        uint256 _resetTime,\\n        uint256 _saleFee,\\n        address payable _saleFeeAddress\\n    ) internal onlyInitializing {\\n        require(_saleFee <= 100, 'EnglishAuction: saleFee cannot be above 100 percent!');\\n        asset = _asset;\\n\\n        acceptableToken = ERC20contractAddress;\\n\\n        seller = _seller;\\n        auctionDuration = _auctionDuration;\\n        startPrice = _startPrice;\\n        resetTime = _resetTime;\\n        saleFee = _saleFee;\\n        saleFeeAddress = _saleFeeAddress;\\n\\n        // Transferring ERC721\\n        if (asset.token == AuctionLib.TokenType.erc721)\\n            IERC721Upgradeable(asset.contractAddr).transferFrom(seller, address(this), asset.tokenId);\\n        else if (asset.token == AuctionLib.TokenType.erc1155)\\n            // Transferring ERC1155\\n            IERC1155Upgradeable(asset.contractAddr).safeTransferFrom(\\n                seller,\\n                address(this),\\n                asset.tokenId,\\n                1,\\n                new bytes(0)\\n            );\\n        else revert();\\n\\n        endAt = block.timestamp + _auctionDuration * 1 seconds;\\n    }\\n\\n    /**********************\\n         Interaction\\n    **********************/\\n    /**\\n     * @dev Allow a user to place a bid that must be higher than the highest bid\\n     * @param amount to bid by the bidder\\n     */\\n    function bid(uint256 amount) external {\\n        require(block.timestamp < endAt, 'EnglishAuction: ended');\\n        require(amount > bids[highestBidder], 'EnglishAuction: value <= highest');\\n\\n        highestBidder = _msgSender();\\n        uint256 currBid = bids[_msgSender()];\\n        bids[_msgSender()] += amount - bids[_msgSender()];\\n\\n        SafeERC20Upgradeable.safeTransferFrom(\\n            IERC20Upgradeable(acceptableToken),\\n            _msgSender(),\\n            address(this),\\n            amount - currBid\\n        );\\n\\n        // if bid is made with < reset time remaining on the auction , then add to endAt\\n        if (endAt - block.timestamp < resetTime) endAt = (block.timestamp + resetTime) * 1 seconds;\\n\\n        emit Bid(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @notice Highest bidder cannot withdraw\\n     * @dev Allows a user to withdraw their bid.\\n     */\\n    function withdraw() external {\\n        // Added from parameter as above\\n        require(_msgSender() != highestBidder, 'EnglishAuction: the highest bidder cannot withdraw!');\\n\\n        uint256 bal = bids[_msgSender()];\\n        bids[_msgSender()] = 0;\\n\\n        IERC20Upgradeable(acceptableToken).transfer(_msgSender(), bal);\\n\\n        emit Withdraw(_msgSender(), bal);\\n    }\\n\\n    /**\\n     * @dev Allows owner to claim bid.\\n     * The seller must call to transfer the ERC20 to themselves\\n     */\\n    function ownerClaim() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(block.timestamp >= endAt, 'EnglishAuction: not ended');\\n        require(!ownerClaimed, 'EnglishAuction: owner has already claimed');\\n\\n        ownerClaimed = true;\\n        if (highestBidder != address(0)) {\\n            IERC20Upgradeable(acceptableToken).transfer(saleFeeAddress, (saleFee * bids[highestBidder]) / 100);\\n\\n            IERC20Upgradeable(acceptableToken).transfer(\\n                seller,\\n                bids[highestBidder] - (saleFee * bids[highestBidder]) / 100\\n            );\\n        } else {\\n            if (asset.token == AuctionLib.TokenType.erc721)\\n                IERC721Upgradeable(asset.contractAddr).safeTransferFrom(address(this), seller, asset.tokenId);\\n            else {\\n                // Asset token type is 1155 as initialization did not revert\\n                IERC1155Upgradeable(asset.contractAddr).safeTransferFrom(\\n                    address(this),\\n                    seller,\\n                    asset.tokenId,\\n                    1,\\n                    new bytes(0)\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows auction winner to claim the asset they won and transfers ownership\\n     */\\n    function winnerClaim() external {\\n        require(block.timestamp >= endAt, 'EnglishAuction: not ended');\\n        require(!winnerClaimed, 'EnglishAuction: winner has already claimed');\\n        require(_msgSender() == highestBidder, 'EnglishAuction: you are not the winner, you cannot claim!'); //highestBidder at end is the winning address\\n\\n        winnerClaimed = true;\\n        if (asset.token == AuctionLib.TokenType.erc721)\\n            IERC721Upgradeable(asset.contractAddr).safeTransferFrom(address(this), highestBidder, asset.tokenId);\\n        else {\\n            // Asset token type is 1155 as initialization did not revert\\n            IERC1155Upgradeable(asset.contractAddr).safeTransferFrom(\\n                address(this),\\n                highestBidder,\\n                asset.tokenId,\\n                1,\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    /**********************\\n            Getters\\n    **********************/\\n\\n    /**\\n     * @dev Returns the current highest bid\\n     */\\n    function getCurrentBid() external view returns (uint256) {\\n        //show the current price\\n        return bids[highestBidder];\\n    }\\n\\n    /**\\n     * @dev Returns the remaining time in the auction\\n     */\\n    function getRemainingTime() external view returns (uint256) {\\n        if (block.timestamp >= endAt) return 0;\\n        return endAt - block.timestamp; //in seconds\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId hash of the interface testing for\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ERC1155ReceiverUpgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == ERC165TAG || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x5cb67ca1cc1fd7dd4232684f1cd0442b36ba966ebe722c4a204ef427f7712b85\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051612cd262000120600039600081816108bb015281816108fb0152818161123a0152818161127a01526112f20152612cd26000f3fe6080604052600436106102305760003560e01c8063572b6c051161012e578063a217fddf116100ab578063d547741f1161006f578063d547741f146106ea578063de99f2cb1461070a578063efb98bcf1461072b578063f1a9af8914610740578063f23a6e611461075757600080fd5b8063a217fddf1461065f578063a2abe93e14610674578063aaf10f4214610689578063bc197c811461069e578063c4211d9c146106ca57600080fd5b80637f1ecfe0116100f25780637f1ecfe0146105ae57806387bcaeb3146105dd57806391d14854146105fe57806391f901571461061e57806398c76d251461063f57600080fd5b8063572b6c051461051057806362ea82db1461053057806365a114f11461055e5780636c66cbb9146105755780637cc3ae8c1461059757600080fd5b80633659cfe6116101bc5780634bc99a71116101805780634bc99a71146104835780634dbe5889146104a35780634f1ef286146104b857806352d1902d146104cb57806354fd4d50146104e057600080fd5b80633659cfe6146103b757806338d52e0f146103d75780633ccfd60b14610417578063454a2ab31461042c578063486ff0cd1461044c57600080fd5b8063178021e311610203578063178021e31461030c578063180cc7ca14610323578063248a9ca3146103455780632f2ff15d1461037557806336568abe1461039757600080fd5b806301ffc9a71461023557806308551a531461026a5780630cbf54c8146102a3578063150b7a02146102c8575b600080fd5b34801561024157600080fd5b506102556102503660046123c7565b610783565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b506101945461028b906001600160a01b031681565b6040516001600160a01b039091168152602001610261565b3480156102af57600080fd5b506102ba6101975481565b604051908152602001610261565b3480156102d457600080fd5b506102f36102e33660046124bd565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610261565b34801561031857600080fd5b506102ba61019a5481565b34801561032f57600080fd5b506101955461025590600160a01b900460ff1681565b34801561035157600080fd5b506102ba610360366004612529565b600090815260c9602052604090206001015490565b34801561038157600080fd5b50610395610390366004612542565b6107f3565b005b3480156103a357600080fd5b506103956103b2366004612542565b61081d565b3480156103c357600080fd5b506103956103d2366004612572565b6108b0565b3480156103e357600080fd5b5061019154610192546104089160ff8116916101009091046001600160a01b03169083565b604051610261939291906125a5565b34801561042357600080fd5b50610395610979565b34801561043857600080fd5b50610395610447366004612529565b610b41565b34801561045857600080fd5b50604080518082019091526005815264191719171b60d91b60208201525b604051610261919061263c565b34801561048f57600080fd5b5061039561049e36600461264f565b610d70565b3480156104af57600080fd5b50610395610e93565b6103956104c63660046126f3565b61122f565b3480156104d757600080fd5b506102ba6112e5565b3480156104ec57600080fd5b506104766040518060400160405280600481526020016376302e3160e01b81525081565b34801561051c57600080fd5b5061025561052b366004612572565b611398565b34801561053c57600080fd5b506102ba61054b366004612572565b61019c6020526000908152604090205481565b34801561056a57600080fd5b506102ba6101995481565b34801561058157600080fd5b506101955461025590600160a81b900460ff1681565b3480156105a357600080fd5b506102ba6101965481565b3480156105ba57600080fd5b5061019b546001600160a01b0316600090815261019c60205260409020546102ba565b3480156105e957600080fd5b506101955461028b906001600160a01b031681565b34801561060a57600080fd5b50610255610619366004612542565b6113ae565b34801561062a57600080fd5b5061019b5461028b906001600160a01b031681565b34801561064b57600080fd5b5061039561065a366004612572565b6113d9565b34801561066b57600080fd5b506102ba600081565b34801561068057600080fd5b506103956113fc565b34801561069557600080fd5b5061028b61164a565b3480156106aa57600080fd5b506102f36106b93660046127b8565b63bc197c8160e01b95945050505050565b3480156106d657600080fd5b506103956106e536600461264f565b611659565b3480156106f657600080fd5b50610395610705366004612542565b61169c565b34801561071657600080fd5b506101935461028b906001600160a01b031681565b34801561073757600080fd5b506102ba6116c1565b34801561074c57600080fd5b506102ba6101985481565b34801561076357600080fd5b506102f3610772366004612866565b63f23a6e6160e01b95945050505050565b60006040518060400160405280600481526020016376302e3160e01b8152506040516020016107b291906128cf565b604051602081830303815290604052805190602001206001600160e01b031916826001600160e01b03191614806107ed57506107ed826116e2565b92915050565b600082815260c9602052604090206001015461080e81611707565b6108188383611718565b505050565b61082561179f565b6001600160a01b0316816001600160a01b0316146108a25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6108ac82826117dc565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108f95760405162461bcd60e51b815260040161089990612914565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661092b611861565b6001600160a01b0316146109515760405162461bcd60e51b815260040161089990612960565b61095a8161187d565b6040805160008082526020820190925261097691839190611888565b50565b61019b546001600160a01b031661098e61179f565b6001600160a01b03161415610a015760405162461bcd60e51b815260206004820152603360248201527f456e676c69736841756374696f6e3a207468652068696768657374206269646460448201527265722063616e6e6f742077697468647261772160681b6064820152608401610899565b600061019c6000610a1061179f565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050600061019c6000610a4261179f565b6001600160a01b039081168252602082019290925260400160002091909155610193541663a9059cbb610a7361179f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b158015610abb57600080fd5b505af1158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af391906129ac565b50610afc61179f565b6001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482604051610b3691815260200190565b60405180910390a250565b610196544210610b8b5760405162461bcd60e51b8152602060048201526015602482015274115b99db1a5cda105d58dd1a5bdb8e88195b991959605a1b6044820152606401610899565b61019b546001600160a01b0316600090815261019c60205260409020548111610bf65760405162461bcd60e51b815260206004820181905260248201527f456e676c69736841756374696f6e3a2076616c7565203c3d20686967686573746044820152606401610899565b610bfe61179f565b61019b80546001600160a01b0319166001600160a01b0392909216919091179055600061019c81610c2d61179f565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905061019c6000610c5d61179f565b6001600160a01b03168152602081019190915260400160002054610c8190836129e4565b61019c6000610c8e61179f565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610cbd91906129fb565b909155505061019354610ceb906001600160a01b0316610cdb61179f565b30610ce685876129e4565b611a02565b610199544261019654610cfe91906129e4565b1015610d225761019954610d1290426129fb565b610d1d906001612a13565b610196555b610d2a61179f565b6001600160a01b03167fe684a55f31b79eca403df938249029212a5925ec6be8012e099b45bc1019e5d283604051610d6491815260200190565b60405180910390a25050565b600054610100900460ff1615808015610d905750600054600160ff909116105b80610daa5750303b158015610daa575060005460ff166001145b610e0d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610899565b6000805460ff191660011790558015610e30576000805461ff0019166101001790555b610e418a8a8a8a8a8a8a8a8a611a5a565b8015610e87576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b6000610e9e81611707565b61019654421015610eed5760405162461bcd60e51b8152602060048201526019602482015278115b99db1a5cda105d58dd1a5bdb8e881b9bdd08195b991959603a1b6044820152606401610899565b61019554600160a01b900460ff1615610f5a5760405162461bcd60e51b815260206004820152602960248201527f456e676c69736841756374696f6e3a206f776e65722068617320616c726561646044820152681e4818db185a5b595960ba1b6064820152608401610899565b610195805460ff60a01b1916600160a01b17905561019b546001600160a01b03161561114257610193546101955461019b546001600160a01b03908116600090815261019c602052604090205461019a549382169363a9059cbb9390921691606491610fc591612a13565b610fcf9190612a32565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561101557600080fd5b505af1158015611029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104d91906129ac565b50610193546101945461019b546001600160a01b03908116600090815261019c602052604090205461019a549382169363a9059cbb939092169160649161109391612a13565b61109d9190612a32565b61019b546001600160a01b0316600090815261019c60205260409020546110c491906129e4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561110a57600080fd5b505af115801561111e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac91906129ac565b60006101915460ff16600181111561115c5761115c61258f565b14156111da57610191546101945461019254604051632142170760e11b81526101009093046001600160a01b03908116936342842e0e936111a593309390911691600401612a54565b600060405180830381600087803b1580156111bf57600080fd5b505af11580156111d3573d6000803e3d6000fd5b5050505050565b61019154610194546101925460408051600081526020810191829052637921219560e11b9091526001600160a01b0361010090940484169363f242432a936111a5933093929091169160019060248101612a78565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112785760405162461bcd60e51b815260040161089990612914565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112aa611861565b6001600160a01b0316146112d05760405162461bcd60e51b815260040161089990612960565b6112d98261187d565b6108ac82826001611888565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113855760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610899565b50600080516020612c3683398151915290565b60006107ed600080516020612c7d833981519152835b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006113e481611707565b6108ac600080516020612c7d83398151915283611718565b6101965442101561144b5760405162461bcd60e51b8152602060048201526019602482015278115b99db1a5cda105d58dd1a5bdb8e881b9bdd08195b991959603a1b6044820152606401610899565b61019554600160a81b900460ff16156114b95760405162461bcd60e51b815260206004820152602a60248201527f456e676c69736841756374696f6e3a2077696e6e65722068617320616c726561604482015269191e4818db185a5b595960b21b6064820152608401610899565b61019b546001600160a01b03166114ce61179f565b6001600160a01b03161461154a5760405162461bcd60e51b815260206004820152603960248201527f456e676c69736841756374696f6e3a20796f7520617265206e6f74207468652060448201527f77696e6e65722c20796f752063616e6e6f7420636c61696d21000000000000006064820152608401610899565b610195805460ff60a81b1916600160a81b17905560006101915460ff1660018111156115785761157861258f565b14156115f5576101915461019b5461019254604051632142170760e11b81526101009093046001600160a01b03908116936342842e0e936115c193309390911691600401612a54565b600060405180830381600087803b1580156115db57600080fd5b505af11580156115ef573d6000803e3d6000fd5b50505050565b6101915461019b546101925460408051600081526020810191829052637921219560e11b9091526001600160a01b0361010090940484169363f242432a936115c1933093929091169160019060248101612a78565b6000611654611861565b905090565b600054610100900460ff166116805760405162461bcd60e51b815260040161089990612ab2565b611691898989898989898989611a5a565b505050505050505050565b600082815260c960205260409020600101546116b781611707565b61081883836117dc565b60006101965442106116d35750600090565b426101965461165491906129e4565b60006001600160e01b03198216630271189760e51b14806107ed57506107ed82611a9b565b6109768161171361179f565b611ad0565b61172282826113ae565b6108ac57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561175b61179f565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000601436108015906117c557506117c5600080516020612c7d833981519152336113ae565b156117d7575060131936013560601c90565b503390565b6117e682826113ae565b156108ac57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff1916905561181d61179f565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600080516020612c36833981519152546001600160a01b031690565b60006108ac81611707565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156118bb5761081883611b34565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118f457600080fd5b505afa925050508015611924575060408051601f3d908101601f1916820190925261192191810190612afd565b60015b6119875760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610899565b600080516020612c3683398151915281146119f65760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610899565b50610818838383611bd0565b6115ef846323b872dd60e01b858585604051602401611a2393929190612a54565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611bf5565b600054610100900460ff16611a815760405162461bcd60e51b815260040161089990612ab2565b611a8b8982611cc7565b6116918989898989898989611d1b565b60006001600160e01b03198216637965db0b60e01b14806107ed57506301ffc9a760e01b6001600160e01b03198316146107ed565b611ada82826113ae565b6108ac57611af2816001600160a01b03166014611f48565b611afd836020611f48565b604051602001611b0e929190612b16565b60408051601f198184030181529082905262461bcd60e51b82526108999160040161263c565b6001600160a01b0381163b611ba15760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610899565b600080516020612c3683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611bd9836120eb565b600082511180611be65750805b15610818576115ef838361212b565b6000611c4a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661221f9092919063ffffffff16565b8051909150156108185780806020019051810190611c6891906129ac565b6108185760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610899565b600054610100900460ff16611cee5760405162461bcd60e51b815260040161089990612ab2565b611cf88282612236565b611d03600083611718565b6108ac600080516020612c7d83398151915282611718565b600054610100900460ff16611d425760405162461bcd60e51b815260040161089990612ab2565b6064821115611db05760405162461bcd60e51b815260206004820152603460248201527f456e676c69736841756374696f6e3a2073616c654665652063616e6e6f742062604482015273652061626f7665203130302070657263656e742160601b6064820152608401610899565b86610191611dbe8282612b8b565b505061019380546001600160a01b038089166001600160a01b03199283161790925561019480548b841690831617905561019786905561019887905561019985905561019a84905561019580549284169290911691909117905560006101915460ff166001811115611e3257611e3261258f565b1415611eb1576101915461019454610192546040516323b872dd60e01b81526001600160a01b036101009094048416936323b872dd93611e7a93911691309190600401612a54565b600060405180830381600087803b158015611e9457600080fd5b505af1158015611ea8573d6000803e3d6000fd5b50505050611f25565b60016101915460ff166001811115611ecb57611ecb61258f565b14156102305761019154610194546101925460408051600081526020810191829052637921219560e11b9091526101009093046001600160a01b039081169363f242432a93611e7a93921691309160019060248101612a78565b611f30846001612a13565b611f3a90426129fb565b610196555050505050505050565b60606000611f57836002612a13565b611f629060026129fb565b67ffffffffffffffff811115611f7a57611f7a612406565b6040519080825280601f01601f191660200182016040528015611fa4576020820181803683370190505b509050600360fc1b81600081518110611fbf57611fbf612bec565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611fee57611fee612bec565b60200101906001600160f81b031916908160001a9053506000612012846002612a13565b61201d9060016129fb565b90505b6001811115612095576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061205157612051612bec565b1a60f81b82828151811061206757612067612bec565b60200101906001600160f81b031916908160001a90535060049490941c9361208e81612c02565b9050612020565b5083156120e45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610899565b9392505050565b6120f481611b34565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6121935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610899565b600080846001600160a01b0316846040516121ae9190612c19565b600060405180830381855af49150503d80600081146121e9576040519150601f19603f3d011682016040523d82523d6000602084013e6121ee565b606091505b50915091506122168282604051806060016040528060278152602001612c566027913961225d565b95945050505050565b606061222e8484600085612296565b949350505050565b600054610100900460ff166108ac5760405162461bcd60e51b815260040161089990612ab2565b6060831561226c5750816120e4565b82511561227c5782518084602001fd5b8160405162461bcd60e51b8152600401610899919061263c565b6060824710156122f75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610899565b6001600160a01b0385163b61234e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610899565b600080866001600160a01b0316858760405161236a9190612c19565b60006040518083038185875af1925050503d80600081146123a7576040519150601f19603f3d011682016040523d82523d6000602084013e6123ac565b606091505b50915091506123bc82828661225d565b979650505050505050565b6000602082840312156123d957600080fd5b81356001600160e01b0319811681146120e457600080fd5b6001600160a01b038116811461097657600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561244557612445612406565b604052919050565b600082601f83011261245e57600080fd5b813567ffffffffffffffff81111561247857612478612406565b61248b601f8201601f191660200161241c565b8181528460208386010111156124a057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156124d357600080fd5b84356124de816123f1565b935060208501356124ee816123f1565b925060408501359150606085013567ffffffffffffffff81111561251157600080fd5b61251d8782880161244d565b91505092959194509250565b60006020828403121561253b57600080fd5b5035919050565b6000806040838503121561255557600080fd5b823591506020830135612567816123f1565b809150509250929050565b60006020828403121561258457600080fd5b81356120e4816123f1565b634e487b7160e01b600052602160045260246000fd5b60608101600285106125c757634e487b7160e01b600052602160045260246000fd5b9381526001600160a01b0392909216602083015260409091015290565b60005b838110156125ff5781810151838201526020016125e7565b838111156115ef5750506000910152565b600081518084526126288160208601602086016125e4565b601f01601f19169290920160200192915050565b6020815260006120e46020830184612610565b6000806000806000806000806000898b0361016081121561266f57600080fd5b8a3561267a816123f1565b99506060601f198201121561268e57600080fd5b5060208a01975060808a01356126a3816123f1565b965060a08a0135955060c08a0135945060e08a013593506101008a013592506101208a01356126d1816123f1565b91506101408a01356126e2816123f1565b809150509295985092959850929598565b6000806040838503121561270657600080fd5b8235612711816123f1565b9150602083013567ffffffffffffffff81111561272d57600080fd5b6127398582860161244d565b9150509250929050565b600082601f83011261275457600080fd5b8135602067ffffffffffffffff82111561277057612770612406565b8160051b61277f82820161241c565b928352848101820192828101908785111561279957600080fd5b83870192505b848310156123bc5782358252918301919083019061279f565b600080600080600060a086880312156127d057600080fd5b85356127db816123f1565b945060208601356127eb816123f1565b9350604086013567ffffffffffffffff8082111561280857600080fd5b61281489838a01612743565b9450606088013591508082111561282a57600080fd5b61283689838a01612743565b9350608088013591508082111561284c57600080fd5b506128598882890161244d565b9150509295509295909350565b600080600080600060a0868803121561287e57600080fd5b8535612889816123f1565b94506020860135612899816123f1565b93506040860135925060608601359150608086013567ffffffffffffffff8111156128c357600080fd5b6128598882890161244d565b7f4f574c50726f746f636f6c3a2f2f456e676c69736841756374696f6e2f00000081526000825161290781601d8501602087016125e4565b91909101601d0192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000602082840312156129be57600080fd5b815180151581146120e457600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156129f6576129f66129ce565b500390565b60008219821115612a0e57612a0e6129ce565b500190565b6000816000190483118215151615612a2d57612a2d6129ce565b500290565b600082612a4f57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906123bc90830184612610565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612b0f57600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612b4e8160178501602088016125e4565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612b7f8160288401602088016125e4565b01602801949350505050565b813560028110612b9a57600080fd5b815460ff821691508160ff1982161783556020840135612bb9816123f1565b6001600160a81b03199190911690911760089190911b610100600160a81b03161781556040919091013560019190910155565b634e487b7160e01b600052603260045260246000fd5b600081612c1157612c116129ce565b506000190190565b60008251612c2b8184602087016125e4565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65647a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb2a264697066735822122019473696469c3a6c3ff372f9702bf9a17f7c2b6c89cd0b820c52932b75c9a76164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102305760003560e01c8063572b6c051161012e578063a217fddf116100ab578063d547741f1161006f578063d547741f146106ea578063de99f2cb1461070a578063efb98bcf1461072b578063f1a9af8914610740578063f23a6e611461075757600080fd5b8063a217fddf1461065f578063a2abe93e14610674578063aaf10f4214610689578063bc197c811461069e578063c4211d9c146106ca57600080fd5b80637f1ecfe0116100f25780637f1ecfe0146105ae57806387bcaeb3146105dd57806391d14854146105fe57806391f901571461061e57806398c76d251461063f57600080fd5b8063572b6c051461051057806362ea82db1461053057806365a114f11461055e5780636c66cbb9146105755780637cc3ae8c1461059757600080fd5b80633659cfe6116101bc5780634bc99a71116101805780634bc99a71146104835780634dbe5889146104a35780634f1ef286146104b857806352d1902d146104cb57806354fd4d50146104e057600080fd5b80633659cfe6146103b757806338d52e0f146103d75780633ccfd60b14610417578063454a2ab31461042c578063486ff0cd1461044c57600080fd5b8063178021e311610203578063178021e31461030c578063180cc7ca14610323578063248a9ca3146103455780632f2ff15d1461037557806336568abe1461039757600080fd5b806301ffc9a71461023557806308551a531461026a5780630cbf54c8146102a3578063150b7a02146102c8575b600080fd5b34801561024157600080fd5b506102556102503660046123c7565b610783565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b506101945461028b906001600160a01b031681565b6040516001600160a01b039091168152602001610261565b3480156102af57600080fd5b506102ba6101975481565b604051908152602001610261565b3480156102d457600080fd5b506102f36102e33660046124bd565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610261565b34801561031857600080fd5b506102ba61019a5481565b34801561032f57600080fd5b506101955461025590600160a01b900460ff1681565b34801561035157600080fd5b506102ba610360366004612529565b600090815260c9602052604090206001015490565b34801561038157600080fd5b50610395610390366004612542565b6107f3565b005b3480156103a357600080fd5b506103956103b2366004612542565b61081d565b3480156103c357600080fd5b506103956103d2366004612572565b6108b0565b3480156103e357600080fd5b5061019154610192546104089160ff8116916101009091046001600160a01b03169083565b604051610261939291906125a5565b34801561042357600080fd5b50610395610979565b34801561043857600080fd5b50610395610447366004612529565b610b41565b34801561045857600080fd5b50604080518082019091526005815264191719171b60d91b60208201525b604051610261919061263c565b34801561048f57600080fd5b5061039561049e36600461264f565b610d70565b3480156104af57600080fd5b50610395610e93565b6103956104c63660046126f3565b61122f565b3480156104d757600080fd5b506102ba6112e5565b3480156104ec57600080fd5b506104766040518060400160405280600481526020016376302e3160e01b81525081565b34801561051c57600080fd5b5061025561052b366004612572565b611398565b34801561053c57600080fd5b506102ba61054b366004612572565b61019c6020526000908152604090205481565b34801561056a57600080fd5b506102ba6101995481565b34801561058157600080fd5b506101955461025590600160a81b900460ff1681565b3480156105a357600080fd5b506102ba6101965481565b3480156105ba57600080fd5b5061019b546001600160a01b0316600090815261019c60205260409020546102ba565b3480156105e957600080fd5b506101955461028b906001600160a01b031681565b34801561060a57600080fd5b50610255610619366004612542565b6113ae565b34801561062a57600080fd5b5061019b5461028b906001600160a01b031681565b34801561064b57600080fd5b5061039561065a366004612572565b6113d9565b34801561066b57600080fd5b506102ba600081565b34801561068057600080fd5b506103956113fc565b34801561069557600080fd5b5061028b61164a565b3480156106aa57600080fd5b506102f36106b93660046127b8565b63bc197c8160e01b95945050505050565b3480156106d657600080fd5b506103956106e536600461264f565b611659565b3480156106f657600080fd5b50610395610705366004612542565b61169c565b34801561071657600080fd5b506101935461028b906001600160a01b031681565b34801561073757600080fd5b506102ba6116c1565b34801561074c57600080fd5b506102ba6101985481565b34801561076357600080fd5b506102f3610772366004612866565b63f23a6e6160e01b95945050505050565b60006040518060400160405280600481526020016376302e3160e01b8152506040516020016107b291906128cf565b604051602081830303815290604052805190602001206001600160e01b031916826001600160e01b03191614806107ed57506107ed826116e2565b92915050565b600082815260c9602052604090206001015461080e81611707565b6108188383611718565b505050565b61082561179f565b6001600160a01b0316816001600160a01b0316146108a25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6108ac82826117dc565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108f95760405162461bcd60e51b815260040161089990612914565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661092b611861565b6001600160a01b0316146109515760405162461bcd60e51b815260040161089990612960565b61095a8161187d565b6040805160008082526020820190925261097691839190611888565b50565b61019b546001600160a01b031661098e61179f565b6001600160a01b03161415610a015760405162461bcd60e51b815260206004820152603360248201527f456e676c69736841756374696f6e3a207468652068696768657374206269646460448201527265722063616e6e6f742077697468647261772160681b6064820152608401610899565b600061019c6000610a1061179f565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050600061019c6000610a4261179f565b6001600160a01b039081168252602082019290925260400160002091909155610193541663a9059cbb610a7361179f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b158015610abb57600080fd5b505af1158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af391906129ac565b50610afc61179f565b6001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482604051610b3691815260200190565b60405180910390a250565b610196544210610b8b5760405162461bcd60e51b8152602060048201526015602482015274115b99db1a5cda105d58dd1a5bdb8e88195b991959605a1b6044820152606401610899565b61019b546001600160a01b0316600090815261019c60205260409020548111610bf65760405162461bcd60e51b815260206004820181905260248201527f456e676c69736841756374696f6e3a2076616c7565203c3d20686967686573746044820152606401610899565b610bfe61179f565b61019b80546001600160a01b0319166001600160a01b0392909216919091179055600061019c81610c2d61179f565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905061019c6000610c5d61179f565b6001600160a01b03168152602081019190915260400160002054610c8190836129e4565b61019c6000610c8e61179f565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610cbd91906129fb565b909155505061019354610ceb906001600160a01b0316610cdb61179f565b30610ce685876129e4565b611a02565b610199544261019654610cfe91906129e4565b1015610d225761019954610d1290426129fb565b610d1d906001612a13565b610196555b610d2a61179f565b6001600160a01b03167fe684a55f31b79eca403df938249029212a5925ec6be8012e099b45bc1019e5d283604051610d6491815260200190565b60405180910390a25050565b600054610100900460ff1615808015610d905750600054600160ff909116105b80610daa5750303b158015610daa575060005460ff166001145b610e0d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610899565b6000805460ff191660011790558015610e30576000805461ff0019166101001790555b610e418a8a8a8a8a8a8a8a8a611a5a565b8015610e87576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b6000610e9e81611707565b61019654421015610eed5760405162461bcd60e51b8152602060048201526019602482015278115b99db1a5cda105d58dd1a5bdb8e881b9bdd08195b991959603a1b6044820152606401610899565b61019554600160a01b900460ff1615610f5a5760405162461bcd60e51b815260206004820152602960248201527f456e676c69736841756374696f6e3a206f776e65722068617320616c726561646044820152681e4818db185a5b595960ba1b6064820152608401610899565b610195805460ff60a01b1916600160a01b17905561019b546001600160a01b03161561114257610193546101955461019b546001600160a01b03908116600090815261019c602052604090205461019a549382169363a9059cbb9390921691606491610fc591612a13565b610fcf9190612a32565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561101557600080fd5b505af1158015611029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104d91906129ac565b50610193546101945461019b546001600160a01b03908116600090815261019c602052604090205461019a549382169363a9059cbb939092169160649161109391612a13565b61109d9190612a32565b61019b546001600160a01b0316600090815261019c60205260409020546110c491906129e4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561110a57600080fd5b505af115801561111e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac91906129ac565b60006101915460ff16600181111561115c5761115c61258f565b14156111da57610191546101945461019254604051632142170760e11b81526101009093046001600160a01b03908116936342842e0e936111a593309390911691600401612a54565b600060405180830381600087803b1580156111bf57600080fd5b505af11580156111d3573d6000803e3d6000fd5b5050505050565b61019154610194546101925460408051600081526020810191829052637921219560e11b9091526001600160a01b0361010090940484169363f242432a936111a5933093929091169160019060248101612a78565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112785760405162461bcd60e51b815260040161089990612914565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112aa611861565b6001600160a01b0316146112d05760405162461bcd60e51b815260040161089990612960565b6112d98261187d565b6108ac82826001611888565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113855760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610899565b50600080516020612c3683398151915290565b60006107ed600080516020612c7d833981519152835b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006113e481611707565b6108ac600080516020612c7d83398151915283611718565b6101965442101561144b5760405162461bcd60e51b8152602060048201526019602482015278115b99db1a5cda105d58dd1a5bdb8e881b9bdd08195b991959603a1b6044820152606401610899565b61019554600160a81b900460ff16156114b95760405162461bcd60e51b815260206004820152602a60248201527f456e676c69736841756374696f6e3a2077696e6e65722068617320616c726561604482015269191e4818db185a5b595960b21b6064820152608401610899565b61019b546001600160a01b03166114ce61179f565b6001600160a01b03161461154a5760405162461bcd60e51b815260206004820152603960248201527f456e676c69736841756374696f6e3a20796f7520617265206e6f74207468652060448201527f77696e6e65722c20796f752063616e6e6f7420636c61696d21000000000000006064820152608401610899565b610195805460ff60a81b1916600160a81b17905560006101915460ff1660018111156115785761157861258f565b14156115f5576101915461019b5461019254604051632142170760e11b81526101009093046001600160a01b03908116936342842e0e936115c193309390911691600401612a54565b600060405180830381600087803b1580156115db57600080fd5b505af11580156115ef573d6000803e3d6000fd5b50505050565b6101915461019b546101925460408051600081526020810191829052637921219560e11b9091526001600160a01b0361010090940484169363f242432a936115c1933093929091169160019060248101612a78565b6000611654611861565b905090565b600054610100900460ff166116805760405162461bcd60e51b815260040161089990612ab2565b611691898989898989898989611a5a565b505050505050505050565b600082815260c960205260409020600101546116b781611707565b61081883836117dc565b60006101965442106116d35750600090565b426101965461165491906129e4565b60006001600160e01b03198216630271189760e51b14806107ed57506107ed82611a9b565b6109768161171361179f565b611ad0565b61172282826113ae565b6108ac57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561175b61179f565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000601436108015906117c557506117c5600080516020612c7d833981519152336113ae565b156117d7575060131936013560601c90565b503390565b6117e682826113ae565b156108ac57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff1916905561181d61179f565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600080516020612c36833981519152546001600160a01b031690565b60006108ac81611707565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156118bb5761081883611b34565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118f457600080fd5b505afa925050508015611924575060408051601f3d908101601f1916820190925261192191810190612afd565b60015b6119875760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610899565b600080516020612c3683398151915281146119f65760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610899565b50610818838383611bd0565b6115ef846323b872dd60e01b858585604051602401611a2393929190612a54565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611bf5565b600054610100900460ff16611a815760405162461bcd60e51b815260040161089990612ab2565b611a8b8982611cc7565b6116918989898989898989611d1b565b60006001600160e01b03198216637965db0b60e01b14806107ed57506301ffc9a760e01b6001600160e01b03198316146107ed565b611ada82826113ae565b6108ac57611af2816001600160a01b03166014611f48565b611afd836020611f48565b604051602001611b0e929190612b16565b60408051601f198184030181529082905262461bcd60e51b82526108999160040161263c565b6001600160a01b0381163b611ba15760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610899565b600080516020612c3683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611bd9836120eb565b600082511180611be65750805b15610818576115ef838361212b565b6000611c4a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661221f9092919063ffffffff16565b8051909150156108185780806020019051810190611c6891906129ac565b6108185760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610899565b600054610100900460ff16611cee5760405162461bcd60e51b815260040161089990612ab2565b611cf88282612236565b611d03600083611718565b6108ac600080516020612c7d83398151915282611718565b600054610100900460ff16611d425760405162461bcd60e51b815260040161089990612ab2565b6064821115611db05760405162461bcd60e51b815260206004820152603460248201527f456e676c69736841756374696f6e3a2073616c654665652063616e6e6f742062604482015273652061626f7665203130302070657263656e742160601b6064820152608401610899565b86610191611dbe8282612b8b565b505061019380546001600160a01b038089166001600160a01b03199283161790925561019480548b841690831617905561019786905561019887905561019985905561019a84905561019580549284169290911691909117905560006101915460ff166001811115611e3257611e3261258f565b1415611eb1576101915461019454610192546040516323b872dd60e01b81526001600160a01b036101009094048416936323b872dd93611e7a93911691309190600401612a54565b600060405180830381600087803b158015611e9457600080fd5b505af1158015611ea8573d6000803e3d6000fd5b50505050611f25565b60016101915460ff166001811115611ecb57611ecb61258f565b14156102305761019154610194546101925460408051600081526020810191829052637921219560e11b9091526101009093046001600160a01b039081169363f242432a93611e7a93921691309160019060248101612a78565b611f30846001612a13565b611f3a90426129fb565b610196555050505050505050565b60606000611f57836002612a13565b611f629060026129fb565b67ffffffffffffffff811115611f7a57611f7a612406565b6040519080825280601f01601f191660200182016040528015611fa4576020820181803683370190505b509050600360fc1b81600081518110611fbf57611fbf612bec565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611fee57611fee612bec565b60200101906001600160f81b031916908160001a9053506000612012846002612a13565b61201d9060016129fb565b90505b6001811115612095576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061205157612051612bec565b1a60f81b82828151811061206757612067612bec565b60200101906001600160f81b031916908160001a90535060049490941c9361208e81612c02565b9050612020565b5083156120e45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610899565b9392505050565b6120f481611b34565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6121935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610899565b600080846001600160a01b0316846040516121ae9190612c19565b600060405180830381855af49150503d80600081146121e9576040519150601f19603f3d011682016040523d82523d6000602084013e6121ee565b606091505b50915091506122168282604051806060016040528060278152602001612c566027913961225d565b95945050505050565b606061222e8484600085612296565b949350505050565b600054610100900460ff166108ac5760405162461bcd60e51b815260040161089990612ab2565b6060831561226c5750816120e4565b82511561227c5782518084602001fd5b8160405162461bcd60e51b8152600401610899919061263c565b6060824710156122f75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610899565b6001600160a01b0385163b61234e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610899565b600080866001600160a01b0316858760405161236a9190612c19565b60006040518083038185875af1925050503d80600081146123a7576040519150601f19603f3d011682016040523d82523d6000602084013e6123ac565b606091505b50915091506123bc82828661225d565b979650505050505050565b6000602082840312156123d957600080fd5b81356001600160e01b0319811681146120e457600080fd5b6001600160a01b038116811461097657600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561244557612445612406565b604052919050565b600082601f83011261245e57600080fd5b813567ffffffffffffffff81111561247857612478612406565b61248b601f8201601f191660200161241c565b8181528460208386010111156124a057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156124d357600080fd5b84356124de816123f1565b935060208501356124ee816123f1565b925060408501359150606085013567ffffffffffffffff81111561251157600080fd5b61251d8782880161244d565b91505092959194509250565b60006020828403121561253b57600080fd5b5035919050565b6000806040838503121561255557600080fd5b823591506020830135612567816123f1565b809150509250929050565b60006020828403121561258457600080fd5b81356120e4816123f1565b634e487b7160e01b600052602160045260246000fd5b60608101600285106125c757634e487b7160e01b600052602160045260246000fd5b9381526001600160a01b0392909216602083015260409091015290565b60005b838110156125ff5781810151838201526020016125e7565b838111156115ef5750506000910152565b600081518084526126288160208601602086016125e4565b601f01601f19169290920160200192915050565b6020815260006120e46020830184612610565b6000806000806000806000806000898b0361016081121561266f57600080fd5b8a3561267a816123f1565b99506060601f198201121561268e57600080fd5b5060208a01975060808a01356126a3816123f1565b965060a08a0135955060c08a0135945060e08a013593506101008a013592506101208a01356126d1816123f1565b91506101408a01356126e2816123f1565b809150509295985092959850929598565b6000806040838503121561270657600080fd5b8235612711816123f1565b9150602083013567ffffffffffffffff81111561272d57600080fd5b6127398582860161244d565b9150509250929050565b600082601f83011261275457600080fd5b8135602067ffffffffffffffff82111561277057612770612406565b8160051b61277f82820161241c565b928352848101820192828101908785111561279957600080fd5b83870192505b848310156123bc5782358252918301919083019061279f565b600080600080600060a086880312156127d057600080fd5b85356127db816123f1565b945060208601356127eb816123f1565b9350604086013567ffffffffffffffff8082111561280857600080fd5b61281489838a01612743565b9450606088013591508082111561282a57600080fd5b61283689838a01612743565b9350608088013591508082111561284c57600080fd5b506128598882890161244d565b9150509295509295909350565b600080600080600060a0868803121561287e57600080fd5b8535612889816123f1565b94506020860135612899816123f1565b93506040860135925060608601359150608086013567ffffffffffffffff8111156128c357600080fd5b6128598882890161244d565b7f4f574c50726f746f636f6c3a2f2f456e676c69736841756374696f6e2f00000081526000825161290781601d8501602087016125e4565b91909101601d0192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000602082840312156129be57600080fd5b815180151581146120e457600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156129f6576129f66129ce565b500390565b60008219821115612a0e57612a0e6129ce565b500190565b6000816000190483118215151615612a2d57612a2d6129ce565b500290565b600082612a4f57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906123bc90830184612610565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612b0f57600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612b4e8160178501602088016125e4565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612b7f8160288401602088016125e4565b01602801949350505050565b813560028110612b9a57600080fd5b815460ff821691508160ff1982161783556020840135612bb9816123f1565b6001600160a81b03199190911690911760089190911b610100600160a81b03161781556040919091013560019190910155565b634e487b7160e01b600052603260045260246000fd5b600081612c1157612c116129ce565b506000190190565b60008251612c2b8184602087016125e4565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65647a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb2a264697066735822122019473696469c3a6c3ff372f9702bf9a17f7c2b6c89cd0b820c52932b75c9a76164736f6c63430008090033",
  "devdoc": {
    "details": "This contract is a standard English Auction smart contract that allows bidders to keep bidding until the highest bidder wins the asset. In an English Auction, the owner defines the starting price and bidders can make bids that are higher than the current price.* The auction duration is defined by the bids being made and if they are made within the resetTime. Theoretically, the auction can go on forever if higher bids continue to be made within the resetTime period.* Once the ending time is passed, the auction finishes and the NFT is transferred to the highest bidder.",
    "kind": "dev",
    "methods": {
      "bid(uint256)": {
        "details": "Allow a user to place a bid that must be higher than the highest bid",
        "params": {
          "amount": "to bid by the bidder"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getCurrentBid()": {
        "details": "Returns the current highest bid"
      },
      "getRemainingTime()": {
        "details": "Returns the remaining time in the auction"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "grantRouter(address)": {
        "details": "Grants ROUTER_ROLE to {a}",
        "params": {
          "to": "address to"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,(uint8,address,uint256),address,uint256,uint256,uint256,uint256,address,address)": {
        "details": "Create English Auction instance",
        "params": {
          "ERC20contractAddress": "address of ERC20 token accepted as payment",
          "_asset": "struct containing information of the asset to be listed",
          "_auctionDuration": "duration of auction (in seconds)",
          "_forwarder": "the address for the Trusted Forwarder for Open GSN integration",
          "_resetTime": "time at which the auction resets when a bid is made within this time frame (in seconds)",
          "_saleFee": "the percentage of the sale to be sent to the original owner as commission",
          "_saleFeeAddress": "the address to which the sale fee is sent",
          "_seller": "address of seller for auction",
          "_startPrice": "start bid on nft"
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Return trusted forwarder status."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "ownerClaim()": {
        "details": "Allows owner to claim bid. The seller must call to transfer the ERC20 to themselves"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "ERC165 Support",
        "params": {
          "interfaceId": "hash of the interface testing for"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "winnerClaim()": {
        "details": "Allows auction winner to claim the asset they won and transfers ownership"
      },
      "withdraw()": {
        "details": "Allows a user to withdraw their bid."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "grantRouter(address)": {
        "notice": "Must have owner role"
      },
      "isTrustedForwarder(address)": {
        "notice": "**REQUIRED FOR GSN**"
      },
      "withdraw()": {
        "notice": "Highest bidder cannot withdraw"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3091,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3094,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3073,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3370,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7537,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7941,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2110,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2105_storage)"
      },
      {
        "astId": 2409,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7252,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5007,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4953,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15231,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "asset",
        "offset": 0,
        "slot": "401",
        "type": "t_struct(Asset)14497_storage"
      },
      {
        "astId": 15233,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "acceptableToken",
        "offset": 0,
        "slot": "403",
        "type": "t_address"
      },
      {
        "astId": 15235,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "seller",
        "offset": 0,
        "slot": "404",
        "type": "t_address_payable"
      },
      {
        "astId": 15237,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "saleFeeAddress",
        "offset": 0,
        "slot": "405",
        "type": "t_address_payable"
      },
      {
        "astId": 15239,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "ownerClaimed",
        "offset": 20,
        "slot": "405",
        "type": "t_bool"
      },
      {
        "astId": 15241,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "winnerClaimed",
        "offset": 21,
        "slot": "405",
        "type": "t_bool"
      },
      {
        "astId": 15243,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "endAt",
        "offset": 0,
        "slot": "406",
        "type": "t_uint256"
      },
      {
        "astId": 15245,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "auctionDuration",
        "offset": 0,
        "slot": "407",
        "type": "t_uint256"
      },
      {
        "astId": 15247,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "startPrice",
        "offset": 0,
        "slot": "408",
        "type": "t_uint256"
      },
      {
        "astId": 15249,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "resetTime",
        "offset": 0,
        "slot": "409",
        "type": "t_uint256"
      },
      {
        "astId": 15251,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "saleFee",
        "offset": 0,
        "slot": "410",
        "type": "t_uint256"
      },
      {
        "astId": 15253,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "highestBidder",
        "offset": 0,
        "slot": "411",
        "type": "t_address"
      },
      {
        "astId": 15257,
        "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
        "label": "bids",
        "offset": 0,
        "slot": "412",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TokenType)14489": {
        "encoding": "inplace",
        "label": "enum AuctionLib.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2105_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2105_storage"
      },
      "t_struct(Asset)14497_storage": {
        "encoding": "inplace",
        "label": "struct AuctionLib.Asset",
        "members": [
          {
            "astId": 14492,
            "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TokenType)14489"
          },
          {
            "astId": 14494,
            "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
            "label": "contractAddr",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14496,
            "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)2105_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 2102,
            "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2104,
            "contract": "contracts/finance/EnglishAuction.sol:EnglishAuction",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}