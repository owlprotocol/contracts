{
  "address": "0x42e1Fb3EAbD05608CB2652CA5C90F4cbE4ce4B1F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "craftedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "craftableAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Craft",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum PluginsCore.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum PluginsCore.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct PluginsCore.Ingredient[]",
          "name": "inputs",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum PluginsCore.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum PluginsCore.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct PluginsCore.Ingredient[]",
          "name": "outputs",
          "type": "tuple[]"
        }
      ],
      "name": "Create",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "routeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "RouterError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "craftableAmount",
          "type": "uint256"
        }
      ],
      "name": "Update",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "uint256[][]",
          "name": "_inputERC721Ids",
          "type": "uint256[][]"
        }
      ],
      "name": "craft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "craftableAmount",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "uint256[][]",
          "name": "_outputsERC721Ids",
          "type": "uint256[][]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getInputIngredient",
      "outputs": [
        {
          "internalType": "enum PluginsCore.TokenType",
          "name": "token",
          "type": "uint8"
        },
        {
          "internalType": "enum PluginsCore.ConsumableType",
          "name": "consumableType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInputs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum PluginsCore.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum PluginsCore.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PluginsCore.Ingredient[]",
          "name": "_inputs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getOutputIngredient",
      "outputs": [
        {
          "internalType": "enum PluginsCore.TokenType",
          "name": "token",
          "type": "uint8"
        },
        {
          "internalType": "enum PluginsCore.ConsumableType",
          "name": "consumableType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOutputs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum PluginsCore.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum PluginsCore.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PluginsCore.Ingredient[]",
          "name": "_outputs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "grantRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_burnAddress",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_craftableAmount",
          "type": "uint96"
        },
        {
          "components": [
            {
              "internalType": "enum PluginsCore.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum PluginsCore.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PluginsCore.Ingredient[]",
          "name": "_inputs",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum PluginsCore.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum PluginsCore.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PluginsCore.Ingredient[]",
          "name": "_outputs",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_burnAddress",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_craftableAmount",
          "type": "uint96"
        },
        {
          "components": [
            {
              "internalType": "enum PluginsCore.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum PluginsCore.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PluginsCore.Ingredient[]",
          "name": "_inputs",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum PluginsCore.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum PluginsCore.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PluginsCore.Ingredient[]",
          "name": "_outputs",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "proxyInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b2afc8f4f83fa1d9e2c3600b996552dd8bccb6c8229337342d5c2bf1f3a6207",
  "receipt": {
    "to": null,
    "from": "0x6fd935c3BbbDf664b67e28B14236a66a7588D683",
    "contractAddress": "0x42e1Fb3EAbD05608CB2652CA5C90F4cbE4ce4B1F",
    "transactionIndex": 0,
    "gasUsed": "4563273",
    "logsBloom": "0x
    "blockHash": "0xbe7e65d1788cfe2a7c7ccd3bd9d306c97193bcf21eb1b95864242e845d1373ac",
    "transactionHash": "0x6b2afc8f4f83fa1d9e2c3600b996552dd8bccb6c8229337342d5c2bf1f3a6207",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20,
        "transactionHash": "0x6b2afc8f4f83fa1d9e2c3600b996552dd8bccb6c8229337342d5c2bf1f3a6207",
        "address": "0x42e1Fb3EAbD05608CB2652CA5C90F4cbE4ce4B1F",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xbe7e65d1788cfe2a7c7ccd3bd9d306c97193bcf21eb1b95864242e845d1373ac"
      }
    ],
    "blockNumber": 20,
    "cumulativeGasUsed": "4563273",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "28b4d2e2155903f56ed1fc988848ec0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"craftedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"craftableAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Craft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum PluginsCore.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum PluginsCore.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct PluginsCore.Ingredient[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum PluginsCore.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum PluginsCore.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct PluginsCore.Ingredient[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"routeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RouterError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"craftableAmount\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint256[][]\",\"name\":\"_inputERC721Ids\",\"type\":\"uint256[][]\"}],\"name\":\"craft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"craftableAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint256[][]\",\"name\":\"_outputsERC721Ids\",\"type\":\"uint256[][]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInputIngredient\",\"outputs\":[{\"internalType\":\"enum PluginsCore.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum PluginsCore.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInputs\",\"outputs\":[{\"components\":[{\"internalType\":\"enum PluginsCore.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum PluginsCore.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PluginsCore.Ingredient[]\",\"name\":\"_inputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOutputIngredient\",\"outputs\":[{\"internalType\":\"enum PluginsCore.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum PluginsCore.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOutputs\",\"outputs\":[{\"components\":[{\"internalType\":\"enum PluginsCore.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum PluginsCore.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PluginsCore.Ingredient[]\",\"name\":\"_outputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"grantRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_craftableAmount\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"enum PluginsCore.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum PluginsCore.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PluginsCore.Ingredient[]\",\"name\":\"_inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum PluginsCore.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum PluginsCore.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PluginsCore.Ingredient[]\",\"name\":\"_outputs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_craftableAmount\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"enum PluginsCore.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum PluginsCore.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PluginsCore.Ingredient[]\",\"name\":\"_inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum PluginsCore.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum PluginsCore.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PluginsCore.Ingredient[]\",\"name\":\"_outputs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"proxyInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that enables crafting of different types of assets (ERC20, ERC721, ERC1155) whose crafting outputs are minted to the caller. Crafting configuration is designated by two {Ingredient}[]. One array is the `inputs` and the other is the `outputs`. The contract allows for the `inputs` to be redeemed for the `outputs`, `craftableAmount` times. ``` struct Ingredient {     TokenType token;     ConsumableType consumableType;     address contractAddr;     uint256[] amounts;     uint256[] tokenIds; } ``` Configuration is set in the initializers and cannot be edited once the contract has been launched Other configurations will require their own contract to be deployed However, `craftableAmount` can be dynamically updated through the {deposit} and {withdraw} functions which are only accessible to `DEFAULT_ADMIN_ROLE` Each Ingredient has a `consumableType` field.* This field is for the `inputs` elements and ignored by the `outputs` elements. ERC20 and ERC1155 `inputs` elements can be `unaffected` or `burned`. `unaffected` will check for ownership/balance while `burned` will send the asset(s) to the `burnAddress`. ERC721 inputs can be `NTime` or `burned`. `NTime` allows for a specfic `tokenId` to only be used 'n times', as defined by contract deployer. ERC20 `inputs` and `outputs` elements should have one number in the `amounts` array denoting ERC20 token amount requirement.* `tokenIds` should be empty. NTime consumable type ERC721 inputs should have empty `tokenIds` and `amounts[0]` equal to `n` - the maximum number of times the input can be used.* Burned ERC721 `inputs` elements should have * empty `amounts` and `tokenIds` array. This contract accepts *all* `tokenId`s from an ERC721 contract as inputs. ERC721 `outputs` elements must have empty `amounts` array. `tokenIds` array length should be `craftableAmount`. The `tokenIds` array will contain the `tokenIds` to be transferred out when {craft} is called. Important to note that output transfers will be from the *end* of the array since `.pop()` is used. ERC1155 `inputs` and `outputs` elements should have the length of `amounts` and `tokenIds` array be the same. The indices will be linked where each index denotes how much of each ERC1155 `tokenId` is required. This module is used through composition. It can be deployed to create crafting logic with asset contracts that are already on chain and active; plug-and-play, so to speak.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"craft(uint96,uint256[][])\":{\"details\":\"Used to craft. Consumes inputs and mints outputs.\",\"params\":{\"_inputERC721Ids\":\"Array of pre-approved NFTs for crafting usage. Example of `_inputERC721Ids` with `amount = 2` with 3 `Ingredient`s in `inputs` with `TokenType.ERC721` ``` [  [1, 2]  [3, 4]  [5, 6] ] ```\",\"amount\":\"How many times to craft\"}},\"deposit(uint96,uint256[][])\":{\"details\":\"Used to deposit configuration outputs.\",\"params\":{\"_outputsERC721Ids\":\"2D-array of ERC721 tokens used in crafting Example of `_outputERC721Ids` with `amount = 2` with 3 `Ingredient`s in `outputs` with `TokenType.ERC721` ``` [  [1, 2]  [3, 4]  [5, 6] ] ```\",\"amount\":\"How many more times the configuration should be craftable\"}},\"getInputIngredient(uint256)\":{\"details\":\"Returns all details for a specific ingredient (including amounts/tokenIds)\",\"params\":{\"index\":\"ingredient index to return details for\"},\"returns\":{\"amounts\":\"amount of each token\",\"consumableType\":\"consumable type\",\"contractAddr\":\"token contract address\",\"token\":\"token type\",\"tokenIds\":\"token ids\"}},\"getInputs()\":{\"details\":\"Returns all inputs (without `amounts` or `tokenIds`)\"},\"getOutputIngredient(uint256)\":{\"details\":\"Returns all details for a specific ingredient (including amounts/tokenIds)\",\"params\":{\"index\":\"ingredient index to return details for\"},\"returns\":{\"amounts\":\"amount of each token\",\"consumableType\":\"consumable type\",\"contractAddr\":\"token contract address\",\"token\":\"token type\",\"tokenIds\":\"token ids\"}},\"getOutputs()\":{\"details\":\"Returns all outputs (without `amounts` or `tokenIds`)\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"grantRouter(address)\":{\"details\":\"Grants ROUTER_ROLE to {a}\",\"params\":{\"to\":\"address to\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint96,(uint8,uint8,address,uint256[],uint256[])[],(uint8,uint8,address,uint256[],uint256[])[],address)\":{\"details\":\"Initializes contract (replaces constructor in proxy pattern)\",\"params\":{\"_admin\":\"owner, can control outputs on contract\",\"_burnAddress\":\"Burn address for burn inputs\",\"_craftableAmount\":\"limit on the number of times this configuration can be crafted\",\"_forwarder\":\"trusted forwarder address for openGSN\",\"_inputs\":\"inputs for configuration\",\"_outputs\":\"outputs for configuration\"}},\"isTrustedForwarder(address)\":{\"details\":\"Return trusted forwarder status.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"proxyInitialize(address,address,uint96,(uint8,uint8,address,uint256[],uint256[])[],(uint8,uint8,address,uint256[],uint256[])[],address)\":{\"details\":\"Initializes contract through beacon proxy (replaces constructor in proxy pattern)\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"ERC165 Support\",\"params\":{\"interfaceId\":\"hash of the interface testing for\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint96)\":{\"details\":\"Used to withdraw configuration outputs out of contract by decreasing `craftableAmount`.\",\"params\":{\"amount\":\"How many sets of outputs should be withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"craft(uint96,uint256[][])\":{\"notice\":\"Craft `amount`\"},\"deposit(uint96,uint256[][])\":{\"notice\":\"Must be `DEFAULT_ADMIN_ROLE`.\"},\"grantRouter(address)\":{\"notice\":\"Must have owner role\"},\"isTrustedForwarder(address)\":{\"notice\":\"**REQUIRED FOR GSN**\"},\"withdraw(uint96)\":{\"notice\":\"Must be `DEFAULT_ADMIN_ROLE`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/plugins/Crafter/CrafterMint.sol\":\"CrafterMint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf5dc00c0e6a12685e1510ea48ff7aac7b7f1c54887477938b6fa4d58bca97277\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7dbff7171ac06a023a5ca52c2138ac711037b2146b9197a52e5de4f9183e04d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/OwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\n/**\\n * @dev Base for all OWLPROTOCOL contracts\\n */\\nabstract contract OwlBase is UUPSUpgradeable, AccessControlUpgradeable {\\n    bytes32 internal constant ROUTER_ROLE = keccak256('ROUTER_ROLE');\\n\\n    function __OwlBase_init(address _admin, address _forwarder) internal onlyInitializing {\\n        __OwlBase_init_unchained(_admin, _forwarder);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(ROUTER_ROLE, _forwarder);\\n    }\\n\\n    function __OwlBase_init_unchained(address _admin, address _forwarder) internal onlyInitializing {}\\n\\n    /**\\n     * @notice **REQUIRED FOR GSN**\\n     * @dev Return trusted forwarder status.\\n     */\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return hasRole(ROUTER_ROLE, forwarder);\\n    }\\n\\n    /**\\n     * @notice Must have owner role\\n     * @dev Grants ROUTER_ROLE to {a}\\n     * @param to address to\\n     */\\n    function grantRouter(address to) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(ROUTER_ROLE, to);\\n    }\\n\\n    /**\\n     * UUPS functions\\n     */\\n    function _authorizeUpgrade(address) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /**\\n     * @notice the following 3 functions are all required for OpenGSN integration\\n     */\\n    function _msgSender() internal view virtual override returns (address ret) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    function versionRecipient() external pure virtual returns (string memory) {\\n        return '2.2.6';\\n    }\\n}\\n\",\"keccak256\":\"0x180c31656eea629c79f34679ec30ed6e4330ad68d03d4eacdf836fe1b8f0f06f\",\"license\":\"MIT\"},\"contracts/assets/ERC1155/ERC1155Owl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol';\\n\\nimport '../../OwlBase.sol';\\n\\ncontract ERC1155Owl is OwlBase, ERC1155BurnableUpgradeable {\\n    bytes32 private constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n    bytes32 private constant URI_ROLE = keccak256('URI_ROLE');\\n    string private contractURI_;\\n\\n    string public constant version = 'v0.1';\\n    bytes4 private constant ERC165TAG = bytes4(keccak256(abi.encodePacked('OWLProtocol://ERC1155Owl/', version)));\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _admin,\\n        string calldata uri_,\\n        string calldata newContractURI,\\n        address _forwarder\\n    ) external initializer {\\n        __ERC1155Owl_init(_admin, uri_, newContractURI, _forwarder);\\n    }\\n\\n    function proxyInitialize(\\n        address _admin,\\n        string calldata uri_,\\n        string calldata newContractURI,\\n        address _forwarder\\n    ) external onlyInitializing {\\n        __ERC1155Owl_init(_admin, uri_, newContractURI, _forwarder);\\n    }\\n\\n    function __ERC1155Owl_init(\\n        address _admin,\\n        string memory uri_,\\n        string calldata newContractURI,\\n        address _forwarder\\n    ) internal onlyInitializing {\\n        __ERC1155_init(uri_);\\n        __OwlBase_init(_admin, _forwarder);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(MINTER_ROLE, _admin);\\n        _grantRole(URI_ROLE, _admin);\\n\\n        __ERC1155Owl_init_unchained(newContractURI);\\n    }\\n\\n    function __ERC1155Owl_init_unchained(string calldata newContractURI) internal onlyInitializing {\\n        contractURI_ = newContractURI;\\n    }\\n\\n    /**\\n     * @notice Must have DEFAULT_ADMIN_ROLE\\n     * @dev Grants MINTER_ROLE to {a}\\n     * @param to address to\\n     */\\n    function grantMinter(address to) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(MINTER_ROLE, to);\\n    }\\n\\n    /**\\n     * @notice Must have DEFAULT_ADMIN_ROLE\\n     * @dev Grants URI_ROLE to {a}\\n     * @param to address to\\n     */\\n    function grantUriRole(address to) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(URI_ROLE, to);\\n    }\\n\\n    /***** MINTING *****/\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows MINTER_ROLE to mint NFTs\\n     * @param to address to\\n     * @param id tokenId value\\n     * @param amount to mint\\n     * @param data for hooks\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public onlyRole(MINTER_ROLE) {\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows caller to mint NFTs (safeMint)\\n     * @param to address to\\n     * @param ids id values\\n     * @param amounts to mint\\n     * @param data for hooks\\n     */\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public onlyRole(MINTER_ROLE) {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice Must have URI_ROLE role!\\n     * @dev Allows setting the uri\\n     * @param newuri set the baseURI value.\\n     */\\n    function setURI(string calldata newuri) public onlyRole(URI_ROLE) {\\n        _setURI(newuri);\\n    }\\n\\n    /**\\n     * @notice Must have URI_ROLE role!\\n     * @dev Allows setting the contract uri\\n     * @param newContractURI set the contractURI_ value.\\n     */\\n    function setContractURI(string calldata newContractURI) public onlyRole(URI_ROLE) {\\n        contractURI_ = newContractURI;\\n    }\\n\\n    /**\\n     * @dev Defines collection-wide metadata that is URI-accessible\\n     *\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return contractURI_;\\n    }\\n\\n    /**\\n     * @notice the following 3 functions are all required for OpenGSN integration\\n     */\\n    function _msgSender() internal view override(OwlBase, ContextUpgradeable) returns (address) {\\n        return OwlBase._msgSender();\\n    }\\n\\n    function _msgData() internal view override(OwlBase, ContextUpgradeable) returns (bytes calldata) {\\n        return OwlBase._msgData();\\n    }\\n\\n    /* @dev ERC165 Support\\n     * @param interfaceId hash of the interface testing for\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == ERC165TAG || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xa0dbcb78e008d22c629470b5181ea15909ad30f527da61b8d9abec98efe0174d\",\"license\":\"MIT\"},\"contracts/assets/ERC20/ERC20Owl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol';\\n\\nimport '../../OwlBase.sol';\\n\\ncontract ERC20Owl is OwlBase, ERC20BurnableUpgradeable {\\n    bytes32 private constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n    bytes32 private constant URI_ROLE = keccak256('URI_ROLE');\\n\\n    string public constant version = 'v0.1';\\n    bytes4 private constant ERC165TAG = bytes4(keccak256(abi.encodePacked('OWLProtocol://ERC20Owl/', version)));\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _admin,\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _forwarder\\n    ) external initializer {\\n        __ERC20Owl_init(_admin, _name, _symbol, _forwarder);\\n    }\\n\\n    function proxyInitialize(\\n        address _admin,\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _forwarder\\n    ) external onlyInitializing {\\n        __ERC20Owl_init(_admin, _name, _symbol, _forwarder);\\n    }\\n\\n    function __ERC20Owl_init(\\n        address _admin,\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _forwarder\\n    ) internal onlyInitializing {\\n        __ERC20_init(_name, _symbol);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(MINTER_ROLE, _admin);\\n\\n        __ERC20Owl_init_unchained(_admin, _forwarder);\\n    }\\n\\n    function __ERC20Owl_init_unchained(address _admin, address _forwarder) internal onlyInitializing {}\\n\\n    /**\\n     * @notice Must have DEFAULT_ADMIN_ROLE\\n     * @dev Grants MINTER_ROLE to {a}\\n     * @param to address to\\n     */\\n    function grantMinter(address to) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(MINTER_ROLE, to);\\n    }\\n\\n    /***** MINTING *****/\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows MINTER_ROLE to mint NFTs\\n     * @param to address to\\n     * @param amount amount to mint\\n     */\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n\\n    function _msgSender() internal view override(OwlBase, ContextUpgradeable) returns (address) {\\n        return OwlBase._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(OwlBase, ContextUpgradeable) returns (bytes calldata) {\\n        return OwlBase._msgData();\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId hash of the interface testing for\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == ERC165TAG || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc3b1fd6a6adeb88b85e64e2e9e7c80cdcd85de7f82499f177097ba602a782854\",\"license\":\"MIT\"},\"contracts/assets/ERC721/ERC721Owl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol';\\n\\nimport '../../OwlBase.sol';\\n\\n/**\\n * @dev This implements the standard OwlProtocol `ERC721` contract that is an\\n * extension of Openzeppelin's `ERC721BurnableUpgradeable`. Initializations\\n * happens through initializers for compatibility with a EIP1167 minimal-proxy\\n * deployment strategy.\\n */\\ncontract ERC721Owl is OwlBase, ERC721BurnableUpgradeable {\\n    bytes32 internal constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n    bytes32 internal constant URI_ROLE = keccak256('URI_ROLE');\\n\\n    string public constant VERSION = 'v0.1';\\n    bytes4 private constant ERC165TAG = bytes4(keccak256(abi.encodePacked('OWLProtocol://ERC721Owl/', VERSION)));\\n\\n    /**********************\\n           Storage\\n    **********************/\\n\\n    string public baseURI;\\n\\n    /**********************\\n        Initialization\\n    **********************/\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initializes an ERC721Owl contract\\n     * @param _admin admin for contract\\n     * @param _name name for contract\\n     * @param _symbol symbol for contract\\n     * @param baseURI_ base URI for contract\\n     * @param _forwarder address for trusted forwarder for open GSN\\n     */\\n    function initialize(\\n        address _admin,\\n        string calldata _name,\\n        string calldata _symbol,\\n        string calldata baseURI_,\\n        address _forwarder\\n    ) external virtual initializer {\\n        __ERC721Owl_init(_admin, _name, _symbol, baseURI_, _forwarder);\\n    }\\n\\n    /**\\n     * @dev Initializes contract through beacon proxy (replaces constructor in\\n     * proxy pattern)\\n     */\\n    function proxyInitialize(\\n        address _admin,\\n        string calldata _name,\\n        string calldata _symbol,\\n        string calldata baseURI_,\\n        address _forwarder\\n    ) external virtual onlyInitializing {\\n        __ERC721Owl_init(_admin, _name, _symbol, baseURI_, _forwarder);\\n    }\\n\\n    function __ERC721Owl_init(\\n        address _admin,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory baseURI_,\\n        address _forwarder\\n    ) internal onlyInitializing {\\n        __ERC721_init(_name, _symbol);\\n        __OwlBase_init(_admin, _forwarder);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(MINTER_ROLE, _admin);\\n        _grantRole(URI_ROLE, _admin);\\n\\n        __ERC721Owl_init_unchained(baseURI_);\\n    }\\n\\n    function __ERC721Owl_init_unchained(string memory baseURI_) internal onlyInitializing {\\n        (_msgData());\\n        baseURI = baseURI_;\\n    }\\n\\n    /**********************\\n          Interaction\\n    **********************/\\n\\n    /**\\n     * @notice Must have DEFAULT_ADMIN_ROLE\\n     * @dev Grants MINTER_ROLE to `to`\\n     * @param to address tos\\n     */\\n    function grantMinter(address to) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(MINTER_ROLE, to);\\n    }\\n\\n    /**\\n     * @notice Must have DEFAULT_ADMIN_ROLE\\n     * @dev Grants URI_ROLE to `a`\\n     * @param to address to\\n     */\\n    function grantUriRole(address to) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(URI_ROLE, to);\\n    }\\n\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows MINTER_ROLE to mint NFTs\\n     * @param to address to\\n     * @param tokenId tokenId value\\n     */\\n    function mint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\\n        _mint(to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows caller to mint NFTs (safeMint)\\n     * @param to address to\\n     * @param tokenId tokenId value\\n     */\\n    function safeMint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Must have URI_ROLE role!\\n     * @dev Allows setting the baseURI\\n     * @param baseURI_ set the baseURI value.\\n     */\\n    function setBaseURI(string calldata baseURI_) public onlyRole(URI_ROLE) {\\n        baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Overrides OZ internal baseURI getter.\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev Returns collection-wide URI-accessible metadata\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return string(abi.encodePacked(baseURI, 'metadata.json'));\\n    }\\n\\n    /**\\n     * @dev exposing `_exists`\\n     */\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /**\\n     * @dev use {OwlBase._msgSender()}\\n     */\\n    function _msgSender() internal view override(OwlBase, ContextUpgradeable) returns (address) {\\n        return OwlBase._msgSender();\\n    }\\n\\n    /**\\n     * @dev use {OwlBase._msgData()}\\n     */\\n    function _msgData() internal view override(OwlBase, ContextUpgradeable) returns (bytes calldata) {\\n        return OwlBase._msgData();\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId hash of the interface testing for\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == ERC165TAG || super.supportsInterface(interfaceId);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe88aac20e871e55d579cbed339d3e08386446c78468ebcbe4a3c3d3dea8c0e5f\",\"license\":\"MIT\"},\"contracts/plugins/Crafter/CrafterCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../../assets/ERC20/ERC20Owl.sol';\\nimport '../../assets/ERC721/ERC721Owl.sol';\\nimport '../../assets/ERC1155/ERC1155Owl.sol';\\nimport '../PluginsCore.sol';\\nimport './ICrafter.sol';\\n\\n/**\\n * @dev Base contract that all Crafter contracts will inherit from\\n */\\nabstract contract CrafterCore is PluginsCore, ICrafter, ERC721HolderUpgradeable {\\n    /**********************\\n             Events\\n    **********************/\\n\\n    event Create(address indexed creator, Ingredient[] inputs, Ingredient[] outputs);\\n\\n    event Update(uint256 craftableAmount);\\n\\n    event Craft(uint256 craftedAmount, uint256 craftableAmount, address indexed user);\\n\\n    /**********************\\n             Storage\\n    **********************/\\n\\n    // Address which burned items are sent to\\n    address public burnAddress;\\n\\n    // Sets of crafts left\\n    uint96 public craftableAmount;\\n\\n    // Array of inputs in this configurations\\n    Ingredient[] private inputs;\\n\\n    // Array of outputs in this configurations\\n    Ingredient[] internal outputs;\\n\\n    /**********************\\n        Initialization\\n    **********************/\\n\\n    /**\\n     * @dev performs validations that `_inputs` and `_outputs` are valid and\\n     * creates the configuration\\n     */\\n    function __CrafterCore_init(\\n        address _admin,\\n        address _burnAddress,\\n        Ingredient[] calldata _inputs,\\n        Ingredient[] calldata _outputs,\\n        address _forwarder\\n    ) internal onlyInitializing {\\n        require(_burnAddress != address(0), 'CrafterCore: burn address must not be 0');\\n        require(_inputs.length > 0, 'CrafterCore: A crafting input must be given!');\\n        require(_outputs.length > 0, 'CrafterCore: A crafting output must be given!');\\n        __OwlBase_init(_admin, _forwarder);\\n\\n        __CrafterCore_init_unchained(_burnAddress, _inputs, _outputs);\\n    }\\n\\n    /**\\n     * @dev performs validations that `_inputs` and `_outputs` are valid and\\n     * creates the configuration\\n     */\\n    function __CrafterCore_init_unchained(\\n        address _burnAddress,\\n        Ingredient[] calldata _inputs,\\n        Ingredient[] calldata _outputs\\n    ) internal onlyInitializing {\\n        burnAddress = _burnAddress;\\n\\n        // Inputs validated in __CrafterCore_init() since it is\\n        // the same process for both CrafterTransfer and CrafterMint\\n        _validateInputs(_inputs);\\n\\n        // emit Create(_msgSender(), _inputs, _outputs);\\n    }\\n\\n    /**********************\\n            Getters\\n    **********************/\\n\\n    /**\\n     * @dev Returns all inputs (without `amounts` or `tokenIds`)\\n     */\\n    function getInputs() public view returns (Ingredient[] memory _inputs) {\\n        return inputs;\\n    }\\n\\n    /**\\n     * @dev Returns all outputs (without `amounts` or `tokenIds`)\\n     */\\n    function getOutputs() public view returns (Ingredient[] memory _outputs) {\\n        return outputs;\\n    }\\n\\n    /**\\n     * @dev Returns all details for a specific ingredient (including\\n     * amounts/tokenIds)\\n     * @param index ingredient index to return details for\\n     * @return token token type\\n     * @return consumableType consumable type\\n     * @return contractAddr token contract address\\n     * @return amounts amount of each token\\n     * @return tokenIds token ids\\n     */\\n    function getInputIngredient(uint256 index)\\n        public\\n        view\\n        returns (\\n            TokenType token,\\n            ConsumableType consumableType,\\n            address contractAddr,\\n            uint256[] memory amounts,\\n            uint256[] memory tokenIds\\n        )\\n    {\\n        Ingredient storage i = inputs[index];\\n\\n        return (i.token, i.consumableType, i.contractAddr, i.amounts, i.tokenIds);\\n    }\\n\\n    /**\\n     * @dev Returns all details for a specific ingredient (including\\n     * amounts/tokenIds)\\n     * @param index ingredient index to return details for\\n     * @return token token type\\n     * @return consumableType consumable type\\n     * @return contractAddr token contract address\\n     * @return amounts amount of each token\\n     * @return tokenIds token ids\\n     */\\n    function getOutputIngredient(uint256 index)\\n        public\\n        view\\n        returns (\\n            TokenType token,\\n            ConsumableType consumableType,\\n            address contractAddr,\\n            uint256[] memory amounts,\\n            uint256[] memory tokenIds\\n        )\\n    {\\n        Ingredient storage i = outputs[index];\\n\\n        return (i.token, i.consumableType, i.contractAddr, i.amounts, i.tokenIds);\\n    }\\n\\n    /**********************\\n           Utilities\\n    **********************/\\n\\n    /**\\n     * @dev calls PluginsCore._validateInputs(_inputs, inputs)\\n     */\\n    function _validateInputs(Ingredient[] calldata _inputs) internal {\\n        super._validateInputs(_inputs, inputs);\\n    }\\n\\n    /**\\n     * @dev call PluginsCore._useInputs(inputs, from, burnAddress,\\n     * _inputERC721Ids, amount)\\n     */\\n    function _useInputs(uint256[][] calldata _inputERC721Ids, uint256 amount) internal {\\n        super._useInputs(inputs, _msgSender(), burnAddress, _inputERC721Ids, amount);\\n    }\\n\\n    /**\\n     * @dev validates outputs array of ingredients\\n     * @param _outputs the output array of the Crafter initializer\\n     * @param _craftableAmount the amount of times the recipe may be crafted\\n     */\\n    function _validateOutputs(PluginsCore.Ingredient[] memory _outputs, uint256 _craftableAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 erc721Amount = 0;\\n        for (uint256 i = 0; i < _outputs.length; i++) {\\n            if (_outputs[i].token == PluginsCore.TokenType.erc20) {\\n                require(_outputs[i].tokenIds.length == 0, 'CrafterCore: tokenids.length != 0');\\n                require(_outputs[i].amounts.length == 1, 'CrafterCore: amounts.length != 1');\\n                outputs.push(_outputs[i]);\\n            } else if (_outputs[i].token == PluginsCore.TokenType.erc721) {\\n                require(\\n                    _outputs[i].tokenIds.length == _craftableAmount,\\n                    'CrafterCore: tokenids.length != _craftableAmount'\\n                );\\n                require(_outputs[i].amounts.length == 0, 'CrafterCore: amounts.length != 0');\\n                erc721Amount++;\\n\\n                // Copy token data but set tokenIds as empty (these are filled\\n                // out in the _deposit function call)\\n                PluginsCore.Ingredient memory x = PluginsCore.Ingredient({\\n                    token: PluginsCore.TokenType.erc721,\\n                    consumableType: _outputs[i].consumableType,\\n                    contractAddr: _outputs[i].contractAddr,\\n                    amounts: new uint256[](0),\\n                    tokenIds: new uint256[](0)\\n                });\\n                outputs.push(x);\\n            } else {\\n                // Solidity compiler ensures this is TokenType 1155\\n                require(\\n                    _outputs[i].tokenIds.length == _outputs[i].amounts.length,\\n                    'CrafterCore: tokenids.length != amounts.length'\\n                );\\n                outputs.push(_outputs[i]);\\n            }\\n        }\\n\\n        return erc721Amount;\\n    }\\n\\n    /**\\n     * @dev Creating a static 2d array\\n     * @param _outputs the output array of the Crafter initializer\\n     * @param _craftableAmount the amount of times the recipe may be crafted\\n     * @param erc721Amount the number of erc721 tokens to be used as output\\n     */\\n    function _createOutputsArr(\\n        PluginsCore.Ingredient[] memory _outputs,\\n        uint256 _craftableAmount,\\n        uint256 erc721Amount\\n    ) internal pure returns (uint256[][] memory) {\\n        uint256[][] memory _outputsERC721Ids = new uint256[][](erc721Amount);\\n        uint256 outputERC721index = 0;\\n\\n        for (uint256 i = 0; i < _outputs.length; i++) {\\n            if (_outputs[i].token == PluginsCore.TokenType.erc721) {\\n                _outputsERC721Ids[outputERC721index] = new uint256[](_craftableAmount);\\n                for (uint256 j = 0; j < _craftableAmount; j++) {\\n                    _outputsERC721Ids[outputERC721index][j] = _outputs[i].tokenIds[j];\\n                }\\n                outputERC721index++;\\n            }\\n        }\\n\\n        return _outputsERC721Ids;\\n    }\\n\\n    /**\\n     * @dev function must be overriden by child contract. Adding\\n     * process is too different between the contract for\\n     * abstraction\\n     * @param amount sets of outputs to deposit\\n     * @param _outputsERC721Ids erc721 `tokenId`s to use as outputs\\n     * @param from if transferring, address to transfer outputs from\\n     */\\n    function _addOutputs(\\n        uint256 amount,\\n        uint256[][] memory _outputsERC721Ids,\\n        address from\\n    ) internal virtual;\\n\\n    /**\\n     * @dev function must be overriden by child contract. Removal\\n     * process is too different between the contracts for\\n     * abstraction\\n     * @param amount sets of outputs to remove\\n     * @param to address to send outputs to\\n     */\\n    function _removeOutputs(uint96 amount, address to) internal virtual;\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56cb477d9bdc113d2a2143d165aadee30a31c1fd4e93166ca7bc3bfbbec6a23c\",\"license\":\"MIT\"},\"contracts/plugins/Crafter/CrafterMint.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './CrafterCore.sol';\\n\\n/**\\n * @dev Contract module that enables crafting of different types of assets\\n * (ERC20, ERC721, ERC1155) whose crafting outputs are minted to the caller.\\n *\\n * Crafting configuration is designated by two {Ingredient}[]. One array is the\\n * `inputs` and the other is the `outputs`. The contract allows for the `inputs`\\n * to be redeemed for the `outputs`, `craftableAmount` times.\\n *\\n * ```\\n * struct Ingredient {\\n *     TokenType token;\\n *     ConsumableType consumableType;\\n *     address contractAddr;\\n *     uint256[] amounts;\\n *     uint256[] tokenIds;\\n * }\\n * ```\\n *\\n * Configuration is set in the initializers and cannot be edited once the\\n * contract has been launched Other configurations will require their own\\n * contract to be deployed\\n *\\n * However, `craftableAmount` can be dynamically updated through the {deposit}\\n * and {withdraw} functions which are only accessible to `DEFAULT_ADMIN_ROLE`\\n *\\n * Each Ingredient has a `consumableType` field.* This field is for the `inputs`\\n * elements and ignored by the `outputs` elements. ERC20 and ERC1155 `inputs`\\n * elements can be `unaffected` or `burned`. `unaffected` will check for\\n * ownership/balance while `burned` will send the asset(s) to the `burnAddress`.\\n * ERC721 inputs can be `NTime` or `burned`. `NTime` allows for a specfic\\n * `tokenId` to only be used 'n times', as defined by contract deployer.\\n *\\n * ERC20 `inputs` and `outputs` elements should have one number in the `amounts`\\n * array denoting ERC20 token amount requirement.* `tokenIds` should be empty.\\n *\\n * NTime consumable type ERC721 inputs should have empty `tokenIds` and\\n * `amounts[0]` equal to `n` - the maximum number of times the input can be\\n * used.* Burned ERC721 `inputs` elements should have * empty `amounts` and\\n * `tokenIds` array. This contract accepts *all* `tokenId`s from an ERC721\\n * contract as inputs. ERC721 `outputs` elements must have empty `amounts`\\n * array. `tokenIds` array length should be `craftableAmount`. The `tokenIds`\\n * array will contain the `tokenIds` to be transferred out when {craft} is\\n * called. Important to note that output transfers will be from the *end* of the\\n * array since `.pop()` is used.\\n *\\n * ERC1155 `inputs` and `outputs` elements should have the length of `amounts`\\n * and `tokenIds` array be the same. The indices will be linked where each index\\n * denotes how much of each ERC1155 `tokenId` is required.\\n *\\n * This module is used through composition. It can be deployed to create\\n * crafting logic with asset contracts that are already on chain and active;\\n * plug-and-play, so to speak.\\n */\\ncontract CrafterMint is CrafterCore, ERC1155HolderUpgradeable {\\n    string public constant VERSION = 'v0.1';\\n    bytes4 private constant ERC165TAG = bytes4(keccak256(abi.encodePacked('OWLProtocol://CrafterMint/', VERSION)));\\n\\n    /**********************\\n        Initialization\\n    **********************/\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initializes contract (replaces constructor in proxy pattern)\\n     * @param _admin owner, can control outputs on contract\\n     * @param _burnAddress Burn address for burn inputs\\n     * @param _craftableAmount limit on the number of times this configuration\\n     * can be crafted\\n     * @param _inputs inputs for configuration\\n     * @param _outputs outputs for configuration\\n     * @param _forwarder trusted forwarder address for openGSN\\n     */\\n    function initialize(\\n        address _admin,\\n        address _burnAddress,\\n        uint96 _craftableAmount,\\n        Ingredient[] calldata _inputs,\\n        Ingredient[] calldata _outputs,\\n        address _forwarder\\n    ) external initializer {\\n        __CrafterMint_init(_admin, _burnAddress, _craftableAmount, _inputs, _outputs, _forwarder);\\n    }\\n\\n    /**\\n     * @dev Initializes contract through beacon proxy (replaces constructor in\\n     * proxy pattern)\\n     */\\n    function proxyInitialize(\\n        address _admin,\\n        address _burnAddress,\\n        uint96 _craftableAmount,\\n        Ingredient[] calldata _inputs,\\n        Ingredient[] calldata _outputs,\\n        address _forwarder\\n    ) external onlyInitializing {\\n        __CrafterMint_init(_admin, _burnAddress, _craftableAmount, _inputs, _outputs, _forwarder);\\n    }\\n\\n    /**\\n     * @dev performs validations that `_inputs` and `_outputs` are valid and\\n     * creates the configuration\\n     */\\n    function __CrafterMint_init(\\n        address _admin,\\n        address _burnAddress,\\n        uint96 _craftableAmount,\\n        Ingredient[] calldata _inputs,\\n        Ingredient[] calldata _outputs,\\n        address _forwarder\\n    ) internal onlyInitializing {\\n        __CrafterCore_init(_admin, _burnAddress, _inputs, _outputs, _forwarder);\\n\\n        __CrafterMint_init_unchained(_craftableAmount, _outputs);\\n    }\\n\\n    /**\\n     * @dev performs validations that `_inputs` and `_outputs` are valid and\\n     * creates the configuration\\n     */\\n    function __CrafterMint_init_unchained(uint96 _craftableAmount, Ingredient[] calldata _outputs)\\n        internal\\n        onlyInitializing\\n    {\\n        uint256 erc721Amount = _validateOutputs(_outputs, _craftableAmount);\\n\\n        uint256[][] memory _outputsERC721Ids = _createOutputsArr(_outputs, _craftableAmount, erc721Amount);\\n        if (_craftableAmount > 0) _deposit(_craftableAmount, _outputsERC721Ids);\\n    }\\n\\n    /**********************\\n         Interaction\\n    **********************/\\n\\n    /**\\n     * @notice Must be `DEFAULT_ADMIN_ROLE`.\\n     * @dev Used to deposit configuration outputs.\\n     * @param amount How many more times the configuration should be\\n     * craftable\\n     * @param _outputsERC721Ids 2D-array of ERC721 tokens used in crafting\\n     * Example of `_outputERC721Ids` with `amount = 2` with 3\\n     * `Ingredient`s\\n     * in `outputs` with `TokenType.ERC721`\\n     * ```\\n     * [\\n     *  [1, 2]\\n     *  [3, 4]\\n     *  [5, 6]\\n     * ]\\n     * ```\\n     */\\n    function deposit(uint96 amount, uint256[][] calldata _outputsERC721Ids) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _deposit(amount, _outputsERC721Ids);\\n    }\\n\\n    /**\\n     * @notice Must be `DEFAULT_ADMIN_ROLE`\\n     * @dev Used to deposit configuration outputs. This is only ever directly\\n     * called in intializations.\\n     * @param amount How many times the configuration should be craftable\\n     * @param _outputsERC721Ids 2D-array of ERC721 tokens used in crafting\\n     */\\n    function _deposit(uint96 amount, uint256[][] memory _outputsERC721Ids) internal {\\n        require(amount > 0, 'CrafterMint: amount cannot be 0!');\\n        craftableAmount += amount;\\n\\n        // address `from` parameter irrelevant in CrafterMint... passing\\n        // 0 address will suffice\\n        _addOutputs(amount, _outputsERC721Ids, address(0));\\n\\n        emit Update(craftableAmount);\\n    }\\n\\n    /**\\n     * @notice Must be `DEFAULT_ADMIN_ROLE`\\n     * @dev Used to withdraw configuration outputs out of contract by decreasing\\n     * `craftableAmount`.\\n     * @param amount How many sets of outputs should be withdrawn\\n     */\\n    function withdraw(uint96 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        // This will remove a `amount` of outputs and ERC721 `tokenId`\\n        // without doing any minting\\n        _removeOutputs(amount, address(0));\\n\\n        emit Update(craftableAmount);\\n    }\\n\\n    /**\\n     * @notice Craft `amount`\\n     * @dev Used to craft. Consumes inputs and mints outputs.\\n     * @param amount How many times to craft\\n     * @param _inputERC721Ids Array of pre-approved NFTs for crafting usage.\\n     * Example of `_inputERC721Ids` with `amount = 2` with 3 `Ingredient`s\\n     * in `inputs` with `TokenType.ERC721`\\n     * ```\\n     * [\\n     *  [1, 2]\\n     *  [3, 4]\\n     *  [5, 6]\\n     * ]\\n     * ```\\n     */\\n    function craft(uint96 amount, uint256[][] calldata _inputERC721Ids) external {\\n        // This will remove a `amount` of outputs and ERC721 `tokenId`\\n        // while also minting to the _msgSender()\\n        _removeOutputs(amount, _msgSender());\\n\\n        _useInputs(_inputERC721Ids, amount);\\n\\n        emit Craft(amount, craftableAmount, _msgSender());\\n    }\\n\\n    /**\\n     * @dev adds outputs to the contract balances\\n     * @param amount sets of outputs to add\\n     * @param _outputsERC721Ids if there are ERC721 tokens present, supply their\\n     * `tokenId`s\\n     * Example of `_outputERC721Ids` with `amount = 2` with 3 `Ingredient`s\\n     * in `outputs` with `TokenType.ERC721`\\n     * ```\\n     * [\\n     *  [1, 2]\\n     *  [3, 4]\\n     *  [5, 6]\\n     * ]\\n     * ```\\n     */\\n    function _addOutputs(\\n        uint256 amount,\\n        uint256[][] memory _outputsERC721Ids,\\n        address /* from */\\n    ) internal override {\\n        // Keep count of the amount of erc721Outputs so if there\\n        // are multiple `tokenId`s in `_outputsERC721Ids`, next\\n        // element in the array is only used when iteration is\\n        // at next ERC721\\n        uint256 erc721Outputs = 0;\\n\\n        // Go through all `PluginsCore.Ingredient`s in `outputs` and\\n        // find ERC721 outputs. Then update `tokenId`s in ERC721 `Ingredient`s\\n        //  inside the `outputs` array. ERC20 and ERC1155 changes do\\n        //  not need to be made as their balances are only dependent on the\\n        // `craftableAmount` variable\\n        for (uint256 i = 0; i < outputs.length; i++) {\\n            PluginsCore.Ingredient storage ingredient = outputs[i];\\n            if (ingredient.token == PluginsCore.TokenType.erc721) {\\n                require(\\n                    _outputsERC721Ids[erc721Outputs].length == amount,\\n                    'CrafterMint: _outputsERC721Ids[i] != amount'\\n                );\\n                for (uint256 j = 0; j < _outputsERC721Ids[erc721Outputs].length; j++) {\\n                    require(\\n                        !ERC721Owl(ingredient.contractAddr).exists(_outputsERC721Ids[erc721Outputs][j]),\\n                        'CrafterMint: tokenId already minted'\\n                    );\\n\\n                    //Update ingredient `tokenIds`, push additional ERC721 tokenId\\n                    ingredient.tokenIds.push(_outputsERC721Ids[erc721Outputs][j]);\\n                }\\n                erc721Outputs += 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev removes outputs from the contract balances. If to != address(0),\\n     * then assets are also minted to that address\\n     * @param amount sets of outputs to remove\\n     * @param to address to send outputs to, if applicable\\n     */\\n    function _removeOutputs(uint96 amount, address to) internal override {\\n        require(amount > 0, 'CrafterMint: amount cannot be 0!');\\n        require(amount <= craftableAmount, 'CrafterMint: Not enough resources to craft!');\\n\\n        craftableAmount -= amount;\\n\\n        for (uint256 i = 0; i < outputs.length; i++) {\\n            PluginsCore.Ingredient storage ingredient = outputs[i];\\n            if (ingredient.token == PluginsCore.TokenType.erc20 && to != address(0))\\n                ERC20Owl(ingredient.contractAddr).mint(_msgSender(), ingredient.amounts[0] * amount);\\n            else if (ingredient.token == PluginsCore.TokenType.erc721) {\\n                for (uint256 j = 0; j < amount; j++) {\\n                    if (to != address(0))\\n                        ERC721Owl(ingredient.contractAddr).mint(\\n                            _msgSender(),\\n                            ingredient.tokenIds[ingredient.tokenIds.length - 1]\\n                        );\\n\\n                    // Pop `tokenId`s from the back\\n                    ingredient.tokenIds.pop();\\n                }\\n            } else if (ingredient.token == PluginsCore.TokenType.erc1155 && to != address(0)) {\\n                uint256[] memory amounts = new uint256[](ingredient.amounts.length);\\n                for (uint256 j = 0; j < ingredient.amounts.length; j++) {\\n                    amounts[j] = ingredient.amounts[j] * amount;\\n                }\\n\\n                ERC1155Owl(ingredient.contractAddr).mintBatch(_msgSender(), ingredient.tokenIds, amounts, new bytes(0));\\n            }\\n        }\\n    }\\n\\n    /**********************\\n            ERC165\\n    **********************/\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId hash of the interface testing for\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ERC1155ReceiverUpgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == ERC165TAG || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x103b0b8cac1a330714ca9b986e9deebfad713a86288d40386c7960c4e95d6c27\",\"license\":\"MIT\"},\"contracts/plugins/Crafter/ICrafter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../PluginsCore.sol';\\n\\n/**\\n * @dev Crafting contracts interface\\n */\\ninterface ICrafter {\\n    /**\\n     * @dev Initializes contract (replaces constructor in proxy pattern)\\n     * @param _admin owner, can control outputs on contract\\n     * @param _burnAddress Burn address for burn inputs\\n     * @param _craftableAmount limit on the number of times this configuration\\n     * can be crafted\\n     * @param _inputs inputs for configuration\\n     * @param _outputs outputs for configuration\\n     * @param _forwarder trusted forwarder address for openGSN\\n     */\\n    function initialize(\\n        address _admin,\\n        address _burnAddress,\\n        uint96 _craftableAmount,\\n        PluginsCore.Ingredient[] calldata _inputs,\\n        PluginsCore.Ingredient[] calldata _outputs,\\n        address _forwarder\\n    ) external;\\n\\n    /**\\n     * @notice Must be `DEFAULT_ADMIN_ROLE`. Automatically sends from\\n     * `_msgSender()`\\n     * @dev Used to deposit configuration outputs.\\n     * @param amount How many more times the configuration should be\\n     * craftable\\n     * @param _outputsERC721Ids 2D-array of ERC721 tokens used in crafting\\n     * Example of `_outputERC721Ids` with `amount = 2` with 3\\n     * `Ingredient`s\\n     * in `outputs` with `TokenType.ERC721`\\n     * ```\\n     * [\\n     *  [1, 2]\\n     *  [3, 4]\\n     *  [5, 6]\\n     * ]\\n     * ```\\n     */\\n    function deposit(uint96 amount, uint256[][] calldata _outputsERC721Ids) external;\\n\\n    /**\\n     * @notice Must be `DEFAULT_ADMIN_ROLE`\\n     * @dev Used to withdraw configuration outputs out of contract to the\\n     * caller. Will also decrease `craftableAmount`\\n     * @param amount How many sets of outputs should be withdrawn\\n     */\\n    function withdraw(uint96 amount) external;\\n\\n    /**\\n     * @notice Craft `amount`\\n     * @dev Used to craft. Consumes inputs and transfers outputs.\\n     * @param amount How many times to craft\\n     * @param _inputERC721Ids Array of pre-approved NFTs for crafting usage.\\n     * Example of `_inputERC721Ids` with `amount = 2` with 3 `Ingredient`s\\n     * in `inputs` with `TokenType.ERC721`\\n     * ```\\n     * [\\n     *  [1, 2]\\n     *  [3, 4]\\n     *  [5, 6]\\n     * ]\\n     * ```\\n     */\\n    function craft(uint96 amount, uint256[][] calldata _inputERC721Ids) external;\\n}\\n\",\"keccak256\":\"0xdc658a6644c33444d85575f8cdd5de08c4ce5be5dc7f8ee1797110eca8c7033d\",\"license\":\"MIT\"},\"contracts/plugins/PluginsCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol';\\n\\nimport '../OwlBase.sol';\\n\\n/**\\n * @dev Abstract contract with types and utilities that will be used by many (if\\n * not all) Plugins contracts\\n *\\n *\\n */\\nabstract contract PluginsCore is OwlBase {\\n    event RouterError(uint256 indexed routeId, address indexed sender, bytes indexed data);\\n\\n    // Unaffected inputs of this type are unaffected by the crafting process.\\n    // DOES NOT APPLY TO ERC 721 INPUTS, USE NTime INSTEAD.\\n    // Burned inputs of this type are burned during the crafting process/\\n    // NTime inputs of this type are not burned, but can only be used N times in\\n    // the same recipe; Only available for ERC721 TokenType\\n    enum ConsumableType {\\n        unaffected,\\n        burned,\\n        NTime\\n    }\\n\\n    // Current set of support token types as assets\\n    enum TokenType {\\n        erc20,\\n        erc721,\\n        erc1155\\n    }\\n\\n    struct Ingredient {\\n        TokenType token;\\n        ConsumableType consumableType;\\n        address contractAddr;\\n        uint256[] amounts;\\n        uint256[] tokenIds;\\n    }\\n\\n    // mapping from ingredient to nUSE (max count grabbed from amounts[0])\\n    mapping(uint256 => uint256) nUse;\\n\\n    // mapping from contract address to tokenId to nUsed\\n    mapping(address => mapping(uint256 => uint256)) usedERC721Inputs;\\n\\n    /**\\n     * @dev will use/consume inputs as dicatated by the configuration\\n     * @param inputs set of inputs in the configuration\\n     * @param from address to use/consume inputs from\\n     * @param burnAddress in case configuration requires a burn\\n     * address to transfer items to\\n     * @param _inputERC721Ids set of ERC721 `tokenId`s, if applicable\\n     * Example of `_inputERC721Ids` with `amount = 2` with 3 `Ingredient`s\\n     * in `inputs` with `TokenType.ERC721`\\n     * ```\\n     * [\\n     *  [1, 2]\\n     *  [3, 4]\\n     *  [5, 6]\\n     * ]\\n     * ```\\n     * @param amount sets of inputs to use/consume\\n     */\\n    function _useInputs(\\n        Ingredient[] storage inputs,\\n        address from,\\n        address burnAddress,\\n        uint256[][] calldata _inputERC721Ids,\\n        uint256 amount\\n    ) internal {\\n        // Keep count of the amount of erc721Inputs so if there\\n        // are multiple `tokenId`s in `_inputsERC721Ids`, next\\n        // element in the array is only used when iteration is\\n        // at next ERC721\\n        uint256 erc721Inputs = 0;\\n\\n        for (uint256 i = 0; i < inputs.length; i++) {\\n            Ingredient storage ingredient = inputs[i];\\n            if (ingredient.token == TokenType.erc20) {\\n                if (ingredient.consumableType == ConsumableType.burned) {\\n                    SafeERC20Upgradeable.safeTransferFrom(\\n                        IERC20Upgradeable(ingredient.contractAddr),\\n                        from,\\n                        burnAddress,\\n                        ingredient.amounts[0] * amount\\n                    );\\n                } else {\\n                    // this is unaffected, as ensured by input validations\\n                    require(\\n                        IERC20Upgradeable(ingredient.contractAddr).balanceOf(from) >= ingredient.amounts[0] * amount,\\n                        'PluginsCore: User missing minimum token balance(s)!'\\n                    );\\n                }\\n            } else if (ingredient.token == TokenType.erc721) {\\n                uint256[] memory currInputArr = _inputERC721Ids[erc721Inputs];\\n                require(currInputArr.length == amount, 'PluginsCore: _inputERC721Ids[i] != amount');\\n                if (ingredient.consumableType == ConsumableType.burned) {\\n                    for (uint256 j = 0; j < currInputArr.length; j++) {\\n                        IERC721Upgradeable(ingredient.contractAddr).safeTransferFrom(\\n                            from,\\n                            burnAddress,\\n                            currInputArr[j]\\n                        );\\n                    }\\n                } else {\\n                    //this is N-time, as ensured by input validations\\n                    for (uint256 j = 0; j < currInputArr.length; j++) {\\n                        require(\\n                            IERC721Upgradeable(ingredient.contractAddr).ownerOf(currInputArr[j]) == from,\\n                            'PluginsCore: User does not own token(s)!'\\n                        );\\n                        uint256 currTokenId = currInputArr[j];\\n                        require(\\n                            (usedERC721Inputs[ingredient.contractAddr])[currTokenId] < nUse[i],\\n                            'PluginsCore: Used over the limit of n'\\n                        );\\n                        (usedERC721Inputs[ingredient.contractAddr])[currTokenId] += 1;\\n                    }\\n                }\\n                erc721Inputs += 1;\\n            } else {\\n                // this is 1155 token type, as ensured by input validations\\n                if (ingredient.consumableType == ConsumableType.burned) {\\n                    uint256[] memory amounts = new uint256[](ingredient.amounts.length);\\n                    for (uint256 j = 0; j < ingredient.amounts.length; j++) {\\n                        amounts[j] = ingredient.amounts[j] * amount;\\n                    }\\n                    IERC1155Upgradeable(ingredient.contractAddr).safeBatchTransferFrom(\\n                        from,\\n                        burnAddress,\\n                        ingredient.tokenIds,\\n                        amounts,\\n                        new bytes(0)\\n                    );\\n                } else {\\n                    //this is unaffected consumable type, as ensured by input validations\\n                    uint256[] memory amounts = new uint256[](ingredient.amounts.length);\\n                    address[] memory accounts = new address[](ingredient.amounts.length);\\n                    for (uint256 j = 0; j < ingredient.amounts.length; j++) {\\n                        amounts[j] = ingredient.amounts[j] * amount;\\n                        accounts[j] = from;\\n                    }\\n\\n                    uint256[] memory balances = IERC1155Upgradeable(ingredient.contractAddr).balanceOfBatch(\\n                        accounts,\\n                        ingredient.tokenIds\\n                    );\\n                    for (uint256 j = 0; j < balances.length; j++) {\\n                        require(balances[j] >= amounts[j], 'PluginsCore: User missing minimum token balance(s)!');\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev validates inputs array of ingredients\\n     * @param _inputs the inputted array to the Crafter initializer\\n     * @param inputs storage array of inputs, copied from _inputs\\n     */\\n    function _validateInputs(Ingredient[] calldata _inputs, Ingredient[] storage inputs) internal {\\n        for (uint256 i = 0; i < _inputs.length; i++) {\\n            TokenType token = _inputs[i].token;\\n            if (token == TokenType.erc20) {\\n                require(_inputs[i].tokenIds.length == 0, 'PluginsCore: tokenids.length != 0');\\n                require(_inputs[i].amounts.length == 1, 'PluginsCore: amounts.length != 1');\\n                require(\\n                    _inputs[i].consumableType == ConsumableType.unaffected ||\\n                        _inputs[i].consumableType == ConsumableType.burned,\\n                    'PluginsCore: ERC20 consumableType not unaffected or burned'\\n                );\\n            } else if (token == TokenType.erc721) {\\n                //accept all token ids as inputs\\n                require(_inputs[i].tokenIds.length == 0, 'PluginsCore: tokenIds.length != 0');\\n                require(\\n                    _inputs[i].consumableType == ConsumableType.burned ||\\n                        _inputs[i].consumableType == ConsumableType.NTime,\\n                    'PluginsCore: ERC721 consumableType not burned or NTime'\\n                );\\n\\n                if (_inputs[i].consumableType == ConsumableType.NTime) {\\n                    require(\\n                        _inputs[i].amounts.length == 1,\\n                        'PluginsCore: amounts.length != 1; required for NTime ConsumableType'\\n                    );\\n\\n                    nUse[i] = _inputs[i].amounts[0];\\n                } else require(_inputs[i].amounts.length == 0, 'PluginsCore: amounts.length != 0');\\n            } else {\\n                // Solidity compiler ensures this is TokenType 1155\\n                require(\\n                    _inputs[i].tokenIds.length == _inputs[i].amounts.length,\\n                    'PluginsCore: tokenids.length != amounts.length'\\n                );\\n                require(\\n                    _inputs[i].consumableType == ConsumableType.unaffected ||\\n                        _inputs[i].consumableType == ConsumableType.burned,\\n                    'PluginsCore: ERC1155 consumableType not unaffected or burned'\\n                );\\n            }\\n\\n            inputs.push(_inputs[i]);\\n        }\\n    }\\n\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xc1603e20be149b82dc5e1c13547a3904d878fbe9d99a6a9791261469f2d9c38d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161511e620001206000396000818161085c0152818161089c01528181610a4601528181610a860152610ca5015261511e6000f3fe6080604052600436106101c25760003560e01c80635739a0d4116100f7578063bbe9e39b11610095578063dee4dea011610064578063dee4dea014610576578063df5081d614610596578063f23a6e61146105b6578063ffa1ad74146105e257600080fd5b8063bbe9e39b146104f5578063bc197c811461050a578063d2cad82a14610536578063d547741f1461055657600080fd5b806391d14854116100d157806391d148541461048b57806398c76d25146104ab578063a217fddf146104cb578063aaf10f42146104e057600080fd5b80635739a0d4146103f257806370d5ae051461043257806384f863251461046b57600080fd5b8063486ff0cd11610164578063505c9f271161013e578063505c9f271461037b57806351776d931461039d57806352d1902d146103bd578063572b6c05146103d257600080fd5b8063486ff0cd146103115780634bd09160146103485780634f1ef2861461036857600080fd5b80632c4e328d116101a05780632c4e328d1461027e5780632f2ff15d146102af57806336568abe146102d15780633659cfe6146102f157600080fd5b806301ffc9a7146101c7578063150b7a02146101fc578063248a9ca314610240575b600080fd5b3480156101d357600080fd5b506101e76101e23660046140ab565b610612565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b506102276102173660046141d7565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016101f3565b34801561024c57600080fd5b5061027061025b366004614242565b600090815260c9602052604090206001015490565b6040519081526020016101f3565b34801561028a57600080fd5b5061029e610299366004614242565b610682565b6040516101f39594939291906142ca565b3480156102bb57600080fd5b506102cf6102ca366004614327565b610794565b005b3480156102dd57600080fd5b506102cf6102ec366004614327565b6107be565b3480156102fd57600080fd5b506102cf61030c366004614357565b610851565b34801561031d57600080fd5b50604080518082019091526005815264191719171b60d91b60208201525b6040516101f391906143cc565b34801561035457600080fd5b506102cf610363366004614441565b61091a565b6102cf6103763660046144f9565b610a3b565b34801561038757600080fd5b50610390610af1565b6040516101f39190614548565b3480156103a957600080fd5b506102cf6103b836600461460b565b610c74565b3480156103c957600080fd5b50610270610c98565b3480156103de57600080fd5b506101e76103ed366004614357565b610d4b565b3480156103fe57600080fd5b5061015f5461041a90600160a01b90046001600160601b031681565b6040516001600160601b0390911681526020016101f3565b34801561043e57600080fd5b5061015f54610453906001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b34801561047757600080fd5b506102cf610486366004614441565b610d65565b34801561049757600080fd5b506101e76104a6366004614327565b610da6565b3480156104b757600080fd5b506102cf6104c6366004614357565b610dd1565b3480156104d757600080fd5b50610270600081565b3480156104ec57600080fd5b50610453610df4565b34801561050157600080fd5b50610390610e03565b34801561051657600080fd5b506102276105253660046146eb565b63bc197c8160e01b95945050505050565b34801561054257600080fd5b5061029e610551366004614242565b610f7d565b34801561056257600080fd5b506102cf610571366004614327565b610f9b565b34801561058257600080fd5b506102cf610591366004614798565b610fc0565b3480156105a257600080fd5b506102cf6105b136600461460b565b611021565b3480156105c257600080fd5b506102276105d13660046147b3565b63f23a6e6160e01b95945050505050565b3480156105ee57600080fd5b5061033b6040518060400160405280600481526020016376302e3160e01b81525081565b60006040518060400160405280600481526020016376302e3160e01b815250604051602001610641919061481b565b604051602081830303815290604052805190602001206001600160e01b031916826001600160e01b031916148061067c575061067c826110b0565b92915050565b6000806000606080600061016087815481106106a0576106a0614860565b6000918252602091829020600391909102018054600182018054604080518287028101870190915281815293955060ff80841695610100850490911694620100009094046001600160a01b0316936002880192909184919083018282801561072757602002820191906000526020600020905b815481526020019060010190808311610713575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561077957602002820191906000526020600020905b815481526020019060010190808311610765575b50505050509050955095509550955095505091939590929450565b600082815260c960205260409020600101546107af816110d5565b6107b983836110e6565b505050565b6107c661116d565b6001600160a01b0316816001600160a01b0316146108435760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61084d82826111aa565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561089a5760405162461bcd60e51b815260040161083a90614876565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108cc61122f565b6001600160a01b0316146108f25760405162461bcd60e51b815260040161083a906148c2565b6108fb8161124b565b6040805160008082526020820190925261091791839190611256565b50565b600054610100900460ff161580801561093a5750600054600160ff909116105b806109545750303b158015610954575060005460ff166001145b6109b75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161083a565b6000805460ff1916600117905580156109da576000805461ff0019166101001790555b6109ea89898989898989896113d0565b8015610a30576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a845760405162461bcd60e51b815260040161083a90614876565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ab661122f565b6001600160a01b031614610adc5760405162461bcd60e51b815260040161083a906148c2565b610ae58261124b565b61084d82826001611256565b6060610161805480602002602001604051908101604052809291908181526020016000905b82821015610c6b576000848152602090206040805160a08101909152600384029091018054829060ff166002811115610b5157610b5161425b565b6002811115610b6257610b6261425b565b81528154602090910190610100900460ff166002811115610b8557610b8561425b565b6002811115610b9657610b9661425b565b815281546201000090046001600160a01b03166020808301919091526001830180546040805182850281018501825282815294019392830182828015610bfb57602002820191906000526020600020905b815481526020019060010190808311610be7575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610c5357602002820191906000526020600020905b815481526020019060010190808311610c3f575b50505050508152505081526020019060010190610b16565b50505050905090565b6000610c7f816110d5565b610c9284610c8d848661490e565b611411565b50505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d385760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161083a565b5060008051602061508283398151915290565b600061067c6000805160206150c983398151915283610da6565b600054610100900460ff16610d8c5760405162461bcd60e51b815260040161083a90614981565b610d9c88888888888888886113d0565b5050505050505050565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610ddc816110d5565b61084d6000805160206150c9833981519152836110e6565b6000610dfe61122f565b905090565b6060610160805480602002602001604051908101604052809291908181526020016000905b82821015610c6b576000848152602090206040805160a08101909152600384029091018054829060ff166002811115610e6357610e6361425b565b6002811115610e7457610e7461425b565b81528154602090910190610100900460ff166002811115610e9757610e9761425b565b6002811115610ea857610ea861425b565b815281546201000090046001600160a01b03166020808301919091526001830180546040805182850281018501825282815294019392830182828015610f0d57602002820191906000526020600020905b815481526020019060010190808311610ef9575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f6557602002820191906000526020600020905b815481526020019060010190808311610f51575b50505050508152505081526020019060010190610e28565b6000806000606080600061016187815481106106a0576106a0614860565b600082815260c96020526040902060010154610fb6816110d5565b6107b983836111aa565b6000610fcb816110d5565b610fd68260006114c8565b61015f54604051600160a01b9091046001600160601b031681527f164f7b2ab803097dab5e39f06d2e4f3c3ddc5d4171abbdcc3e76443b8359c7f59060200160405180910390a15050565b6110328361102d61116d565b6114c8565b6110468282856001600160601b03166119ba565b61104e61116d565b61015f54604080516001600160601b038781168252600160a01b90930490921660208301526001600160a01b0392909216917f6217dc42881238756608f383b0663c681e9550fce2f9d2ae9a619bdcc0d3cb25910160405180910390a2505050565b60006001600160e01b03198216630271189760e51b148061067c575061067c826119dd565b610917816110e161116d565b611a12565b6110f08282610da6565b61084d57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561112961116d565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006014361080159061119357506111936000805160206150c983398151915233610da6565b156111a5575060131936013560601c90565b503390565b6111b48282610da6565b1561084d57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191690556111eb61116d565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600080516020615082833981519152546001600160a01b031690565b600061084d816110d5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611289576107b983611a76565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c257600080fd5b505afa9250505080156112f2575060408051601f3d908101601f191682019092526112ef918101906149cc565b60015b6113555760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161083a565b60008051602061508283398151915281146113c45760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161083a565b506107b9838383611b12565b600054610100900460ff166113f75760405162461bcd60e51b815260040161083a90614981565b61140688888787878787611b37565b610d9c868484611ca9565b6000826001600160601b03161161146a5760405162461bcd60e51b815260206004820181905260248201527f437261667465724d696e743a20616d6f756e742063616e6e6f74206265203021604482015260640161083a565b8161015f60148282829054906101000a90046001600160601b031661148f91906149fb565b92506101000a8154816001600160601b0302191690836001600160601b03160217905550610fd6826001600160601b0316826000611d31565b6000826001600160601b0316116115215760405162461bcd60e51b815260206004820181905260248201527f437261667465724d696e743a20616d6f756e742063616e6e6f74206265203021604482015260640161083a565b61015f546001600160601b03600160a01b9091048116908316111561159c5760405162461bcd60e51b815260206004820152602b60248201527f437261667465724d696e743a204e6f7420656e6f756768207265736f7572636560448201526a7320746f2063726166742160a81b606482015260840161083a565b8161015f60148282829054906101000a90046001600160601b03166115c19190614a26565b92506101000a8154816001600160601b0302191690836001600160601b0316021790555060005b610161548110156107b9576000610161828154811061160957611609614860565b6000918252602082206003909102019150815460ff1660028111156116305761163061425b565b14801561164557506001600160a01b03831615155b156117005780546201000090046001600160a01b03166340c10f1961166861116d565b866001600160601b03168460010160008154811061168857611688614860565b906000526020600020015461169d9190614a4e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156116e357600080fd5b505af11580156116f7573d6000803e3d6000fd5b505050506119a7565b6001815460ff1660028111156117185761171861425b565b141561182e5760005b846001600160601b0316811015611828576001600160a01b038416156117ec5781546201000090046001600160a01b03166340c10f1961175f61116d565b60028501805461177190600190614a6d565b8154811061178157611781614860565b6000918252602090912001546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156117d357600080fd5b505af11580156117e7573d6000803e3d6000fd5b505050505b816002018054806117ff576117ff614a84565b60019003818190600052602060002001600090559055808061182090614a9a565b915050611721565b506119a7565b6002815460ff1660028111156118465761184661425b565b14801561185b57506001600160a01b03831615155b156119a75760018101546000906001600160401b0381111561187f5761187f6140fa565b6040519080825280602002602001820160405280156118a8578160200160208202803683370190505b50905060005b600183015481101561191d57856001600160601b03168360010182815481106118d9576118d9614860565b90600052602060002001546118ee9190614a4e565b82828151811061190057611900614860565b60209081029190910101528061191581614a9a565b9150506118ae565b5081546201000090046001600160a01b0316631f7fdffa61193c61116d565b604080516000815260208101918290526001600160e01b031960e085901b1690915261197391906002870190869060248101614aea565b600060405180830381600087803b15801561198d57600080fd5b505af11580156119a1573d6000803e3d6000fd5b50505050505b50806119b281614a9a565b9150506115e8565b6107b96101606119c861116d565b61015f546001600160a01b0316868686611fca565b60006001600160e01b03198216637965db0b60e01b148061067c57506301ffc9a760e01b6001600160e01b031983161461067c565b611a1c8282610da6565b61084d57611a34816001600160a01b0316601461291c565b611a3f83602061291c565b604051602001611a50929190614b34565b60408051601f198184030181529082905262461bcd60e51b825261083a916004016143cc565b6001600160a01b0381163b611ae35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161083a565b60008051602061508283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611b1b83612abe565b600082511180611b285750805b156107b957610c928383612afe565b600054610100900460ff16611b5e5760405162461bcd60e51b815260040161083a90614981565b6001600160a01b038616611bc45760405162461bcd60e51b815260206004820152602760248201527f43726166746572436f72653a206275726e2061646472657373206d757374206e60448201526606f7420626520360cc1b606482015260840161083a565b83611c265760405162461bcd60e51b815260206004820152602c60248201527f43726166746572436f72653a2041206372616674696e6720696e707574206d7560448201526b737420626520676976656e2160a01b606482015260840161083a565b81611c895760405162461bcd60e51b815260206004820152602d60248201527f43726166746572436f72653a2041206372616674696e67206f7574707574206d60448201526c75737420626520676976656e2160981b606482015260840161083a565b611c938782612bf2565b611ca08686868686612c46565b50505050505050565b600054610100900460ff16611cd05760405162461bcd60e51b815260040161083a90614981565b6000611cee611cdf8385614bb6565b856001600160601b0316612c93565b90506000611d0f611cff8486614bb6565b866001600160601b03168461337f565b90506001600160601b03851615611d2a57611d2a8582611411565b5050505050565b6000805b61016154811015611d2a5760006101618281548110611d5657611d56614860565b6000918252602090912060039091020190506001815460ff166002811115611d8057611d8061425b565b1415611fb75785858481518110611d9957611d99614860565b60200260200101515114611e035760405162461bcd60e51b815260206004820152602b60248201527f437261667465724d696e743a205f6f7574707574734552433732314964735b6960448201526a1748084f48185b5bdd5b9d60aa1b606482015260840161083a565b60005b858481518110611e1857611e18614860565b602002602001015151811015611fa8578160000160029054906101000a90046001600160a01b03166001600160a01b0316634f558e79878681518110611e6057611e60614860565b60200260200101518381518110611e7957611e79614860565b60200260200101516040518263ffffffff1660e01b8152600401611e9f91815260200190565b60206040518083038186803b158015611eb757600080fd5b505afa158015611ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eef9190614cae565b15611f485760405162461bcd60e51b815260206004820152602360248201527f437261667465724d696e743a20746f6b656e496420616c7265616479206d696e6044820152621d195960ea1b606482015260840161083a565b81600201868581518110611f5e57611f5e614860565b60200260200101518281518110611f7757611f77614860565b6020908102919091018101518254600181018455600093845291909220015580611fa081614a9a565b915050611e06565b50611fb4600184614cd0565b92505b5080611fc281614a9a565b915050611d35565b6000805b8754811015610d9c576000888281548110611feb57611feb614860565b6000918252602082206003909102019150815460ff1660028111156120125761201261425b565b141561215b5760018154610100900460ff1660028111156120355761203561425b565b141561208e576120898160000160029054906101000a90046001600160a01b03168989878560010160008154811061206f5761206f614860565b90600052602060002001546120849190614a4e565b61352a565b612909565b83816001016000815481106120a5576120a5614860565b90600052602060002001546120ba9190614a4e565b81546040516370a0823160e01b81526001600160a01b038b8116600483015262010000909204909116906370a082319060240160206040518083038186803b15801561210557600080fd5b505afa158015612119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213d91906149cc565b10156120895760405162461bcd60e51b815260040161083a90614ce8565b6001815460ff1660028111156121735761217361425b565b141561255c57600086868581811061218d5761218d614860565b905060200281019061219f9190614d3b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508251929350505085146122355760405162461bcd60e51b815260206004820152602960248201527f506c7567696e73436f72653a205f696e7075744552433732314964735b695d20604482015268084f48185b5bdd5b9d60ba1b606482015260840161083a565b60018254610100900460ff1660028111156122525761225261425b565b14156123295760005b8151811015612323578260000160029054906101000a90046001600160a01b03166001600160a01b03166342842e0e8b8b85858151811061229e5761229e614860565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156122f857600080fd5b505af115801561230c573d6000803e3d6000fd5b50505050808061231b90614a9a565b91505061225b565b50612549565b60005b815181101561254757825482516001600160a01b03808d16926201000090041690636352211e9085908590811061236557612365614860565b60200260200101516040518263ffffffff1660e01b815260040161238b91815260200190565b60206040518083038186803b1580156123a357600080fd5b505afa1580156123b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123db9190614d84565b6001600160a01b0316146124425760405162461bcd60e51b815260206004820152602860248201527f506c7567696e73436f72653a205573657220646f6573206e6f74206f776e20746044820152676f6b656e2873292160c01b606482015260840161083a565b600082828151811061245657612456614860565b602090810291909101810151600087815260fb835260408082205488546201000090046001600160a01b0316835260fc8552818320848452909452902054909250106124f25760405162461bcd60e51b815260206004820152602560248201527f506c7567696e73436f72653a2055736564206f76657220746865206c696d69746044820152641037b3103760d91b606482015260840161083a565b83546201000090046001600160a01b0316600090815260fc60209081526040808320848452909152812080546001929061252d908490614cd0565b9091555082915061253f905081614a9a565b91505061232c565b505b612554600185614cd0565b935050612909565b60018154610100900460ff1660028111156125795761257961425b565b14156126d65760018101546000906001600160401b0381111561259e5761259e6140fa565b6040519080825280602002602001820160405280156125c7578160200160208202803683370190505b50905060005b600183015481101561263357858360010182815481106125ef576125ef614860565b90600052602060002001546126049190614a4e565b82828151811061261657612616614860565b60209081029190910101528061262b81614a9a565b9150506125cd565b5081546201000090046001600160a01b0316632eb2c2d68a8a600286018560006040519080825280601f01601f19166020018201604052801561267d576020820181803683370190505b506040518663ffffffff1660e01b815260040161269e959493929190614da1565b600060405180830381600087803b1580156126b857600080fd5b505af11580156126cc573d6000803e3d6000fd5b5050505050612909565b60018101546000906001600160401b038111156126f5576126f56140fa565b60405190808252806020026020018201604052801561271e578160200160208202803683370190505b5060018301549091506000906001600160401b03811115612741576127416140fa565b60405190808252806020026020018201604052801561276a578160200160208202803683370190505b50905060005b6001840154811015612802578684600101828154811061279257612792614860565b90600052602060002001546127a79190614a4e565b8382815181106127b9576127b9614860565b6020026020010181815250508a8282815181106127d8576127d8614860565b6001600160a01b0390921660209283029190910190910152806127fa81614a9a565b915050612770565b5082546040516313849cfd60e21b81526000916201000090046001600160a01b031690634e1273f49061283e9085906002890190600401614df3565b60006040518083038186803b15801561285657600080fd5b505afa15801561286a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128929190810190614e53565b905060005b8151811015612904578381815181106128b2576128b2614860565b60200260200101518282815181106128cc576128cc614860565b602002602001015110156128f25760405162461bcd60e51b815260040161083a90614ce8565b806128fc81614a9a565b915050612897565b505050505b508061291481614a9a565b915050611fce565b6060600061292b836002614a4e565b612936906002614cd0565b6001600160401b0381111561294d5761294d6140fa565b6040519080825280601f01601f191660200182016040528015612977576020820181803683370190505b509050600360fc1b8160008151811061299257612992614860565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106129c1576129c1614860565b60200101906001600160f81b031916908160001a90535060006129e5846002614a4e565b6129f0906001614cd0565b90505b6001811115612a68576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a2457612a24614860565b1a60f81b828281518110612a3a57612a3a614860565b60200101906001600160f81b031916908160001a90535060049490941c93612a6181614ed8565b90506129f3565b508315612ab75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161083a565b9392505050565b612ac781611a76565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612b665760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161083a565b600080846001600160a01b031684604051612b819190614eef565b600060405180830381855af49150503d8060008114612bbc576040519150601f19603f3d011682016040523d82523d6000602084013e612bc1565b606091505b5091509150612be982826040518060600160405280602781526020016150a260279139613584565b95945050505050565b600054610100900460ff16612c195760405162461bcd60e51b815260040161083a90614981565b612c2382826135bd565b612c2e6000836110e6565b61084d6000805160206150c9833981519152826110e6565b600054610100900460ff16612c6d5760405162461bcd60e51b815260040161083a90614981565b61015f80546001600160a01b0319166001600160a01b038716179055611d2a84846135e4565b600080805b8451811015613377576000858281518110612cb557612cb5614860565b6020026020010151600001516002811115612cd257612cd261425b565b1415612eb057848181518110612cea57612cea614860565b60200260200101516080015151600014612d505760405162461bcd60e51b815260206004820152602160248201527f43726166746572436f72653a20746f6b656e6964732e6c656e67746820213d206044820152600360fc1b606482015260840161083a565b848181518110612d6257612d62614860565b60200260200101516060015151600114612dbe5760405162461bcd60e51b815260206004820181905260248201527f43726166746572436f72653a20616d6f756e74732e6c656e67746820213d2031604482015260640161083a565b610161858281518110612dd357612dd3614860565b60209081029190910181015182546001818101855560009485529290932081516003909402018054919390929091839160ff1990911690836002811115612e1c57612e1c61425b565b021790555060208201518154829061ff001916610100836002811115612e4457612e4461425b565b0217905550604082015181546001600160a01b03909116620100000262010000600160b01b031990911617815560608201518051612e8c91600184019160209091019061404b565b5060808201518051612ea891600284019160209091019061404b565b505050613365565b6001858281518110612ec457612ec4614860565b6020026020010151600001516002811115612ee157612ee161425b565b14156131d55783858281518110612efa57612efa614860565b6020026020010151608001515114612f6d5760405162461bcd60e51b815260206004820152603060248201527f43726166746572436f72653a20746f6b656e6964732e6c656e67746820213d2060448201526f17d8dc98599d18589b19505b5bdd5b9d60821b606482015260840161083a565b848181518110612f7f57612f7f614860565b60200260200101516060015151600014612fdb5760405162461bcd60e51b815260206004820181905260248201527f43726166746572436f72653a20616d6f756e74732e6c656e67746820213d2030604482015260640161083a565b81612fe581614a9a565b92505060006040518060a00160405280600160028111156130085761300861425b565b815260200187848151811061301f5761301f614860565b602002602001015160200151600281111561303c5761303c61425b565b815260200187848151811061305357613053614860565b6020026020010151604001516001600160a01b0316815260200160006001600160401b03811115613086576130866140fa565b6040519080825280602002602001820160405280156130af578160200160208202803683370190505b50815260200160006040519080825280602002602001820160405280156130e0578160200160208202803683370190505b509052610161805460018181018355600092909252825160039091027fafbb1c043347995df017ce3291b765e028ad5f784d2aa00c3f5e073760a4de8b01805493945084939092839160ff1916908360028111156131405761314061425b565b021790555060208201518154829061ff0019166101008360028111156131685761316861425b565b0217905550604082015181546001600160a01b03909116620100000262010000600160b01b0319909116178155606082015180516131b091600184019160209091019061404b565b50608082015180516131cc91600284019160209091019061404b565b50505050613365565b8481815181106131e7576131e7614860565b6020026020010151606001515185828151811061320657613206614860565b60200260200101516080015151146132775760405162461bcd60e51b815260206004820152602e60248201527f43726166746572436f72653a20746f6b656e6964732e6c656e67746820213d2060448201526d0c2dadeeadce8e65cd8cadccee8d60931b606482015260840161083a565b61016185828151811061328c5761328c614860565b60209081029190910181015182546001818101855560009485529290932081516003909402018054919390929091839160ff19909116908360028111156132d5576132d561425b565b021790555060208201518154829061ff0019166101008360028111156132fd576132fd61425b565b0217905550604082015181546001600160a01b03909116620100000262010000600160b01b03199091161781556060820151805161334591600184019160209091019061404b565b506080820151805161336191600284019160209091019061404b565b5050505b8061336f81614a9a565b915050612c98565b509392505050565b60606000826001600160401b0381111561339b5761339b6140fa565b6040519080825280602002602001820160405280156133ce57816020015b60608152602001906001900390816133b95790505b5090506000805b865181101561351f5760018782815181106133f2576133f2614860565b602002602001015160000151600281111561340f5761340f61425b565b141561350d57856001600160401b0381111561342d5761342d6140fa565b604051908082528060200260200182016040528015613456578160200160208202803683370190505b5083838151811061346957613469614860565b602002602001018190525060005b868110156134fe5787828151811061349157613491614860565b60200260200101516080015181815181106134ae576134ae614860565b60200260200101518484815181106134c8576134c8614860565b602002602001015182815181106134e1576134e1614860565b6020908102919091010152806134f681614a9a565b915050613477565b508161350981614a9a565b9250505b8061351781614a9a565b9150506133d5565b509095945050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610c929085906135f1565b60608315613593575081612ab7565b8251156135a35782518084602001fd5b8160405162461bcd60e51b815260040161083a91906143cc565b600054610100900460ff1661084d5760405162461bcd60e51b815260040161083a90614981565b61084d82826101606136c3565b6000613646826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f039092919063ffffffff16565b8051909150156107b957808060200190518101906136649190614cae565b6107b95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161083a565b60005b82811015610c925760008484838181106136e2576136e2614860565b90506020028101906136f49190614f0b565b613702906020810190614f21565b905060008160028111156137185761371861425b565b141561393c5784848381811061373057613730614860565b90506020028101906137429190614f0b565b613750906080810190614d3b565b1590506137a95760405162461bcd60e51b815260206004820152602160248201527f506c7567696e73436f72653a20746f6b656e6964732e6c656e67746820213d206044820152600360fc1b606482015260840161083a565b8484838181106137bb576137bb614860565b90506020028101906137cd9190614f0b565b6137db906060810190614d3b565b905060011461382c5760405162461bcd60e51b815260206004820181905260248201527f506c7567696e73436f72653a20616d6f756e74732e6c656e67746820213d2031604482015260640161083a565b600085858481811061384057613840614860565b90506020028101906138529190614f0b565b613863906040810190602001614f21565b60028111156138745761387461425b565b14806138c55750600185858481811061388f5761388f614860565b90506020028101906138a19190614f0b565b6138b2906040810190602001614f21565b60028111156138c3576138c361425b565b145b6139375760405162461bcd60e51b815260206004820152603a60248201527f506c7567696e73436f72653a20455243323020636f6e73756d61626c6554797060448201527f65206e6f7420756e6166666563746564206f72206275726e6564000000000000606482015260840161083a565b613ea6565b60018160028111156139505761395061425b565b1415613ccf5784848381811061396857613968614860565b905060200281019061397a9190614f0b565b613988906080810190614d3b565b1590506139e15760405162461bcd60e51b815260206004820152602160248201527f506c7567696e73436f72653a20746f6b656e4964732e6c656e67746820213d206044820152600360fc1b606482015260840161083a565b60018585848181106139f5576139f5614860565b9050602002810190613a079190614f0b565b613a18906040810190602001614f21565b6002811115613a2957613a2961425b565b1480613a7a57506002858584818110613a4457613a44614860565b9050602002810190613a569190614f0b565b613a67906040810190602001614f21565b6002811115613a7857613a7861425b565b145b613ae55760405162461bcd60e51b815260206004820152603660248201527f506c7567696e73436f72653a2045524337323120636f6e73756d61626c6554796044820152757065206e6f74206275726e6564206f72204e54696d6560501b606482015260840161083a565b6002858584818110613af957613af9614860565b9050602002810190613b0b9190614f0b565b613b1c906040810190602001614f21565b6002811115613b2d57613b2d61425b565b1415613c4e57848483818110613b4557613b45614860565b9050602002810190613b579190614f0b565b613b65906060810190614d3b565b9050600114613be85760405162461bcd60e51b815260206004820152604360248201527f506c7567696e73436f72653a20616d6f756e74732e6c656e67746820213d203160448201527f3b20726571756972656420666f72204e54696d6520436f6e73756d61626c655460648201526279706560e81b608482015260a40161083a565b848483818110613bfa57613bfa614860565b9050602002810190613c0c9190614f0b565b613c1a906060810190614d3b565b6000818110613c2b57613c2b614860565b9050602002013560fb600084815260200190815260200160002081905550613ea6565b848483818110613c6057613c60614860565b9050602002810190613c729190614f0b565b613c80906060810190614d3b565b1590506139375760405162461bcd60e51b815260206004820181905260248201527f506c7567696e73436f72653a20616d6f756e74732e6c656e67746820213d2030604482015260640161083a565b848483818110613ce157613ce1614860565b9050602002810190613cf39190614f0b565b613d01906060810190614d3b565b9050858584818110613d1557613d15614860565b9050602002810190613d279190614f0b565b613d35906080810190614d3b565b905014613d9b5760405162461bcd60e51b815260206004820152602e60248201527f506c7567696e73436f72653a20746f6b656e6964732e6c656e67746820213d2060448201526d0c2dadeeadce8e65cd8cadccee8d60931b606482015260840161083a565b6000858584818110613daf57613daf614860565b9050602002810190613dc19190614f0b565b613dd2906040810190602001614f21565b6002811115613de357613de361425b565b1480613e3457506001858584818110613dfe57613dfe614860565b9050602002810190613e109190614f0b565b613e21906040810190602001614f21565b6002811115613e3257613e3261425b565b145b613ea65760405162461bcd60e51b815260206004820152603c60248201527f506c7567696e73436f72653a204552433131353520636f6e73756d61626c655460448201527f797065206e6f7420756e6166666563746564206f72206275726e656400000000606482015260840161083a565b82858584818110613eb957613eb9614860565b9050602002810190613ecb9190614f0b565b815460018101835560009283526020909220909160030201613eed8282614fc1565b5050508080613efb90614a9a565b9150506136c6565b6060613f128484600085613f1a565b949350505050565b606082471015613f7b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161083a565b6001600160a01b0385163b613fd25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161083a565b600080866001600160a01b03168587604051613fee9190614eef565b60006040518083038185875af1925050503d806000811461402b576040519150601f19603f3d011682016040523d82523d6000602084013e614030565b606091505b5091509150614040828286613584565b979650505050505050565b828054828255906000526020600020908101928215614086579160200282015b8281111561408657825182559160200191906001019061406b565b50614092929150614096565b5090565b5b808211156140925760008155600101614097565b6000602082840312156140bd57600080fd5b81356001600160e01b031981168114612ab757600080fd5b6001600160a01b038116811461091757600080fd5b80356140f5816140d5565b919050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715614132576141326140fa565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614160576141606140fa565b604052919050565b600082601f83011261417957600080fd5b81356001600160401b03811115614192576141926140fa565b6141a5601f8201601f1916602001614138565b8181528460208386010111156141ba57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156141ed57600080fd5b84356141f8816140d5565b93506020850135614208816140d5565b92506040850135915060608501356001600160401b0381111561422a57600080fd5b61423687828801614168565b91505092959194509250565b60006020828403121561425457600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061091757634e487b7160e01b600052602160045260246000fd5b600081518084526020808501945080840160005b838110156142bf578151875295820195908201906001016142a3565b509495945050505050565b6142d386614271565b8581526142df85614271565b84602082015260018060a01b038416604082015260a06060820152600061430960a083018561428f565b828103608084015261431b818561428f565b98975050505050505050565b6000806040838503121561433a57600080fd5b82359150602083013561434c816140d5565b809150509250929050565b60006020828403121561436957600080fd5b8135612ab7816140d5565b60005b8381101561438f578181015183820152602001614377565b83811115610c925750506000910152565b600081518084526143b8816020860160208601614374565b601f01601f19169290920160200192915050565b602081526000612ab760208301846143a0565b80356001600160601b03811681146140f557600080fd5b60008083601f84011261440857600080fd5b5081356001600160401b0381111561441f57600080fd5b6020830191508360208260051b850101111561443a57600080fd5b9250929050565b60008060008060008060008060c0898b03121561445d57600080fd5b8835614468816140d5565b97506020890135614478816140d5565b965061448660408a016143df565b955060608901356001600160401b03808211156144a257600080fd5b6144ae8c838d016143f6565b909750955060808b01359150808211156144c757600080fd5b506144d48b828c016143f6565b90945092505060a08901356144e8816140d5565b809150509295985092959890939650565b6000806040838503121561450c57600080fd5b8235614517816140d5565b915060208301356001600160401b0381111561453257600080fd5b61453e85828601614168565b9150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156145fd57603f19898403018552815160a0815161458f81614271565b85528189015161459e81614271565b858a0152818801516001600160a01b0316888601526060808301518187018390526145cb8388018261428f565b92505050608080830151925085820381870152506145e9818361428f565b96890196945050509086019060010161456f565b509098975050505050505050565b60008060006040848603121561462057600080fd5b614629846143df565b925060208401356001600160401b0381111561464457600080fd5b614650868287016143f6565b9497909650939450505050565b60006001600160401b03821115614676576146766140fa565b5060051b60200190565b600082601f83011261469157600080fd5b813560206146a66146a18361465d565b614138565b82815260059290921b840181019181810190868411156146c557600080fd5b8286015b848110156146e057803583529183019183016146c9565b509695505050505050565b600080600080600060a0868803121561470357600080fd5b853561470e816140d5565b9450602086013561471e816140d5565b935060408601356001600160401b038082111561473a57600080fd5b61474689838a01614680565b9450606088013591508082111561475c57600080fd5b61476889838a01614680565b9350608088013591508082111561477e57600080fd5b5061478b88828901614168565b9150509295509295909350565b6000602082840312156147aa57600080fd5b612ab7826143df565b600080600080600060a086880312156147cb57600080fd5b85356147d6816140d5565b945060208601356147e6816140d5565b9350604086013592506060860135915060808601356001600160401b0381111561480f57600080fd5b61478b88828901614168565b7f4f574c50726f746f636f6c3a2f2f437261667465724d696e742f00000000000081526000825161485381601a850160208701614374565b91909101601a0192915050565b634e487b7160e01b600052603260045260246000fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600061491c6146a18461465d565b80848252602080830192508560051b85013681111561493a57600080fd5b855b818110156149755780356001600160401b0381111561495b5760008081fd5b61496736828a01614680565b86525093820193820161493c565b50919695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156149de57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001600160601b03808316818516808303821115614a1d57614a1d6149e5565b01949350505050565b60006001600160601b0383811690831681811015614a4657614a466149e5565b039392505050565b6000816000190483118215151615614a6857614a686149e5565b500290565b600082821015614a7f57614a7f6149e5565b500390565b634e487b7160e01b600052603160045260246000fd5b6000600019821415614aae57614aae6149e5565b5060010190565b6000815480845260208085019450836000528060002060005b838110156142bf57815487529582019560019182019101614ace565b6001600160a01b0385168152608060208201819052600090614b0e90830186614ab5565b8281036040840152614b20818661428f565b9050828103606084015261404081856143a0565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614b6c816017850160208801614374565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614b9d816028840160208801614374565b01602801949350505050565b6003811061091757600080fd5b6000614bc46146a18461465d565b80848252602080830192508560051b850136811115614be257600080fd5b855b818110156149755780356001600160401b0380821115614c045760008081fd5b818901915060a08236031215614c1a5760008081fd5b614c22614110565b8235614c2d81614ba9565b815282860135614c3c81614ba9565b818701526040614c4d8482016140ea565b9082015260608381013583811115614c655760008081fd5b614c7136828701614680565b82840152505060808084013583811115614c8b5760008081fd5b614c9736828701614680565b918301919091525087525050938201938201614be4565b600060208284031215614cc057600080fd5b81518015158114612ab757600080fd5b60008219821115614ce357614ce36149e5565b500190565b60208082526033908201527f506c7567696e73436f72653a2055736572206d697373696e67206d696e696d756040820152726d20746f6b656e2062616c616e63652873292160681b606082015260800190565b6000808335601e19843603018112614d5257600080fd5b8301803591506001600160401b03821115614d6c57600080fd5b6020019150600581901b360382131561443a57600080fd5b600060208284031215614d9657600080fd5b8151612ab7816140d5565b6001600160a01b0386811682528516602082015260a060408201819052600090614dcd90830186614ab5565b8281036060840152614ddf818661428f565b9050828103608084015261431b81856143a0565b604080825283519082018190526000906020906060840190828701845b82811015614e355781516001600160a01b031684529284019290840190600101614e10565b50505083810382850152614e498186614ab5565b9695505050505050565b60006020808385031215614e6657600080fd5b82516001600160401b03811115614e7c57600080fd5b8301601f81018513614e8d57600080fd5b8051614e9b6146a18261465d565b81815260059190911b82018301908381019087831115614eba57600080fd5b928401925b8284101561404057835182529284019290840190614ebf565b600081614ee757614ee76149e5565b506000190190565b60008251614f01818460208701614374565b9190910192915050565b60008235609e19833603018112614f0157600080fd5b600060208284031215614f3357600080fd5b8135612ab781614ba9565b68010000000000000000831115614f5757614f576140fa565b805483825580841015614f8e576000828152602081208581019083015b80821015614f8a57828255600182019150614f74565b5050505b5060008181526020812083915b85811015614fb9578235825560209092019160019182019101614f9b565b505050505050565b8135614fcc81614ba9565b614fd581614271565b815460ff821691508160ff1982161783556020840135614ff481614ba9565b614ffd81614271565b61ff008160081b169050808361ffff198416171784556040850135615021816140d5565b6001600160b01b0319929092169092179190911760109190911b62010000600160b01b03161781556150566060830183614d3b565b615064818360018601614f3e565b50506150736080830183614d3b565b610c92818360028601614f3e56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65647a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb2a26469706673582212209c2667eb88f8d6cb36bf2b06b4ceb08a8a06fef37857016b4c648fcf99471d3364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80635739a0d4116100f7578063bbe9e39b11610095578063dee4dea011610064578063dee4dea014610576578063df5081d614610596578063f23a6e61146105b6578063ffa1ad74146105e257600080fd5b8063bbe9e39b146104f5578063bc197c811461050a578063d2cad82a14610536578063d547741f1461055657600080fd5b806391d14854116100d157806391d148541461048b57806398c76d25146104ab578063a217fddf146104cb578063aaf10f42146104e057600080fd5b80635739a0d4146103f257806370d5ae051461043257806384f863251461046b57600080fd5b8063486ff0cd11610164578063505c9f271161013e578063505c9f271461037b57806351776d931461039d57806352d1902d146103bd578063572b6c05146103d257600080fd5b8063486ff0cd146103115780634bd09160146103485780634f1ef2861461036857600080fd5b80632c4e328d116101a05780632c4e328d1461027e5780632f2ff15d146102af57806336568abe146102d15780633659cfe6146102f157600080fd5b806301ffc9a7146101c7578063150b7a02146101fc578063248a9ca314610240575b600080fd5b3480156101d357600080fd5b506101e76101e23660046140ab565b610612565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b506102276102173660046141d7565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016101f3565b34801561024c57600080fd5b5061027061025b366004614242565b600090815260c9602052604090206001015490565b6040519081526020016101f3565b34801561028a57600080fd5b5061029e610299366004614242565b610682565b6040516101f39594939291906142ca565b3480156102bb57600080fd5b506102cf6102ca366004614327565b610794565b005b3480156102dd57600080fd5b506102cf6102ec366004614327565b6107be565b3480156102fd57600080fd5b506102cf61030c366004614357565b610851565b34801561031d57600080fd5b50604080518082019091526005815264191719171b60d91b60208201525b6040516101f391906143cc565b34801561035457600080fd5b506102cf610363366004614441565b61091a565b6102cf6103763660046144f9565b610a3b565b34801561038757600080fd5b50610390610af1565b6040516101f39190614548565b3480156103a957600080fd5b506102cf6103b836600461460b565b610c74565b3480156103c957600080fd5b50610270610c98565b3480156103de57600080fd5b506101e76103ed366004614357565b610d4b565b3480156103fe57600080fd5b5061015f5461041a90600160a01b90046001600160601b031681565b6040516001600160601b0390911681526020016101f3565b34801561043e57600080fd5b5061015f54610453906001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b34801561047757600080fd5b506102cf610486366004614441565b610d65565b34801561049757600080fd5b506101e76104a6366004614327565b610da6565b3480156104b757600080fd5b506102cf6104c6366004614357565b610dd1565b3480156104d757600080fd5b50610270600081565b3480156104ec57600080fd5b50610453610df4565b34801561050157600080fd5b50610390610e03565b34801561051657600080fd5b506102276105253660046146eb565b63bc197c8160e01b95945050505050565b34801561054257600080fd5b5061029e610551366004614242565b610f7d565b34801561056257600080fd5b506102cf610571366004614327565b610f9b565b34801561058257600080fd5b506102cf610591366004614798565b610fc0565b3480156105a257600080fd5b506102cf6105b136600461460b565b611021565b3480156105c257600080fd5b506102276105d13660046147b3565b63f23a6e6160e01b95945050505050565b3480156105ee57600080fd5b5061033b6040518060400160405280600481526020016376302e3160e01b81525081565b60006040518060400160405280600481526020016376302e3160e01b815250604051602001610641919061481b565b604051602081830303815290604052805190602001206001600160e01b031916826001600160e01b031916148061067c575061067c826110b0565b92915050565b6000806000606080600061016087815481106106a0576106a0614860565b6000918252602091829020600391909102018054600182018054604080518287028101870190915281815293955060ff80841695610100850490911694620100009094046001600160a01b0316936002880192909184919083018282801561072757602002820191906000526020600020905b815481526020019060010190808311610713575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561077957602002820191906000526020600020905b815481526020019060010190808311610765575b50505050509050955095509550955095505091939590929450565b600082815260c960205260409020600101546107af816110d5565b6107b983836110e6565b505050565b6107c661116d565b6001600160a01b0316816001600160a01b0316146108435760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61084d82826111aa565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561089a5760405162461bcd60e51b815260040161083a90614876565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108cc61122f565b6001600160a01b0316146108f25760405162461bcd60e51b815260040161083a906148c2565b6108fb8161124b565b6040805160008082526020820190925261091791839190611256565b50565b600054610100900460ff161580801561093a5750600054600160ff909116105b806109545750303b158015610954575060005460ff166001145b6109b75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161083a565b6000805460ff1916600117905580156109da576000805461ff0019166101001790555b6109ea89898989898989896113d0565b8015610a30576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a845760405162461bcd60e51b815260040161083a90614876565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ab661122f565b6001600160a01b031614610adc5760405162461bcd60e51b815260040161083a906148c2565b610ae58261124b565b61084d82826001611256565b6060610161805480602002602001604051908101604052809291908181526020016000905b82821015610c6b576000848152602090206040805160a08101909152600384029091018054829060ff166002811115610b5157610b5161425b565b6002811115610b6257610b6261425b565b81528154602090910190610100900460ff166002811115610b8557610b8561425b565b6002811115610b9657610b9661425b565b815281546201000090046001600160a01b03166020808301919091526001830180546040805182850281018501825282815294019392830182828015610bfb57602002820191906000526020600020905b815481526020019060010190808311610be7575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610c5357602002820191906000526020600020905b815481526020019060010190808311610c3f575b50505050508152505081526020019060010190610b16565b50505050905090565b6000610c7f816110d5565b610c9284610c8d848661490e565b611411565b50505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d385760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161083a565b5060008051602061508283398151915290565b600061067c6000805160206150c983398151915283610da6565b600054610100900460ff16610d8c5760405162461bcd60e51b815260040161083a90614981565b610d9c88888888888888886113d0565b5050505050505050565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610ddc816110d5565b61084d6000805160206150c9833981519152836110e6565b6000610dfe61122f565b905090565b6060610160805480602002602001604051908101604052809291908181526020016000905b82821015610c6b576000848152602090206040805160a08101909152600384029091018054829060ff166002811115610e6357610e6361425b565b6002811115610e7457610e7461425b565b81528154602090910190610100900460ff166002811115610e9757610e9761425b565b6002811115610ea857610ea861425b565b815281546201000090046001600160a01b03166020808301919091526001830180546040805182850281018501825282815294019392830182828015610f0d57602002820191906000526020600020905b815481526020019060010190808311610ef9575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f6557602002820191906000526020600020905b815481526020019060010190808311610f51575b50505050508152505081526020019060010190610e28565b6000806000606080600061016187815481106106a0576106a0614860565b600082815260c96020526040902060010154610fb6816110d5565b6107b983836111aa565b6000610fcb816110d5565b610fd68260006114c8565b61015f54604051600160a01b9091046001600160601b031681527f164f7b2ab803097dab5e39f06d2e4f3c3ddc5d4171abbdcc3e76443b8359c7f59060200160405180910390a15050565b6110328361102d61116d565b6114c8565b6110468282856001600160601b03166119ba565b61104e61116d565b61015f54604080516001600160601b038781168252600160a01b90930490921660208301526001600160a01b0392909216917f6217dc42881238756608f383b0663c681e9550fce2f9d2ae9a619bdcc0d3cb25910160405180910390a2505050565b60006001600160e01b03198216630271189760e51b148061067c575061067c826119dd565b610917816110e161116d565b611a12565b6110f08282610da6565b61084d57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561112961116d565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006014361080159061119357506111936000805160206150c983398151915233610da6565b156111a5575060131936013560601c90565b503390565b6111b48282610da6565b1561084d57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191690556111eb61116d565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600080516020615082833981519152546001600160a01b031690565b600061084d816110d5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611289576107b983611a76565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c257600080fd5b505afa9250505080156112f2575060408051601f3d908101601f191682019092526112ef918101906149cc565b60015b6113555760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161083a565b60008051602061508283398151915281146113c45760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161083a565b506107b9838383611b12565b600054610100900460ff166113f75760405162461bcd60e51b815260040161083a90614981565b61140688888787878787611b37565b610d9c868484611ca9565b6000826001600160601b03161161146a5760405162461bcd60e51b815260206004820181905260248201527f437261667465724d696e743a20616d6f756e742063616e6e6f74206265203021604482015260640161083a565b8161015f60148282829054906101000a90046001600160601b031661148f91906149fb565b92506101000a8154816001600160601b0302191690836001600160601b03160217905550610fd6826001600160601b0316826000611d31565b6000826001600160601b0316116115215760405162461bcd60e51b815260206004820181905260248201527f437261667465724d696e743a20616d6f756e742063616e6e6f74206265203021604482015260640161083a565b61015f546001600160601b03600160a01b9091048116908316111561159c5760405162461bcd60e51b815260206004820152602b60248201527f437261667465724d696e743a204e6f7420656e6f756768207265736f7572636560448201526a7320746f2063726166742160a81b606482015260840161083a565b8161015f60148282829054906101000a90046001600160601b03166115c19190614a26565b92506101000a8154816001600160601b0302191690836001600160601b0316021790555060005b610161548110156107b9576000610161828154811061160957611609614860565b6000918252602082206003909102019150815460ff1660028111156116305761163061425b565b14801561164557506001600160a01b03831615155b156117005780546201000090046001600160a01b03166340c10f1961166861116d565b866001600160601b03168460010160008154811061168857611688614860565b906000526020600020015461169d9190614a4e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156116e357600080fd5b505af11580156116f7573d6000803e3d6000fd5b505050506119a7565b6001815460ff1660028111156117185761171861425b565b141561182e5760005b846001600160601b0316811015611828576001600160a01b038416156117ec5781546201000090046001600160a01b03166340c10f1961175f61116d565b60028501805461177190600190614a6d565b8154811061178157611781614860565b6000918252602090912001546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156117d357600080fd5b505af11580156117e7573d6000803e3d6000fd5b505050505b816002018054806117ff576117ff614a84565b60019003818190600052602060002001600090559055808061182090614a9a565b915050611721565b506119a7565b6002815460ff1660028111156118465761184661425b565b14801561185b57506001600160a01b03831615155b156119a75760018101546000906001600160401b0381111561187f5761187f6140fa565b6040519080825280602002602001820160405280156118a8578160200160208202803683370190505b50905060005b600183015481101561191d57856001600160601b03168360010182815481106118d9576118d9614860565b90600052602060002001546118ee9190614a4e565b82828151811061190057611900614860565b60209081029190910101528061191581614a9a565b9150506118ae565b5081546201000090046001600160a01b0316631f7fdffa61193c61116d565b604080516000815260208101918290526001600160e01b031960e085901b1690915261197391906002870190869060248101614aea565b600060405180830381600087803b15801561198d57600080fd5b505af11580156119a1573d6000803e3d6000fd5b50505050505b50806119b281614a9a565b9150506115e8565b6107b96101606119c861116d565b61015f546001600160a01b0316868686611fca565b60006001600160e01b03198216637965db0b60e01b148061067c57506301ffc9a760e01b6001600160e01b031983161461067c565b611a1c8282610da6565b61084d57611a34816001600160a01b0316601461291c565b611a3f83602061291c565b604051602001611a50929190614b34565b60408051601f198184030181529082905262461bcd60e51b825261083a916004016143cc565b6001600160a01b0381163b611ae35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161083a565b60008051602061508283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611b1b83612abe565b600082511180611b285750805b156107b957610c928383612afe565b600054610100900460ff16611b5e5760405162461bcd60e51b815260040161083a90614981565b6001600160a01b038616611bc45760405162461bcd60e51b815260206004820152602760248201527f43726166746572436f72653a206275726e2061646472657373206d757374206e60448201526606f7420626520360cc1b606482015260840161083a565b83611c265760405162461bcd60e51b815260206004820152602c60248201527f43726166746572436f72653a2041206372616674696e6720696e707574206d7560448201526b737420626520676976656e2160a01b606482015260840161083a565b81611c895760405162461bcd60e51b815260206004820152602d60248201527f43726166746572436f72653a2041206372616674696e67206f7574707574206d60448201526c75737420626520676976656e2160981b606482015260840161083a565b611c938782612bf2565b611ca08686868686612c46565b50505050505050565b600054610100900460ff16611cd05760405162461bcd60e51b815260040161083a90614981565b6000611cee611cdf8385614bb6565b856001600160601b0316612c93565b90506000611d0f611cff8486614bb6565b866001600160601b03168461337f565b90506001600160601b03851615611d2a57611d2a8582611411565b5050505050565b6000805b61016154811015611d2a5760006101618281548110611d5657611d56614860565b6000918252602090912060039091020190506001815460ff166002811115611d8057611d8061425b565b1415611fb75785858481518110611d9957611d99614860565b60200260200101515114611e035760405162461bcd60e51b815260206004820152602b60248201527f437261667465724d696e743a205f6f7574707574734552433732314964735b6960448201526a1748084f48185b5bdd5b9d60aa1b606482015260840161083a565b60005b858481518110611e1857611e18614860565b602002602001015151811015611fa8578160000160029054906101000a90046001600160a01b03166001600160a01b0316634f558e79878681518110611e6057611e60614860565b60200260200101518381518110611e7957611e79614860565b60200260200101516040518263ffffffff1660e01b8152600401611e9f91815260200190565b60206040518083038186803b158015611eb757600080fd5b505afa158015611ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eef9190614cae565b15611f485760405162461bcd60e51b815260206004820152602360248201527f437261667465724d696e743a20746f6b656e496420616c7265616479206d696e6044820152621d195960ea1b606482015260840161083a565b81600201868581518110611f5e57611f5e614860565b60200260200101518281518110611f7757611f77614860565b6020908102919091018101518254600181018455600093845291909220015580611fa081614a9a565b915050611e06565b50611fb4600184614cd0565b92505b5080611fc281614a9a565b915050611d35565b6000805b8754811015610d9c576000888281548110611feb57611feb614860565b6000918252602082206003909102019150815460ff1660028111156120125761201261425b565b141561215b5760018154610100900460ff1660028111156120355761203561425b565b141561208e576120898160000160029054906101000a90046001600160a01b03168989878560010160008154811061206f5761206f614860565b90600052602060002001546120849190614a4e565b61352a565b612909565b83816001016000815481106120a5576120a5614860565b90600052602060002001546120ba9190614a4e565b81546040516370a0823160e01b81526001600160a01b038b8116600483015262010000909204909116906370a082319060240160206040518083038186803b15801561210557600080fd5b505afa158015612119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213d91906149cc565b10156120895760405162461bcd60e51b815260040161083a90614ce8565b6001815460ff1660028111156121735761217361425b565b141561255c57600086868581811061218d5761218d614860565b905060200281019061219f9190614d3b565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508251929350505085146122355760405162461bcd60e51b815260206004820152602960248201527f506c7567696e73436f72653a205f696e7075744552433732314964735b695d20604482015268084f48185b5bdd5b9d60ba1b606482015260840161083a565b60018254610100900460ff1660028111156122525761225261425b565b14156123295760005b8151811015612323578260000160029054906101000a90046001600160a01b03166001600160a01b03166342842e0e8b8b85858151811061229e5761229e614860565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156122f857600080fd5b505af115801561230c573d6000803e3d6000fd5b50505050808061231b90614a9a565b91505061225b565b50612549565b60005b815181101561254757825482516001600160a01b03808d16926201000090041690636352211e9085908590811061236557612365614860565b60200260200101516040518263ffffffff1660e01b815260040161238b91815260200190565b60206040518083038186803b1580156123a357600080fd5b505afa1580156123b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123db9190614d84565b6001600160a01b0316146124425760405162461bcd60e51b815260206004820152602860248201527f506c7567696e73436f72653a205573657220646f6573206e6f74206f776e20746044820152676f6b656e2873292160c01b606482015260840161083a565b600082828151811061245657612456614860565b602090810291909101810151600087815260fb835260408082205488546201000090046001600160a01b0316835260fc8552818320848452909452902054909250106124f25760405162461bcd60e51b815260206004820152602560248201527f506c7567696e73436f72653a2055736564206f76657220746865206c696d69746044820152641037b3103760d91b606482015260840161083a565b83546201000090046001600160a01b0316600090815260fc60209081526040808320848452909152812080546001929061252d908490614cd0565b9091555082915061253f905081614a9a565b91505061232c565b505b612554600185614cd0565b935050612909565b60018154610100900460ff1660028111156125795761257961425b565b14156126d65760018101546000906001600160401b0381111561259e5761259e6140fa565b6040519080825280602002602001820160405280156125c7578160200160208202803683370190505b50905060005b600183015481101561263357858360010182815481106125ef576125ef614860565b90600052602060002001546126049190614a4e565b82828151811061261657612616614860565b60209081029190910101528061262b81614a9a565b9150506125cd565b5081546201000090046001600160a01b0316632eb2c2d68a8a600286018560006040519080825280601f01601f19166020018201604052801561267d576020820181803683370190505b506040518663ffffffff1660e01b815260040161269e959493929190614da1565b600060405180830381600087803b1580156126b857600080fd5b505af11580156126cc573d6000803e3d6000fd5b5050505050612909565b60018101546000906001600160401b038111156126f5576126f56140fa565b60405190808252806020026020018201604052801561271e578160200160208202803683370190505b5060018301549091506000906001600160401b03811115612741576127416140fa565b60405190808252806020026020018201604052801561276a578160200160208202803683370190505b50905060005b6001840154811015612802578684600101828154811061279257612792614860565b90600052602060002001546127a79190614a4e565b8382815181106127b9576127b9614860565b6020026020010181815250508a8282815181106127d8576127d8614860565b6001600160a01b0390921660209283029190910190910152806127fa81614a9a565b915050612770565b5082546040516313849cfd60e21b81526000916201000090046001600160a01b031690634e1273f49061283e9085906002890190600401614df3565b60006040518083038186803b15801561285657600080fd5b505afa15801561286a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128929190810190614e53565b905060005b8151811015612904578381815181106128b2576128b2614860565b60200260200101518282815181106128cc576128cc614860565b602002602001015110156128f25760405162461bcd60e51b815260040161083a90614ce8565b806128fc81614a9a565b915050612897565b505050505b508061291481614a9a565b915050611fce565b6060600061292b836002614a4e565b612936906002614cd0565b6001600160401b0381111561294d5761294d6140fa565b6040519080825280601f01601f191660200182016040528015612977576020820181803683370190505b509050600360fc1b8160008151811061299257612992614860565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106129c1576129c1614860565b60200101906001600160f81b031916908160001a90535060006129e5846002614a4e565b6129f0906001614cd0565b90505b6001811115612a68576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a2457612a24614860565b1a60f81b828281518110612a3a57612a3a614860565b60200101906001600160f81b031916908160001a90535060049490941c93612a6181614ed8565b90506129f3565b508315612ab75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161083a565b9392505050565b612ac781611a76565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612b665760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161083a565b600080846001600160a01b031684604051612b819190614eef565b600060405180830381855af49150503d8060008114612bbc576040519150601f19603f3d011682016040523d82523d6000602084013e612bc1565b606091505b5091509150612be982826040518060600160405280602781526020016150a260279139613584565b95945050505050565b600054610100900460ff16612c195760405162461bcd60e51b815260040161083a90614981565b612c2382826135bd565b612c2e6000836110e6565b61084d6000805160206150c9833981519152826110e6565b600054610100900460ff16612c6d5760405162461bcd60e51b815260040161083a90614981565b61015f80546001600160a01b0319166001600160a01b038716179055611d2a84846135e4565b600080805b8451811015613377576000858281518110612cb557612cb5614860565b6020026020010151600001516002811115612cd257612cd261425b565b1415612eb057848181518110612cea57612cea614860565b60200260200101516080015151600014612d505760405162461bcd60e51b815260206004820152602160248201527f43726166746572436f72653a20746f6b656e6964732e6c656e67746820213d206044820152600360fc1b606482015260840161083a565b848181518110612d6257612d62614860565b60200260200101516060015151600114612dbe5760405162461bcd60e51b815260206004820181905260248201527f43726166746572436f72653a20616d6f756e74732e6c656e67746820213d2031604482015260640161083a565b610161858281518110612dd357612dd3614860565b60209081029190910181015182546001818101855560009485529290932081516003909402018054919390929091839160ff1990911690836002811115612e1c57612e1c61425b565b021790555060208201518154829061ff001916610100836002811115612e4457612e4461425b565b0217905550604082015181546001600160a01b03909116620100000262010000600160b01b031990911617815560608201518051612e8c91600184019160209091019061404b565b5060808201518051612ea891600284019160209091019061404b565b505050613365565b6001858281518110612ec457612ec4614860565b6020026020010151600001516002811115612ee157612ee161425b565b14156131d55783858281518110612efa57612efa614860565b6020026020010151608001515114612f6d5760405162461bcd60e51b815260206004820152603060248201527f43726166746572436f72653a20746f6b656e6964732e6c656e67746820213d2060448201526f17d8dc98599d18589b19505b5bdd5b9d60821b606482015260840161083a565b848181518110612f7f57612f7f614860565b60200260200101516060015151600014612fdb5760405162461bcd60e51b815260206004820181905260248201527f43726166746572436f72653a20616d6f756e74732e6c656e67746820213d2030604482015260640161083a565b81612fe581614a9a565b92505060006040518060a00160405280600160028111156130085761300861425b565b815260200187848151811061301f5761301f614860565b602002602001015160200151600281111561303c5761303c61425b565b815260200187848151811061305357613053614860565b6020026020010151604001516001600160a01b0316815260200160006001600160401b03811115613086576130866140fa565b6040519080825280602002602001820160405280156130af578160200160208202803683370190505b50815260200160006040519080825280602002602001820160405280156130e0578160200160208202803683370190505b509052610161805460018181018355600092909252825160039091027fafbb1c043347995df017ce3291b765e028ad5f784d2aa00c3f5e073760a4de8b01805493945084939092839160ff1916908360028111156131405761314061425b565b021790555060208201518154829061ff0019166101008360028111156131685761316861425b565b0217905550604082015181546001600160a01b03909116620100000262010000600160b01b0319909116178155606082015180516131b091600184019160209091019061404b565b50608082015180516131cc91600284019160209091019061404b565b50505050613365565b8481815181106131e7576131e7614860565b6020026020010151606001515185828151811061320657613206614860565b60200260200101516080015151146132775760405162461bcd60e51b815260206004820152602e60248201527f43726166746572436f72653a20746f6b656e6964732e6c656e67746820213d2060448201526d0c2dadeeadce8e65cd8cadccee8d60931b606482015260840161083a565b61016185828151811061328c5761328c614860565b60209081029190910181015182546001818101855560009485529290932081516003909402018054919390929091839160ff19909116908360028111156132d5576132d561425b565b021790555060208201518154829061ff0019166101008360028111156132fd576132fd61425b565b0217905550604082015181546001600160a01b03909116620100000262010000600160b01b03199091161781556060820151805161334591600184019160209091019061404b565b506080820151805161336191600284019160209091019061404b565b5050505b8061336f81614a9a565b915050612c98565b509392505050565b60606000826001600160401b0381111561339b5761339b6140fa565b6040519080825280602002602001820160405280156133ce57816020015b60608152602001906001900390816133b95790505b5090506000805b865181101561351f5760018782815181106133f2576133f2614860565b602002602001015160000151600281111561340f5761340f61425b565b141561350d57856001600160401b0381111561342d5761342d6140fa565b604051908082528060200260200182016040528015613456578160200160208202803683370190505b5083838151811061346957613469614860565b602002602001018190525060005b868110156134fe5787828151811061349157613491614860565b60200260200101516080015181815181106134ae576134ae614860565b60200260200101518484815181106134c8576134c8614860565b602002602001015182815181106134e1576134e1614860565b6020908102919091010152806134f681614a9a565b915050613477565b508161350981614a9a565b9250505b8061351781614a9a565b9150506133d5565b509095945050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610c929085906135f1565b60608315613593575081612ab7565b8251156135a35782518084602001fd5b8160405162461bcd60e51b815260040161083a91906143cc565b600054610100900460ff1661084d5760405162461bcd60e51b815260040161083a90614981565b61084d82826101606136c3565b6000613646826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f039092919063ffffffff16565b8051909150156107b957808060200190518101906136649190614cae565b6107b95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161083a565b60005b82811015610c925760008484838181106136e2576136e2614860565b90506020028101906136f49190614f0b565b613702906020810190614f21565b905060008160028111156137185761371861425b565b141561393c5784848381811061373057613730614860565b90506020028101906137429190614f0b565b613750906080810190614d3b565b1590506137a95760405162461bcd60e51b815260206004820152602160248201527f506c7567696e73436f72653a20746f6b656e6964732e6c656e67746820213d206044820152600360fc1b606482015260840161083a565b8484838181106137bb576137bb614860565b90506020028101906137cd9190614f0b565b6137db906060810190614d3b565b905060011461382c5760405162461bcd60e51b815260206004820181905260248201527f506c7567696e73436f72653a20616d6f756e74732e6c656e67746820213d2031604482015260640161083a565b600085858481811061384057613840614860565b90506020028101906138529190614f0b565b613863906040810190602001614f21565b60028111156138745761387461425b565b14806138c55750600185858481811061388f5761388f614860565b90506020028101906138a19190614f0b565b6138b2906040810190602001614f21565b60028111156138c3576138c361425b565b145b6139375760405162461bcd60e51b815260206004820152603a60248201527f506c7567696e73436f72653a20455243323020636f6e73756d61626c6554797060448201527f65206e6f7420756e6166666563746564206f72206275726e6564000000000000606482015260840161083a565b613ea6565b60018160028111156139505761395061425b565b1415613ccf5784848381811061396857613968614860565b905060200281019061397a9190614f0b565b613988906080810190614d3b565b1590506139e15760405162461bcd60e51b815260206004820152602160248201527f506c7567696e73436f72653a20746f6b656e4964732e6c656e67746820213d206044820152600360fc1b606482015260840161083a565b60018585848181106139f5576139f5614860565b9050602002810190613a079190614f0b565b613a18906040810190602001614f21565b6002811115613a2957613a2961425b565b1480613a7a57506002858584818110613a4457613a44614860565b9050602002810190613a569190614f0b565b613a67906040810190602001614f21565b6002811115613a7857613a7861425b565b145b613ae55760405162461bcd60e51b815260206004820152603660248201527f506c7567696e73436f72653a2045524337323120636f6e73756d61626c6554796044820152757065206e6f74206275726e6564206f72204e54696d6560501b606482015260840161083a565b6002858584818110613af957613af9614860565b9050602002810190613b0b9190614f0b565b613b1c906040810190602001614f21565b6002811115613b2d57613b2d61425b565b1415613c4e57848483818110613b4557613b45614860565b9050602002810190613b579190614f0b565b613b65906060810190614d3b565b9050600114613be85760405162461bcd60e51b815260206004820152604360248201527f506c7567696e73436f72653a20616d6f756e74732e6c656e67746820213d203160448201527f3b20726571756972656420666f72204e54696d6520436f6e73756d61626c655460648201526279706560e81b608482015260a40161083a565b848483818110613bfa57613bfa614860565b9050602002810190613c0c9190614f0b565b613c1a906060810190614d3b565b6000818110613c2b57613c2b614860565b9050602002013560fb600084815260200190815260200160002081905550613ea6565b848483818110613c6057613c60614860565b9050602002810190613c729190614f0b565b613c80906060810190614d3b565b1590506139375760405162461bcd60e51b815260206004820181905260248201527f506c7567696e73436f72653a20616d6f756e74732e6c656e67746820213d2030604482015260640161083a565b848483818110613ce157613ce1614860565b9050602002810190613cf39190614f0b565b613d01906060810190614d3b565b9050858584818110613d1557613d15614860565b9050602002810190613d279190614f0b565b613d35906080810190614d3b565b905014613d9b5760405162461bcd60e51b815260206004820152602e60248201527f506c7567696e73436f72653a20746f6b656e6964732e6c656e67746820213d2060448201526d0c2dadeeadce8e65cd8cadccee8d60931b606482015260840161083a565b6000858584818110613daf57613daf614860565b9050602002810190613dc19190614f0b565b613dd2906040810190602001614f21565b6002811115613de357613de361425b565b1480613e3457506001858584818110613dfe57613dfe614860565b9050602002810190613e109190614f0b565b613e21906040810190602001614f21565b6002811115613e3257613e3261425b565b145b613ea65760405162461bcd60e51b815260206004820152603c60248201527f506c7567696e73436f72653a204552433131353520636f6e73756d61626c655460448201527f797065206e6f7420756e6166666563746564206f72206275726e656400000000606482015260840161083a565b82858584818110613eb957613eb9614860565b9050602002810190613ecb9190614f0b565b815460018101835560009283526020909220909160030201613eed8282614fc1565b5050508080613efb90614a9a565b9150506136c6565b6060613f128484600085613f1a565b949350505050565b606082471015613f7b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161083a565b6001600160a01b0385163b613fd25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161083a565b600080866001600160a01b03168587604051613fee9190614eef565b60006040518083038185875af1925050503d806000811461402b576040519150601f19603f3d011682016040523d82523d6000602084013e614030565b606091505b5091509150614040828286613584565b979650505050505050565b828054828255906000526020600020908101928215614086579160200282015b8281111561408657825182559160200191906001019061406b565b50614092929150614096565b5090565b5b808211156140925760008155600101614097565b6000602082840312156140bd57600080fd5b81356001600160e01b031981168114612ab757600080fd5b6001600160a01b038116811461091757600080fd5b80356140f5816140d5565b919050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715614132576141326140fa565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614160576141606140fa565b604052919050565b600082601f83011261417957600080fd5b81356001600160401b03811115614192576141926140fa565b6141a5601f8201601f1916602001614138565b8181528460208386010111156141ba57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156141ed57600080fd5b84356141f8816140d5565b93506020850135614208816140d5565b92506040850135915060608501356001600160401b0381111561422a57600080fd5b61423687828801614168565b91505092959194509250565b60006020828403121561425457600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061091757634e487b7160e01b600052602160045260246000fd5b600081518084526020808501945080840160005b838110156142bf578151875295820195908201906001016142a3565b509495945050505050565b6142d386614271565b8581526142df85614271565b84602082015260018060a01b038416604082015260a06060820152600061430960a083018561428f565b828103608084015261431b818561428f565b98975050505050505050565b6000806040838503121561433a57600080fd5b82359150602083013561434c816140d5565b809150509250929050565b60006020828403121561436957600080fd5b8135612ab7816140d5565b60005b8381101561438f578181015183820152602001614377565b83811115610c925750506000910152565b600081518084526143b8816020860160208601614374565b601f01601f19169290920160200192915050565b602081526000612ab760208301846143a0565b80356001600160601b03811681146140f557600080fd5b60008083601f84011261440857600080fd5b5081356001600160401b0381111561441f57600080fd5b6020830191508360208260051b850101111561443a57600080fd5b9250929050565b60008060008060008060008060c0898b03121561445d57600080fd5b8835614468816140d5565b97506020890135614478816140d5565b965061448660408a016143df565b955060608901356001600160401b03808211156144a257600080fd5b6144ae8c838d016143f6565b909750955060808b01359150808211156144c757600080fd5b506144d48b828c016143f6565b90945092505060a08901356144e8816140d5565b809150509295985092959890939650565b6000806040838503121561450c57600080fd5b8235614517816140d5565b915060208301356001600160401b0381111561453257600080fd5b61453e85828601614168565b9150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156145fd57603f19898403018552815160a0815161458f81614271565b85528189015161459e81614271565b858a0152818801516001600160a01b0316888601526060808301518187018390526145cb8388018261428f565b92505050608080830151925085820381870152506145e9818361428f565b96890196945050509086019060010161456f565b509098975050505050505050565b60008060006040848603121561462057600080fd5b614629846143df565b925060208401356001600160401b0381111561464457600080fd5b614650868287016143f6565b9497909650939450505050565b60006001600160401b03821115614676576146766140fa565b5060051b60200190565b600082601f83011261469157600080fd5b813560206146a66146a18361465d565b614138565b82815260059290921b840181019181810190868411156146c557600080fd5b8286015b848110156146e057803583529183019183016146c9565b509695505050505050565b600080600080600060a0868803121561470357600080fd5b853561470e816140d5565b9450602086013561471e816140d5565b935060408601356001600160401b038082111561473a57600080fd5b61474689838a01614680565b9450606088013591508082111561475c57600080fd5b61476889838a01614680565b9350608088013591508082111561477e57600080fd5b5061478b88828901614168565b9150509295509295909350565b6000602082840312156147aa57600080fd5b612ab7826143df565b600080600080600060a086880312156147cb57600080fd5b85356147d6816140d5565b945060208601356147e6816140d5565b9350604086013592506060860135915060808601356001600160401b0381111561480f57600080fd5b61478b88828901614168565b7f4f574c50726f746f636f6c3a2f2f437261667465724d696e742f00000000000081526000825161485381601a850160208701614374565b91909101601a0192915050565b634e487b7160e01b600052603260045260246000fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600061491c6146a18461465d565b80848252602080830192508560051b85013681111561493a57600080fd5b855b818110156149755780356001600160401b0381111561495b5760008081fd5b61496736828a01614680565b86525093820193820161493c565b50919695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156149de57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001600160601b03808316818516808303821115614a1d57614a1d6149e5565b01949350505050565b60006001600160601b0383811690831681811015614a4657614a466149e5565b039392505050565b6000816000190483118215151615614a6857614a686149e5565b500290565b600082821015614a7f57614a7f6149e5565b500390565b634e487b7160e01b600052603160045260246000fd5b6000600019821415614aae57614aae6149e5565b5060010190565b6000815480845260208085019450836000528060002060005b838110156142bf57815487529582019560019182019101614ace565b6001600160a01b0385168152608060208201819052600090614b0e90830186614ab5565b8281036040840152614b20818661428f565b9050828103606084015261404081856143a0565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614b6c816017850160208801614374565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614b9d816028840160208801614374565b01602801949350505050565b6003811061091757600080fd5b6000614bc46146a18461465d565b80848252602080830192508560051b850136811115614be257600080fd5b855b818110156149755780356001600160401b0380821115614c045760008081fd5b818901915060a08236031215614c1a5760008081fd5b614c22614110565b8235614c2d81614ba9565b815282860135614c3c81614ba9565b818701526040614c4d8482016140ea565b9082015260608381013583811115614c655760008081fd5b614c7136828701614680565b82840152505060808084013583811115614c8b5760008081fd5b614c9736828701614680565b918301919091525087525050938201938201614be4565b600060208284031215614cc057600080fd5b81518015158114612ab757600080fd5b60008219821115614ce357614ce36149e5565b500190565b60208082526033908201527f506c7567696e73436f72653a2055736572206d697373696e67206d696e696d756040820152726d20746f6b656e2062616c616e63652873292160681b606082015260800190565b6000808335601e19843603018112614d5257600080fd5b8301803591506001600160401b03821115614d6c57600080fd5b6020019150600581901b360382131561443a57600080fd5b600060208284031215614d9657600080fd5b8151612ab7816140d5565b6001600160a01b0386811682528516602082015260a060408201819052600090614dcd90830186614ab5565b8281036060840152614ddf818661428f565b9050828103608084015261431b81856143a0565b604080825283519082018190526000906020906060840190828701845b82811015614e355781516001600160a01b031684529284019290840190600101614e10565b50505083810382850152614e498186614ab5565b9695505050505050565b60006020808385031215614e6657600080fd5b82516001600160401b03811115614e7c57600080fd5b8301601f81018513614e8d57600080fd5b8051614e9b6146a18261465d565b81815260059190911b82018301908381019087831115614eba57600080fd5b928401925b8284101561404057835182529284019290840190614ebf565b600081614ee757614ee76149e5565b506000190190565b60008251614f01818460208701614374565b9190910192915050565b60008235609e19833603018112614f0157600080fd5b600060208284031215614f3357600080fd5b8135612ab781614ba9565b68010000000000000000831115614f5757614f576140fa565b805483825580841015614f8e576000828152602081208581019083015b80821015614f8a57828255600182019150614f74565b5050505b5060008181526020812083915b85811015614fb9578235825560209092019160019182019101614f9b565b505050505050565b8135614fcc81614ba9565b614fd581614271565b815460ff821691508160ff1982161783556020840135614ff481614ba9565b614ffd81614271565b61ff008160081b169050808361ffff198416171784556040850135615021816140d5565b6001600160b01b0319929092169092179190911760109190911b62010000600160b01b03161781556150566060830183614d3b565b615064818360018601614f3e565b50506150736080830183614d3b565b610c92818360028601614f3e56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65647a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb2a26469706673582212209c2667eb88f8d6cb36bf2b06b4ceb08a8a06fef37857016b4c648fcf99471d3364736f6c63430008090033",
  "devdoc": {
    "details": "Contract module that enables crafting of different types of assets (ERC20, ERC721, ERC1155) whose crafting outputs are minted to the caller. Crafting configuration is designated by two {Ingredient}[]. One array is the `inputs` and the other is the `outputs`. The contract allows for the `inputs` to be redeemed for the `outputs`, `craftableAmount` times. ``` struct Ingredient {     TokenType token;     ConsumableType consumableType;     address contractAddr;     uint256[] amounts;     uint256[] tokenIds; } ``` Configuration is set in the initializers and cannot be edited once the contract has been launched Other configurations will require their own contract to be deployed However, `craftableAmount` can be dynamically updated through the {deposit} and {withdraw} functions which are only accessible to `DEFAULT_ADMIN_ROLE` Each Ingredient has a `consumableType` field.* This field is for the `inputs` elements and ignored by the `outputs` elements. ERC20 and ERC1155 `inputs` elements can be `unaffected` or `burned`. `unaffected` will check for ownership/balance while `burned` will send the asset(s) to the `burnAddress`. ERC721 inputs can be `NTime` or `burned`. `NTime` allows for a specfic `tokenId` to only be used 'n times', as defined by contract deployer. ERC20 `inputs` and `outputs` elements should have one number in the `amounts` array denoting ERC20 token amount requirement.* `tokenIds` should be empty. NTime consumable type ERC721 inputs should have empty `tokenIds` and `amounts[0]` equal to `n` - the maximum number of times the input can be used.* Burned ERC721 `inputs` elements should have * empty `amounts` and `tokenIds` array. This contract accepts *all* `tokenId`s from an ERC721 contract as inputs. ERC721 `outputs` elements must have empty `amounts` array. `tokenIds` array length should be `craftableAmount`. The `tokenIds` array will contain the `tokenIds` to be transferred out when {craft} is called. Important to note that output transfers will be from the *end* of the array since `.pop()` is used. ERC1155 `inputs` and `outputs` elements should have the length of `amounts` and `tokenIds` array be the same. The indices will be linked where each index denotes how much of each ERC1155 `tokenId` is required. This module is used through composition. It can be deployed to create crafting logic with asset contracts that are already on chain and active; plug-and-play, so to speak.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "craft(uint96,uint256[][])": {
        "details": "Used to craft. Consumes inputs and mints outputs.",
        "params": {
          "_inputERC721Ids": "Array of pre-approved NFTs for crafting usage. Example of `_inputERC721Ids` with `amount = 2` with 3 `Ingredient`s in `inputs` with `TokenType.ERC721` ``` [  [1, 2]  [3, 4]  [5, 6] ] ```",
          "amount": "How many times to craft"
        }
      },
      "deposit(uint96,uint256[][])": {
        "details": "Used to deposit configuration outputs.",
        "params": {
          "_outputsERC721Ids": "2D-array of ERC721 tokens used in crafting Example of `_outputERC721Ids` with `amount = 2` with 3 `Ingredient`s in `outputs` with `TokenType.ERC721` ``` [  [1, 2]  [3, 4]  [5, 6] ] ```",
          "amount": "How many more times the configuration should be craftable"
        }
      },
      "getInputIngredient(uint256)": {
        "details": "Returns all details for a specific ingredient (including amounts/tokenIds)",
        "params": {
          "index": "ingredient index to return details for"
        },
        "returns": {
          "amounts": "amount of each token",
          "consumableType": "consumable type",
          "contractAddr": "token contract address",
          "token": "token type",
          "tokenIds": "token ids"
        }
      },
      "getInputs()": {
        "details": "Returns all inputs (without `amounts` or `tokenIds`)"
      },
      "getOutputIngredient(uint256)": {
        "details": "Returns all details for a specific ingredient (including amounts/tokenIds)",
        "params": {
          "index": "ingredient index to return details for"
        },
        "returns": {
          "amounts": "amount of each token",
          "consumableType": "consumable type",
          "contractAddr": "token contract address",
          "token": "token type",
          "tokenIds": "token ids"
        }
      },
      "getOutputs()": {
        "details": "Returns all outputs (without `amounts` or `tokenIds`)"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "grantRouter(address)": {
        "details": "Grants ROUTER_ROLE to {a}",
        "params": {
          "to": "address to"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint96,(uint8,uint8,address,uint256[],uint256[])[],(uint8,uint8,address,uint256[],uint256[])[],address)": {
        "details": "Initializes contract (replaces constructor in proxy pattern)",
        "params": {
          "_admin": "owner, can control outputs on contract",
          "_burnAddress": "Burn address for burn inputs",
          "_craftableAmount": "limit on the number of times this configuration can be crafted",
          "_forwarder": "trusted forwarder address for openGSN",
          "_inputs": "inputs for configuration",
          "_outputs": "outputs for configuration"
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Return trusted forwarder status."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "proxyInitialize(address,address,uint96,(uint8,uint8,address,uint256[],uint256[])[],(uint8,uint8,address,uint256[],uint256[])[],address)": {
        "details": "Initializes contract through beacon proxy (replaces constructor in proxy pattern)"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "ERC165 Support",
        "params": {
          "interfaceId": "hash of the interface testing for"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint96)": {
        "details": "Used to withdraw configuration outputs out of contract by decreasing `craftableAmount`.",
        "params": {
          "amount": "How many sets of outputs should be withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "craft(uint96,uint256[][])": {
        "notice": "Craft `amount`"
      },
      "deposit(uint96,uint256[][])": {
        "notice": "Must be `DEFAULT_ADMIN_ROLE`."
      },
      "grantRouter(address)": {
        "notice": "Must have owner role"
      },
      "isTrustedForwarder(address)": {
        "notice": "**REQUIRED FOR GSN**"
      },
      "withdraw(uint96)": {
        "notice": "Must be `DEFAULT_ADMIN_ROLE`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3091,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3094,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3073,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3370,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7537,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7941,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2110,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2105_storage)"
      },
      {
        "astId": 2409,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 21452,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "nUse",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 21458,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "usedERC721Inputs",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 22036,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 7252,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17622,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "burnAddress",
        "offset": 0,
        "slot": "351",
        "type": "t_address"
      },
      {
        "astId": 17624,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "craftableAmount",
        "offset": 20,
        "slot": "351",
        "type": "t_uint96"
      },
      {
        "astId": 17628,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "inputs",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_struct(Ingredient)21448_storage)dyn_storage"
      },
      {
        "astId": 17632,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "outputs",
        "offset": 0,
        "slot": "353",
        "type": "t_array(t_struct(Ingredient)21448_storage)dyn_storage"
      },
      {
        "astId": 18143,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "__gap",
        "offset": 0,
        "slot": "354",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 5007,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "__gap",
        "offset": 0,
        "slot": "400",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4953,
        "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
        "label": "__gap",
        "offset": 0,
        "slot": "450",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Ingredient)21448_storage)dyn_storage": {
        "base": "t_struct(Ingredient)21448_storage",
        "encoding": "dynamic_array",
        "label": "struct PluginsCore.Ingredient[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ConsumableType)21429": {
        "encoding": "inplace",
        "label": "enum PluginsCore.ConsumableType",
        "numberOfBytes": "1"
      },
      "t_enum(TokenType)21433": {
        "encoding": "inplace",
        "label": "enum PluginsCore.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2105_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2105_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Ingredient)21448_storage": {
        "encoding": "inplace",
        "label": "struct PluginsCore.Ingredient",
        "members": [
          {
            "astId": 21436,
            "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TokenType)21433"
          },
          {
            "astId": 21439,
            "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
            "label": "consumableType",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(ConsumableType)21429"
          },
          {
            "astId": 21441,
            "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
            "label": "contractAddr",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21444,
            "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
            "label": "amounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 21447,
            "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
            "label": "tokenIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)2105_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 2102,
            "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2104,
            "contract": "contracts/plugins/Crafter/CrafterMint.sol:CrafterMint",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}