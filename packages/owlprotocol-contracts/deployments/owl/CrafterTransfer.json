{
  "address": "0x9375400526B841C045BF40C799ABB8e6fAcA4148",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum CraftLib.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum CraftLib.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct CraftLib.Ingredient[]",
          "name": "inputs",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum CraftLib.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum CraftLib.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct CraftLib.Ingredient[]",
          "name": "outputs",
          "type": "tuple[]"
        }
      ],
      "name": "CreateRecipe",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "craftedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "craftableAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "RecipeCraft",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "craftableAmount",
          "type": "uint256"
        }
      ],
      "name": "RecipeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "burnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "craftAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint256[][]",
          "name": "_inputERC721Ids",
          "type": "uint256[][]"
        }
      ],
      "name": "craft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "craftableAmount",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "depositAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint256[][]",
          "name": "_outputsERC721Ids",
          "type": "uint256[][]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getInputIngredient",
      "outputs": [
        {
          "internalType": "enum CraftLib.TokenType",
          "name": "token",
          "type": "uint8"
        },
        {
          "internalType": "enum CraftLib.ConsumableType",
          "name": "consumableType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInputs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum CraftLib.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum CraftLib.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct CraftLib.Ingredient[]",
          "name": "_inputs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getOutputIngredient",
      "outputs": [
        {
          "internalType": "enum CraftLib.TokenType",
          "name": "token",
          "type": "uint8"
        },
        {
          "internalType": "enum CraftLib.ConsumableType",
          "name": "consumableType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOutputs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum CraftLib.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum CraftLib.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct CraftLib.Ingredient[]",
          "name": "_outputs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_burnAddress",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_craftableAmount",
          "type": "uint96"
        },
        {
          "components": [
            {
              "internalType": "enum CraftLib.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum CraftLib.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct CraftLib.Ingredient[]",
          "name": "_inputs",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum CraftLib.TokenType",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "enum CraftLib.ConsumableType",
              "name": "consumableType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct CraftLib.Ingredient[]",
          "name": "_outputs",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "withdrawAmount",
          "type": "uint96"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6aa0ba6a78de2c5b3502941822939f2d4724827e7986c10a675c7fb84bfcc751",
  "receipt": {
    "to": null,
    "from": "0x6fd935c3BbbDf664b67e28B14236a66a7588D683",
    "contractAddress": "0x9375400526B841C045BF40C799ABB8e6fAcA4148",
    "transactionIndex": 0,
    "gasUsed": "4402378",
    "logsBloom": "0x
    "blockHash": "0x30c2264bf74226890bf278ba0ecd060bc4562515efe39d530304b89832f80bd2",
    "transactionHash": "0x6aa0ba6a78de2c5b3502941822939f2d4724827e7986c10a675c7fb84bfcc751",
    "logs": [],
    "blockNumber": 1390833,
    "cumulativeGasUsed": "4402378",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2d4e71ad5a30e357ffb69c5f11fb36ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum CraftLib.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum CraftLib.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct CraftLib.Ingredient[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum CraftLib.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum CraftLib.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct CraftLib.Ingredient[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"name\":\"CreateRecipe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"craftedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"craftableAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RecipeCraft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"craftableAmount\",\"type\":\"uint256\"}],\"name\":\"RecipeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"craftAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint256[][]\",\"name\":\"_inputERC721Ids\",\"type\":\"uint256[][]\"}],\"name\":\"craft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"craftableAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"depositAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint256[][]\",\"name\":\"_outputsERC721Ids\",\"type\":\"uint256[][]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInputIngredient\",\"outputs\":[{\"internalType\":\"enum CraftLib.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum CraftLib.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInputs\",\"outputs\":[{\"components\":[{\"internalType\":\"enum CraftLib.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum CraftLib.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CraftLib.Ingredient[]\",\"name\":\"_inputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOutputIngredient\",\"outputs\":[{\"internalType\":\"enum CraftLib.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum CraftLib.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOutputs\",\"outputs\":[{\"components\":[{\"internalType\":\"enum CraftLib.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum CraftLib.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CraftLib.Ingredient[]\",\"name\":\"_outputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_craftableAmount\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"enum CraftLib.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum CraftLib.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CraftLib.Ingredient[]\",\"name\":\"_inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum CraftLib.TokenType\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"enum CraftLib.ConsumableType\",\"name\":\"consumableType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CraftLib.Ingredient[]\",\"name\":\"_outputs\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"withdrawAmount\",\"type\":\"uint96\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Pluggable Crafting Contract.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"craft(uint96,uint256[][])\":{\"details\":\"Used to craft. Consumes inputs and transfers outputs.\",\"params\":{\"_inputERC721Ids\":\"Array of pre-approved NFTs for crafting usage.\",\"craftAmount\":\"How many times to craft\"}},\"deposit(uint96,uint256[][])\":{\"details\":\"Used to deposit recipe outputs.\",\"params\":{\"_outputsERC721Ids\":\"2D-array of ERC721 tokens used in crafting\",\"depositAmount\":\"How many times the recipe should be craftable\"}},\"getInputIngredient(uint256)\":{\"details\":\"Returns all details for a specific ingredient (including amounts/tokenIds)\",\"params\":{\"index\":\"ingredient index to return details for\"},\"returns\":{\"amounts\":\"amount of each token\",\"consumableType\":\"consumable type\",\"contractAddr\":\"token contract address\",\"token\":\"token type\",\"tokenIds\":\"token ids\"}},\"getInputs()\":{\"details\":\"Returns all inputs (without `amounts` or `tokenIds`)\"},\"getOutputIngredient(uint256)\":{\"details\":\"Returns all details for a specific ingredient (including amounts/tokenIds)\",\"params\":{\"index\":\"ingredient index to return details for\"},\"returns\":{\"amounts\":\"amount of each token\",\"consumableType\":\"consumable type\",\"contractAddr\":\"token contract address\",\"token\":\"token type\",\"tokenIds\":\"token ids\"}},\"getOutputs()\":{\"details\":\"Returns all outputs (without `amounts` or `tokenIds`)\"},\"initialize(address,address,uint96,(uint8,uint8,address,uint256[],uint256[])[],(uint8,uint8,address,uint256[],uint256[])[])\":{\"details\":\"Configures crafting recipe with inputs/outputs\",\"params\":{\"_burnAddress\":\"Burn address for burn inputs\",\"_inputs\":\"inputs for recipe\",\"_outputs\":\"outputs for recipe\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint96)\":{\"details\":\"Used to withdraw recipe outputs. Reverse logic as deposit().\",\"params\":{\"withdrawAmount\":\"How many times the craft outputs should be withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"craft(uint96,uint256[][])\":{\"notice\":\"Craft {craftAmount}\"},\"deposit(uint96,uint256[][])\":{\"notice\":\"Must be recipe creator. Automatically sends from `msg.sender`\"},\"initialize(address,address,uint96,(uint8,uint8,address,uint256[],uint256[])[],(uint8,uint8,address,uint256[],uint256[])[])\":{\"notice\":\"Create recipe\"},\"withdraw(uint96)\":{\"notice\":\"Must be recipe creator\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/plugins/Crafter/CrafterTransfer.sol\":\"CrafterTransfer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/plugins/Crafter/CraftLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Basic crafting structures used through NFTCrafting contracts.\\n *\\n */\\nlibrary CraftLib {\\n    // Recipe Components\\n    enum ConsumableType {\\n        unaffected,\\n        burned,\\n        locked,\\n        NTime\\n    }\\n\\n    // Token Types\\n    enum TokenType {\\n        erc20,\\n        erc721,\\n        erc1155\\n    }\\n\\n    struct Ingredient {\\n        TokenType token;\\n        ConsumableType consumableType;\\n        address contractAddr;\\n        uint256[] amounts;\\n        uint256[] tokenIds;\\n    }\\n}\\n\",\"keccak256\":\"0x598f3b0c3578a6d4084c37edd81098076185327c04c6efecc1b1282293a82ca2\",\"license\":\"MIT\"},\"contracts/plugins/Crafter/CrafterTransfer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\n\\nimport './ICrafter.sol';\\nimport './CraftLib.sol';\\n\\n/**\\n * @dev Pluggable Crafting Contract.\\n */\\ncontract CrafterTransfer is\\n    ICrafter,\\n    ERC721HolderUpgradeable,\\n    ERC1155HolderUpgradeable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable\\n{\\n    /**********************\\n             Types\\n    **********************/\\n\\n    event CreateRecipe(address indexed creator, CraftLib.Ingredient[] inputs, CraftLib.Ingredient[] outputs);\\n    event RecipeUpdate(uint256 craftableAmount);\\n    event RecipeCraft(uint256 craftedAmount, uint256 craftableAmount, address indexed user);\\n\\n    address public burnAddress;\\n    uint96 public craftableAmount;\\n\\n    CraftLib.Ingredient[] private inputs;\\n    CraftLib.Ingredient[] private outputs;\\n\\n    mapping(uint256 => uint256) nUse; //maps ingredient to nUSE (max count grabbed from amount[0])\\n    mapping(address => mapping(uint256 => uint256)) usedERC721Inputs; //maps a contract address to a tokenId to nUsed which we increment\\n\\n    /**********************\\n        Initialization\\n    **********************/\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Create recipe\\n     * @dev Configures crafting recipe with inputs/outputs\\n     * @param _burnAddress Burn address for burn inputs\\n     * @param _inputs inputs for recipe\\n     * @param _outputs outputs for recipe\\n     */\\n    function initialize(\\n        address _admin,\\n        address _burnAddress,\\n        uint96 _craftableAmount,\\n        CraftLib.Ingredient[] calldata _inputs,\\n        CraftLib.Ingredient[] calldata _outputs\\n    ) public initializer {\\n        // Requires\\n        require(_burnAddress != address(0), 'CrafterTransfer: burn address must not be 0');\\n        require(_inputs.length > 0, 'CrafterTransfer: A crafting input must be given!');\\n        require(_outputs.length > 0, 'CrafterTransfer: A crafting output must be given!');\\n\\n        __Ownable_init();\\n        _transferOwnership(_admin);\\n\\n        burnAddress = _burnAddress;\\n\\n        // NOTE - deep copies arrays\\n        // Inputs validations\\n        for (uint256 i = 0; i < _inputs.length; i++) {\\n            if (_inputs[i].token == CraftLib.TokenType.erc20) {\\n                require(_inputs[i].tokenIds.length == 0, 'CrafterTransfer: tokenids.length != 0');\\n                require(_inputs[i].amounts.length == 1, 'CrafterTransfer: amounts.length != 1');\\n            } else if (_inputs[i].token == CraftLib.TokenType.erc721) {\\n                //accept all token ids as inputs\\n                require(_inputs[i].tokenIds.length == 0, 'CrafterTransfer: tokenIds.length != 0');\\n\\n                //modified to support NTime\\n                if (_inputs[i].consumableType == CraftLib.ConsumableType.NTime) {\\n                    require(\\n                        _inputs[i].amounts.length == 1,\\n                        'CrafterTransfer: amounts.length != 1; required for NTime ConsumableType'\\n                    );\\n                    nUse[i] = _inputs[i].amounts[0];\\n                } else require(_inputs[i].amounts.length == 0, 'CrafterTransfer: amounts.length != 1 or 0');\\n            } else if (_inputs[i].token == CraftLib.TokenType.erc1155) {\\n                require(\\n                    _inputs[i].tokenIds.length == _inputs[i].amounts.length,\\n                    'CrafterTransfer: tokenids.length != amounts.length'\\n                );\\n            }\\n            inputs.push(_inputs[i]);\\n        }\\n\\n        uint256 erc721amount = 0;\\n\\n        // Outputs validations\\n        for (uint256 i = 0; i < _outputs.length; i++) {\\n            if (_outputs[i].token == CraftLib.TokenType.erc20) {\\n                require(_outputs[i].tokenIds.length == 0, 'CrafterTransfer: tokenids.length != 0');\\n                require(_outputs[i].amounts.length == 1, 'CrafterTransfer: amounts.length != 1');\\n                outputs.push(_outputs[i]);\\n            } else if (_outputs[i].token == CraftLib.TokenType.erc721) {\\n                require(\\n                    _outputs[i].tokenIds.length == _craftableAmount,\\n                    'CrafterTransfer: tokenids.length != _craftableAmount'\\n                );\\n                require(_outputs[i].amounts.length == 0, 'CrafterTransfer: amounts.length != 0');\\n                erc721amount++;\\n                //Copy token data but set tokenIds as empty (these are filled out in the _deposit function call)\\n                CraftLib.Ingredient memory x = CraftLib.Ingredient({\\n                    token: CraftLib.TokenType.erc721,\\n                    consumableType: _outputs[i].consumableType,\\n                    contractAddr: _outputs[i].contractAddr,\\n                    amounts: new uint256[](0),\\n                    tokenIds: new uint256[](0)\\n                });\\n                outputs.push(x);\\n            } else if (_outputs[i].token == CraftLib.TokenType.erc1155) {\\n                require(\\n                    _outputs[i].tokenIds.length == _outputs[i].amounts.length,\\n                    'CrafterTransfer: tokenids.length != amounts.length'\\n                );\\n                outputs.push(_outputs[i]);\\n            }\\n        }\\n\\n        uint256[][] memory _outputsERC721Ids = new uint256[][](erc721amount);\\n        uint256 outputERC721index = 0;\\n\\n        for (uint256 i = 0; i < _outputs.length; i++) {\\n            if (_outputs[i].token == CraftLib.TokenType.erc721) {\\n                _outputsERC721Ids[outputERC721index] = new uint256[](_craftableAmount);\\n                for (uint256 j = 0; j < _craftableAmount; j++) {\\n                    _outputsERC721Ids[outputERC721index][j] = _outputs[i].tokenIds[j];\\n                }\\n                outputERC721index++;\\n            }\\n        }\\n\\n        if (_craftableAmount > 0) _deposit(_craftableAmount, _outputsERC721Ids, _admin);\\n\\n        emit CreateRecipe(_msgSender(), _inputs, _outputs);\\n    }\\n\\n    /**********************\\n            Getters\\n    **********************/\\n\\n    /**\\n     * @dev Returns all inputs (without `amounts` or `tokenIds`)\\n     */\\n    function getInputs() public view returns (CraftLib.Ingredient[] memory _inputs) {\\n        return inputs;\\n    }\\n\\n    /**\\n     * @dev Returns all outputs (without `amounts` or `tokenIds`)\\n     */\\n    function getOutputs() public view returns (CraftLib.Ingredient[] memory _outputs) {\\n        return outputs;\\n    }\\n\\n    /**\\n     * @dev Returns all details for a specific ingredient (including amounts/tokenIds)\\n     * @param index ingredient index to return details for\\n     * @return token token type\\n     * @return consumableType consumable type\\n     * @return contractAddr token contract address\\n     * @return amounts amount of each token\\n     * @return tokenIds token ids\\n     */\\n    function getInputIngredient(uint256 index)\\n        public\\n        view\\n        returns (\\n            CraftLib.TokenType token,\\n            CraftLib.ConsumableType consumableType,\\n            address contractAddr,\\n            uint256[] memory amounts,\\n            uint256[] memory tokenIds\\n        )\\n    {\\n        CraftLib.Ingredient storage i = inputs[index];\\n\\n        return (i.token, i.consumableType, i.contractAddr, i.amounts, i.tokenIds);\\n    }\\n\\n    /**\\n     * @dev Returns all details for a specific ingredient (including amounts/tokenIds)\\n     * @param index ingredient index to return details for\\n     * @return token token type\\n     * @return consumableType consumable type\\n     * @return contractAddr token contract address\\n     * @return amounts amount of each token\\n     * @return tokenIds token ids\\n     */\\n    function getOutputIngredient(uint256 index)\\n        public\\n        view\\n        returns (\\n            CraftLib.TokenType token,\\n            CraftLib.ConsumableType consumableType,\\n            address contractAddr,\\n            uint256[] memory amounts,\\n            uint256[] memory tokenIds\\n        )\\n    {\\n        CraftLib.Ingredient storage i = outputs[index];\\n\\n        return (i.token, i.consumableType, i.contractAddr, i.amounts, i.tokenIds);\\n    }\\n\\n    /**********************\\n         Interaction\\n    **********************/\\n\\n    /**\\n     * @notice Must be recipe creator. Automatically sends from `msg.sender`\\n     * @dev Used to deposit recipe outputs.\\n     * @param depositAmount How many times the recipe should be craftable\\n     * @param _outputsERC721Ids 2D-array of ERC721 tokens used in crafting\\n     */\\n    function deposit(uint96 depositAmount, uint256[][] calldata _outputsERC721Ids) public onlyOwner {\\n        _deposit(depositAmount, _outputsERC721Ids, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Must be recipe creator\\n     * @dev Used to deposit recipe outputs\\n     * @param depositAmount How many times the recipe should be craftable\\n     * @param _outputsERC721Ids 2D-array of ERC721 tokens used in crafting\\n     * @param from address to transfer tokens from\\n     */\\n    function _deposit(\\n        uint96 depositAmount,\\n        uint256[][] memory _outputsERC721Ids,\\n        address from\\n    ) internal {\\n        //Requires\\n        require(depositAmount > 0, 'CrafterTransfer: depositAmount cannot be 0!');\\n\\n        uint256 erc721Outputs = 0;\\n\\n        for (uint256 i = 0; i < outputs.length; i++) {\\n            CraftLib.Ingredient storage ingredient = outputs[i];\\n            if (ingredient.token == CraftLib.TokenType.erc20) {\\n                //Transfer ERC20\\n                SafeERC20Upgradeable.safeTransferFrom(\\n                    IERC20Upgradeable(ingredient.contractAddr),\\n                    from,\\n                    address(this),\\n                    ingredient.amounts[0] * depositAmount\\n                );\\n            } else if (ingredient.token == CraftLib.TokenType.erc721) {\\n                //Transfer ERC721\\n                require(\\n                    _outputsERC721Ids[erc721Outputs].length == depositAmount,\\n                    'CrafterTransfer: _outputsERC721Ids[i] != depositAmount'\\n                );\\n                for (uint256 j = 0; j < _outputsERC721Ids[erc721Outputs].length; j++) {\\n                    IERC721Upgradeable(ingredient.contractAddr).safeTransferFrom(\\n                        from,\\n                        address(this),\\n                        _outputsERC721Ids[erc721Outputs][j]\\n                    );\\n                    //Update ingredient, push additional ERC721 tokenId\\n                    ingredient.tokenIds.push(_outputsERC721Ids[erc721Outputs][j]);\\n                }\\n                erc721Outputs += 1;\\n            } else if (ingredient.token == CraftLib.TokenType.erc1155) {\\n                //Transfer ERC1155\\n                uint256[] memory amounts = new uint256[](ingredient.amounts.length);\\n                for (uint256 j = 0; j < ingredient.amounts.length; j++) {\\n                    amounts[j] = ingredient.amounts[j] * depositAmount;\\n                }\\n                IERC1155Upgradeable(ingredient.contractAddr).safeBatchTransferFrom(\\n                    from,\\n                    address(this),\\n                    ingredient.tokenIds,\\n                    amounts,\\n                    new bytes(0)\\n                );\\n            }\\n        }\\n\\n        // Increase craftableAmount (after transfers have confirmed, prevent reentry)\\n        craftableAmount += depositAmount;\\n        emit RecipeUpdate(craftableAmount);\\n    }\\n\\n    /**\\n     * @notice Must be recipe creator\\n     * @dev Used to withdraw recipe outputs. Reverse logic as deposit().\\n     * @param withdrawAmount How many times the craft outputs should be withdrawn\\n     */\\n    function withdraw(uint96 withdrawAmount) external onlyOwner {\\n        // Requires\\n        require(withdrawAmount > 0, 'CrafterTransfer: withdrawAmount cannot be 0!');\\n        require(withdrawAmount <= craftableAmount, 'CrafterTransfer: Not enough resources!');\\n\\n        // Decrease craftableAmount (check-effects)\\n        craftableAmount -= withdrawAmount;\\n\\n        for (uint256 i = 0; i < outputs.length; i++) {\\n            CraftLib.Ingredient storage ingredient = outputs[i];\\n            if (ingredient.token == CraftLib.TokenType.erc20) {\\n                //Transfer ERC20\\n                SafeERC20Upgradeable.safeTransfer(\\n                    IERC20Upgradeable(ingredient.contractAddr),\\n                    _msgSender(),\\n                    ingredient.amounts[0] * withdrawAmount\\n                );\\n            } else if (ingredient.token == CraftLib.TokenType.erc721) {\\n                for (uint256 j = 0; j < withdrawAmount; j++) {\\n                    IERC721Upgradeable(ingredient.contractAddr).safeTransferFrom(\\n                        address(this),\\n                        _msgSender(),\\n                        ingredient.tokenIds[ingredient.tokenIds.length - 1]\\n                    );\\n                    ingredient.tokenIds.pop();\\n                }\\n            } else if (ingredient.token == CraftLib.TokenType.erc1155) {\\n                //Transfer ERC1155\\n                uint256[] memory amounts = new uint256[](ingredient.amounts.length);\\n                for (uint256 j = 0; j < ingredient.amounts.length; j++) {\\n                    amounts[j] = ingredient.amounts[j] * withdrawAmount;\\n                }\\n                IERC1155Upgradeable(ingredient.contractAddr).safeBatchTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    ingredient.tokenIds,\\n                    amounts,\\n                    new bytes(0)\\n                );\\n            }\\n        }\\n\\n        emit RecipeUpdate(craftableAmount);\\n    }\\n\\n    /**\\n     * @notice Craft {craftAmount}\\n     * @dev Used to craft. Consumes inputs and transfers outputs.\\n     * @param craftAmount How many times to craft\\n     * @param _inputERC721Ids Array of pre-approved NFTs for crafting usage.\\n     */\\n    function craft(uint96 craftAmount, uint256[][] calldata _inputERC721Ids) public {\\n        // Requires\\n        require(craftAmount > 0, 'CrafterTransfer: craftAmount cannot be 0!');\\n        require(craftAmount <= craftableAmount, 'CrafterTransfer: Not enough resources to craft!');\\n\\n        // Update crafting stats (check-effects)\\n        craftableAmount -= craftAmount;\\n\\n        //Track ERC721 inputs idx\\n        uint256 erc721Inputs = 0;\\n\\n        //Transfer inputs\\n        for (uint256 i = 0; i < inputs.length; i++) {\\n            CraftLib.Ingredient storage ingredient = inputs[i];\\n            if (ingredient.token == CraftLib.TokenType.erc20) {\\n                //ERC20\\n                if (ingredient.consumableType == CraftLib.ConsumableType.burned) {\\n                    //Transfer ERC20\\n                    SafeERC20Upgradeable.safeTransferFrom(\\n                        IERC20Upgradeable(ingredient.contractAddr),\\n                        _msgSender(),\\n                        burnAddress,\\n                        ingredient.amounts[0] * craftAmount\\n                    );\\n                } else if (ingredient.consumableType == CraftLib.ConsumableType.unaffected) {\\n                    //Check ERC20\\n                    require(\\n                        IERC20Upgradeable(ingredient.contractAddr).balanceOf(_msgSender()) >=\\n                            ingredient.amounts[0] * craftAmount,\\n                        'CrafterTransfer: User missing minimum token balance(s)!'\\n                    );\\n                }\\n            } else if (ingredient.token == CraftLib.TokenType.erc721) {\\n                //ERC721\\n                require(\\n                    _inputERC721Ids[erc721Inputs].length == craftAmount,\\n                    'CrafterTransfer: _inputERC721Ids[i] != craftAmount'\\n                );\\n                uint256[] memory currInputArr = _inputERC721Ids[erc721Inputs];\\n                if (ingredient.consumableType == CraftLib.ConsumableType.burned) {\\n                    //Transfer ERC721\\n                    for (uint256 j = 0; j < currInputArr.length; j++) {\\n                        IERC721Upgradeable(ingredient.contractAddr).safeTransferFrom(\\n                            _msgSender(),\\n                            burnAddress,\\n                            _inputERC721Ids[erc721Inputs][j]\\n                        );\\n                    }\\n                } else if (ingredient.consumableType == CraftLib.ConsumableType.unaffected) {\\n                    //Check ERC721\\n                    for (uint256 j = 0; j < currInputArr.length; j++) {\\n                        require(\\n                            IERC721Upgradeable(ingredient.contractAddr).ownerOf(currInputArr[j]) == _msgSender(),\\n                            'CrafterTransfer: User does not own token(s)!'\\n                        );\\n                    }\\n                } else if (ingredient.consumableType == CraftLib.ConsumableType.NTime) {\\n                    //Check ERC721\\n                    for (uint256 j = 0; j < currInputArr.length; j++) {\\n                        require(\\n                            IERC721Upgradeable(ingredient.contractAddr).ownerOf(currInputArr[j]) == _msgSender(),\\n                            'CrafterTransfer: User does not own token(s)!'\\n                        );\\n                        uint256 currTokenID = currInputArr[j];\\n                        require(\\n                            (usedERC721Inputs[ingredient.contractAddr])[currTokenID] < nUse[i],\\n                            'CrafterTransfer: Used over the limit of n'\\n                        );\\n                        (usedERC721Inputs[ingredient.contractAddr])[currTokenID] += 1;\\n                    }\\n                }\\n                erc721Inputs += 1;\\n            } else if (ingredient.token == CraftLib.TokenType.erc1155) {\\n                //ERC1155\\n                if (ingredient.consumableType == CraftLib.ConsumableType.burned) {\\n                    //Transfer ERC1155\\n                    uint256[] memory amounts = new uint256[](ingredient.amounts.length);\\n                    for (uint256 j = 0; j < ingredient.amounts.length; j++) {\\n                        amounts[j] = ingredient.amounts[j] * craftAmount;\\n                    }\\n                    IERC1155Upgradeable(ingredient.contractAddr).safeBatchTransferFrom(\\n                        _msgSender(),\\n                        burnAddress,\\n                        ingredient.tokenIds,\\n                        amounts,\\n                        new bytes(0)\\n                    );\\n                } else if (ingredient.consumableType == CraftLib.ConsumableType.unaffected) {\\n                    //Check ERC1155\\n                    uint256[] memory amounts = new uint256[](ingredient.amounts.length);\\n                    address[] memory accounts = new address[](ingredient.amounts.length);\\n                    for (uint256 j = 0; j < ingredient.amounts.length; j++) {\\n                        amounts[j] = ingredient.amounts[j] * craftAmount;\\n                        accounts[j] = _msgSender();\\n                    }\\n\\n                    uint256[] memory balances = IERC1155Upgradeable(ingredient.contractAddr).balanceOfBatch(\\n                        accounts,\\n                        ingredient.tokenIds\\n                    );\\n                    for (uint256 j = 0; j < balances.length; j++) {\\n                        require(balances[j] >= amounts[j], 'CrafterTransfer: User missing minimum token balance(s)!');\\n                    }\\n                }\\n            }\\n        }\\n\\n        //Transfer outputs\\n        for (uint256 i = 0; i < outputs.length; i++) {\\n            CraftLib.Ingredient storage ingredient = outputs[i];\\n            if (ingredient.token == CraftLib.TokenType.erc20) {\\n                //Transfer ERC20\\n                SafeERC20Upgradeable.safeTransfer(\\n                    IERC20Upgradeable(ingredient.contractAddr),\\n                    _msgSender(),\\n                    ingredient.amounts[0] * craftAmount\\n                );\\n            } else if (ingredient.token == CraftLib.TokenType.erc721) {\\n                //Pop token ids from storage\\n                for (uint256 j = 0; j < craftAmount; j++) {\\n                    IERC721Upgradeable(ingredient.contractAddr).safeTransferFrom(\\n                        address(this),\\n                        _msgSender(),\\n                        ingredient.tokenIds[ingredient.tokenIds.length - 1]\\n                    );\\n                    ingredient.tokenIds.pop();\\n                }\\n            } else if (ingredient.token == CraftLib.TokenType.erc1155) {\\n                //Transfer ERC1155\\n                uint256[] memory amounts = new uint256[](ingredient.amounts.length);\\n                for (uint256 j = 0; j < ingredient.amounts.length; j++) {\\n                    amounts[j] = ingredient.amounts[j] * craftAmount;\\n                }\\n                IERC1155Upgradeable(ingredient.contractAddr).safeBatchTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    ingredient.tokenIds,\\n                    amounts,\\n                    new bytes(0)\\n                );\\n            }\\n        }\\n\\n        emit RecipeCraft(craftAmount, craftableAmount, _msgSender());\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xf4a520d8aed15348cc0a2c35f583ea782d5fe21738a6c1e68fc4560730f9d590\",\"license\":\"MIT\"},\"contracts/plugins/Crafter/ICrafter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport './CraftLib.sol';\\n\\n/**\\n * @dev Pluggable Crafting Contract.\\n */\\ninterface ICrafter {\\n    /**\\n     * @notice Create recipe\\n     * @dev Configures crafting recipe with inputs/outputs\\n     * @param _admin Admin address to intialize ownership\\n     * @param _burnAddress Burn address for burn inputs\\n     * @param _inputs inputs for recipe\\n     * @param _outputs outputs for recipe\\n     */\\n    function initialize(\\n        address _admin,\\n        address _burnAddress,\\n        uint96 _craftableAmount,\\n        CraftLib.Ingredient[] calldata _inputs,\\n        CraftLib.Ingredient[] calldata _outputs\\n    ) external;\\n\\n    /**\\n     * @notice Must be recipe creator\\n     * @dev Used to deposit recipe outputs\\n     * @param depositAmount How many times the recipe should be craftable\\n     * @param _outputsERC721Ids 2D-array of ERC721 tokens used in crafting\\n     */\\n    function deposit(uint96 depositAmount, uint256[][] calldata _outputsERC721Ids) external;\\n\\n    /**\\n     * @notice Must be recipe creator\\n     * @dev Used to withdraw recipe outputs. Reverse logic as deposit().\\n     * @param withdrawAmount How many times the craft outputs should be withdrawn\\n     */\\n    function withdraw(uint96 withdrawAmount) external;\\n\\n    /**\\n     * @notice Craft {craftAmount}\\n     * @dev Used to craft. Consumes inputs and transfers outputs.\\n     * @param craftAmount How many times to craft\\n     * @param _inputERC721Ids Array of pre-approved NFTs for crafting usage.\\n     */\\n    function craft(uint96 craftAmount, uint256[][] calldata _inputERC721Ids) external;\\n}\\n\",\"keccak256\":\"0x517f064676a2cdb9bba9811bbf73741e2392bdcae9a598a0c04ec1b9fda456cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b62000156565b6200003260ff62000035565b50565b60008054610100900460ff1615620000ce578160ff1660011480156200006e57506200006c306200014760201b62002f521760201c565b155b620000c65760405162461bcd60e51b815260206004820152602e602482015260008051602062004fbe83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200012d5760405162461bcd60e51b815260206004820152602e602482015260008051602062004fbe83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000bd565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b608051614e306200018e60003960008181610595015281816105de01528181610667015281816106a701526108e90152614e306000f3fe60806040526004361061012a5760003560e01c8063715018a6116100ab578063d2cad82a1161006f578063d2cad82a14610375578063dee4dea014610395578063df5081d6146103b5578063f23a6e61146103d5578063f2fde38b14610401578063f4a3e96d1461042157600080fd5b8063715018a6146102ec5780638da5cb5b14610301578063aaf10f421461031f578063bbe9e39b14610334578063bc197c811461034957600080fd5b8063505c9f27116100f2578063505c9f271461020e57806351776d931461023057806352d1902d146102505780635739a0d41461027357806370d5ae05146102b357600080fd5b806301ffc9a71461012f578063150b7a02146101645780632c4e328d146101a85780633659cfe6146101d95780634f1ef286146101fb575b600080fd5b34801561013b57600080fd5b5061014f61014a366004613ca1565b610441565b60405190151581526020015b60405180910390f35b34801561017057600080fd5b5061018f61017f366004613d95565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161015b565b3480156101b457600080fd5b506101c86101c3366004613e00565b610478565b60405161015b959493929190613e8e565b3480156101e557600080fd5b506101f96101f4366004613eea565b61058a565b005b6101f9610209366004613f07565b61065c565b34801561021a57600080fd5b50610223610716565b60405161015b9190613f56565b34801561023c57600080fd5b506101f961024b366004614079565b610899565b34801561025c57600080fd5b506102656108dc565b60405190815260200161015b565b34801561027f57600080fd5b506101915461029b90600160a01b90046001600160601b031681565b6040516001600160601b03909116815260200161015b565b3480156102bf57600080fd5b50610191546102d4906001600160a01b031681565b6040516001600160a01b03909116815260200161015b565b3480156102f857600080fd5b506101f961098f565b34801561030d57600080fd5b5060fb546001600160a01b03166102d4565b34801561032b57600080fd5b506102d46109c5565b34801561034057600080fd5b506102236109d4565b34801561035557600080fd5b5061018f610364366004614159565b63bc197c8160e01b95945050505050565b34801561038157600080fd5b506101c8610390366004613e00565b610b4e565b3480156103a157600080fd5b506101f96103b0366004614206565b610b6c565b3480156103c157600080fd5b506101f96103d0366004614079565b61102c565b3480156103e157600080fd5b5061018f6103f0366004614221565b63f23a6e6160e01b95945050505050565b34801561040d57600080fd5b506101f961041c366004613eea565b611fca565b34801561042d57600080fd5b506101f961043c366004614289565b612062565b60006001600160e01b03198216630271189760e51b148061047257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000806000606080600061019287815481106104965761049661432e565b6000918252602091829020600391909102018054600182018054604080518287028101870190915281815293955060ff80841695610100850490911694620100009094046001600160a01b0316936002880192909184919083018282801561051d57602002820191906000526020600020905b815481526020019060010190808311610509575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561056f57602002820191906000526020600020905b81548152602001906001019080831161055b575b50505050509050955095509550955095505091939590929450565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105dc5760405162461bcd60e51b81526004016105d390614344565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661060e612f61565b6001600160a01b0316146106345760405162461bcd60e51b81526004016105d390614390565b61063d81612f7d565b6040805160008082526020820190925261065991839190612fa7565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156106a55760405162461bcd60e51b81526004016105d390614344565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106d7612f61565b6001600160a01b0316146106fd5760405162461bcd60e51b81526004016105d390614390565b61070682612f7d565b61071282826001612fa7565b5050565b6060610193805480602002602001604051908101604052809291908181526020016000905b82821015610890576000848152602090206040805160a08101909152600384029091018054829060ff16600281111561077657610776613e19565b600281111561078757610787613e19565b81528154602090910190610100900460ff1660038111156107aa576107aa613e19565b60038111156107bb576107bb613e19565b815281546201000090046001600160a01b0316602080830191909152600183018054604080518285028101850182528281529401939283018282801561082057602002820191906000526020600020905b81548152602001906001019080831161080c575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561087857602002820191906000526020600020905b815481526020019060010190808311610864575b5050505050815250508152602001906001019061073b565b50505050905090565b60fb546001600160a01b031633146108c35760405162461bcd60e51b81526004016105d3906143dc565b6108d7836108d18385614411565b33613121565b505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461097c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105d3565b50600080516020614d9483398151915290565b60fb546001600160a01b031633146109b95760405162461bcd60e51b81526004016105d3906143dc565b6109c3600061362f565b565b60006109cf612f61565b905090565b6060610192805480602002602001604051908101604052809291908181526020016000905b82821015610890576000848152602090206040805160a08101909152600384029091018054829060ff166002811115610a3457610a34613e19565b6002811115610a4557610a45613e19565b81528154602090910190610100900460ff166003811115610a6857610a68613e19565b6003811115610a7957610a79613e19565b815281546201000090046001600160a01b03166020808301919091526001830180546040805182850281018501825282815294019392830182828015610ade57602002820191906000526020600020905b815481526020019060010190808311610aca575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610b3657602002820191906000526020600020905b815481526020019060010190808311610b22575b505050505081525050815260200190600101906109f9565b6000806000606080600061019387815481106104965761049661432e565b60fb546001600160a01b03163314610b965760405162461bcd60e51b81526004016105d3906143dc565b6000816001600160601b031611610c045760405162461bcd60e51b815260206004820152602c60248201527f437261667465725472616e736665723a207769746864726177416d6f756e742060448201526b63616e6e6f7420626520302160a01b60648201526084016105d3565b610191546001600160601b03600160a01b90910481169082161115610c7a5760405162461bcd60e51b815260206004820152602660248201527f437261667465725472616e736665723a204e6f7420656e6f756768207265736f60448201526575726365732160d01b60648201526084016105d3565b8061019160148282829054906101000a90046001600160601b0316610c9f919061449a565b92506101000a8154816001600160601b0302191690836001600160601b0316021790555060005b61019354811015610fe15760006101938281548110610ce757610ce761432e565b6000918252602082206003909102019150815460ff166002811115610d0e57610d0e613e19565b1415610d69578054610d64906201000090046001600160a01b031633856001600160601b031684600101600081548110610d4a57610d4a61432e565b9060005260206000200154610d5f91906144c2565b613681565b610fce565b6001815460ff166002811115610d8157610d81613e19565b1415610e725760005b836001600160601b0316811015610e6c5781546201000090046001600160a01b03166342842e0e3033600286018054610dc5906001906144e1565b81548110610dd557610dd561432e565b90600052602060002001546040518463ffffffff1660e01b8152600401610dfe939291906144f8565b600060405180830381600087803b158015610e1857600080fd5b505af1158015610e2c573d6000803e3d6000fd5b5050505081600201805480610e4357610e4361451c565b600190038181906000526020600020016000905590558080610e6490614532565b915050610d8a565b50610fce565b6002815460ff166002811115610e8a57610e8a613e19565b1415610fce5760018101546000906001600160401b03811115610eaf57610eaf613ce0565b604051908082528060200260200182016040528015610ed8578160200160208202803683370190505b50905060005b6001830154811015610f4d57846001600160601b0316836001018281548110610f0957610f0961432e565b9060005260206000200154610f1e91906144c2565b828281518110610f3057610f3061432e565b602090810291909101015280610f4581614532565b915050610ede565b50815460408051600081526020810191829052631759616b60e11b909152620100009091046001600160a01b031690632eb2c2d690610f9a903090339060028801908790602481016145da565b600060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b50505050505b5080610fd981614532565b915050610cc6565b5061019154604051600160a01b9091046001600160601b031681527f36ca321cf0c7fde128087be822283a7ca898c8a5ef818e4e079d29ab777319ff9060200160405180910390a150565b6000836001600160601b0316116110975760405162461bcd60e51b815260206004820152602960248201527f437261667465725472616e736665723a206372616674416d6f756e742063616e6044820152686e6f7420626520302160b81b60648201526084016105d3565b610191546001600160601b03600160a01b909104811690841611156111165760405162461bcd60e51b815260206004820152602f60248201527f437261667465725472616e736665723a204e6f7420656e6f756768207265736f60448201526e757263657320746f2063726166742160881b60648201526084016105d3565b8261019160148282829054906101000a90046001600160601b031661113b919061449a565b92506101000a8154816001600160601b0302191690836001600160601b031602179055506000805b61019254811015611c6c57600061019282815481106111845761118461432e565b6000918252602082206003909102019150815460ff1660028111156111ab576111ab613e19565b141561133e5760018154610100900460ff1660038111156111ce576111ce613e19565b141561123a578054611235906201000090046001600160a01b031633610191546001850180546001600160a01b03909216916001600160601b038c16919060009061121b5761121b61432e565b906000526020600020015461123091906144c2565b6136e4565b611c59565b60008154610100900460ff16600381111561125757611257613e19565b141561123557856001600160601b03168160010160008154811061127d5761127d61432e565b906000526020600020015461129291906144c2565b81546201000090046001600160a01b03166370a08231336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156112e857600080fd5b505afa1580156112fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611320919061462c565b10156112355760405162461bcd60e51b81526004016105d390614645565b6001815460ff16600281111561135657611356613e19565b141561187157856001600160601b03168585858181106113785761137861432e565b905060200281019061138a91906146a2565b9050146113f45760405162461bcd60e51b815260206004820152603260248201527f437261667465725472616e736665723a205f696e70757445524337323149647360448201527116da5748084f4818dc98599d105b5bdd5b9d60721b60648201526084016105d3565b60008585858181106114085761140861432e565b905060200281019061141a91906146a2565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092935060019250611457915050565b8254610100900460ff16600381111561147257611472613e19565b141561154c5760005b81518110156115465782546201000090046001600160a01b03166342842e0e33610191546001600160a01b03168a8a8a8181106114ba576114ba61432e565b90506020028101906114cc91906146a2565b868181106114dc576114dc61432e565b905060200201356040518463ffffffff1660e01b8152600401611501939291906144f8565b600060405180830381600087803b15801561151b57600080fd5b505af115801561152f573d6000803e3d6000fd5b50505050808061153e90614532565b91505061147b565b5061185e565b60008254610100900460ff16600381111561156957611569613e19565b14156116575760005b8151811015611546578254825133916201000090046001600160a01b031690636352211e908590859081106115a9576115a961432e565b60200260200101516040518263ffffffff1660e01b81526004016115cf91815260200190565b60206040518083038186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f91906146eb565b6001600160a01b0316146116455760405162461bcd60e51b81526004016105d390614708565b8061164f81614532565b915050611572565b60038254610100900460ff16600381111561167457611674613e19565b141561185e5760005b815181101561185c578254825133916201000090046001600160a01b031690636352211e908590859081106116b4576116b461432e565b60200260200101516040518263ffffffff1660e01b81526004016116da91815260200190565b60206040518083038186803b1580156116f257600080fd5b505afa158015611706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172a91906146eb565b6001600160a01b0316146117505760405162461bcd60e51b81526004016105d390614708565b60008282815181106117645761176461432e565b6020908102919091018101516000878152610194835260408082205488546201000090046001600160a01b031683526101958552818320848452909452902054909250106118065760405162461bcd60e51b815260206004820152602960248201527f437261667465725472616e736665723a2055736564206f76657220746865206c60448201526834b6b4ba1037b3103760b91b60648201526084016105d3565b83546201000090046001600160a01b03166000908152610195602090815260408083208484529091528120805460019290611842908490614754565b90915550829150611854905081614532565b91505061167d565b505b611869600185614754565b935050611c59565b6002815460ff16600281111561188957611889613e19565b1415611c595760018154610100900460ff1660038111156118ac576118ac613e19565b14156119fb5760018101546000906001600160401b038111156118d1576118d1613ce0565b6040519080825280602002602001820160405280156118fa578160200160208202803683370190505b50905060005b600183015481101561196f57876001600160601b031683600101828154811061192b5761192b61432e565b906000526020600020015461194091906144c2565b8282815181106119525761195261432e565b60209081029190910101528061196781614532565b915050611900565b5081546101915460408051600081526020810191829052631759616b60e11b909152620100009092046001600160a01b0390811692632eb2c2d6926119c392339291169060028801908790602481016145da565b600060405180830381600087803b1580156119dd57600080fd5b505af11580156119f1573d6000803e3d6000fd5b5050505050611c59565b60008154610100900460ff166003811115611a1857611a18613e19565b1415611c595760018101546000906001600160401b03811115611a3d57611a3d613ce0565b604051908082528060200260200182016040528015611a66578160200160208202803683370190505b5060018301549091506000906001600160401b03811115611a8957611a89613ce0565b604051908082528060200260200182016040528015611ab2578160200160208202803683370190505b50905060005b6001840154811015611b5257886001600160601b0316846001018281548110611ae357611ae361432e565b9060005260206000200154611af891906144c2565b838281518110611b0a57611b0a61432e565b602090810291909101015233828281518110611b2857611b2861432e565b6001600160a01b039092166020928302919091019091015280611b4a81614532565b915050611ab8565b5082546040516313849cfd60e21b81526000916201000090046001600160a01b031690634e1273f490611b8e908590600289019060040161476c565b60006040518083038186803b158015611ba657600080fd5b505afa158015611bba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611be291908101906147cc565b905060005b8151811015611c5457838181518110611c0257611c0261432e565b6020026020010151828281518110611c1c57611c1c61432e565b60200260200101511015611c425760405162461bcd60e51b81526004016105d390614645565b80611c4c81614532565b915050611be7565b505050505b5080611c6481614532565b915050611163565b5060005b61019354811015611f715760006101938281548110611c9157611c9161432e565b6000918252602082206003909102019150815460ff166002811115611cb857611cb8613e19565b1415611cf9578054611cf4906201000090046001600160a01b031633886001600160601b031684600101600081548110610d4a57610d4a61432e565b611f5e565b6001815460ff166002811115611d1157611d11613e19565b1415611e025760005b866001600160601b0316811015611dfc5781546201000090046001600160a01b03166342842e0e3033600286018054611d55906001906144e1565b81548110611d6557611d6561432e565b90600052602060002001546040518463ffffffff1660e01b8152600401611d8e939291906144f8565b600060405180830381600087803b158015611da857600080fd5b505af1158015611dbc573d6000803e3d6000fd5b5050505081600201805480611dd357611dd361451c565b600190038181906000526020600020016000905590558080611df490614532565b915050611d1a565b50611f5e565b6002815460ff166002811115611e1a57611e1a613e19565b1415611f5e5760018101546000906001600160401b03811115611e3f57611e3f613ce0565b604051908082528060200260200182016040528015611e68578160200160208202803683370190505b50905060005b6001830154811015611edd57876001600160601b0316836001018281548110611e9957611e9961432e565b9060005260206000200154611eae91906144c2565b828281518110611ec057611ec061432e565b602090810291909101015280611ed581614532565b915050611e6e565b50815460408051600081526020810191829052631759616b60e11b909152620100009091046001600160a01b031690632eb2c2d690611f2a903090339060028801908790602481016145da565b600060405180830381600087803b158015611f4457600080fd5b505af1158015611f58573d6000803e3d6000fd5b50505050505b5080611f6981614532565b915050611c70565b5061019154604080516001600160601b038781168252600160a01b9093049092166020830152805133927fd9b4399bff946a8ce8115e149514e628dbd773a7a931de96f81236602311314c92908290030190a250505050565b60fb546001600160a01b03163314611ff45760405162461bcd60e51b81526004016105d3906143dc565b6001600160a01b0381166120595760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d3565b6106598161362f565b600061206e600161370b565b90508015612086576000805461ff0019166101001790555b6001600160a01b0387166120f05760405162461bcd60e51b815260206004820152602b60248201527f437261667465725472616e736665723a206275726e2061646472657373206d7560448201526a07374206e6f7420626520360ac1b60648201526084016105d3565b836121565760405162461bcd60e51b815260206004820152603060248201527f437261667465725472616e736665723a2041206372616674696e6720696e707560448201526f74206d75737420626520676976656e2160801b60648201526084016105d3565b816121bd5760405162461bcd60e51b815260206004820152603160248201527f437261667465725472616e736665723a2041206372616674696e67206f7574706044820152707574206d75737420626520676976656e2160781b60648201526084016105d3565b6121c5613798565b6121ce8861362f565b61019180546001600160a01b0319166001600160a01b03891617905560005b848110156126ce5760008686838181106122095761220961432e565b905060200281019061221b9190614851565b61222990602081019061487e565b600281111561223a5761223a613e19565b14156122e9578585828181106122525761225261432e565b90506020028101906122649190614851565b6122729060808101906146a2565b1590506122915760405162461bcd60e51b81526004016105d39061489b565b8585828181106122a3576122a361432e565b90506020028101906122b59190614851565b6122c39060608101906146a2565b90506001146122e45760405162461bcd60e51b81526004016105d3906148e0565b612670565b60018686838181106122fd576122fd61432e565b905060200281019061230f9190614851565b61231d90602081019061487e565b600281111561232e5761232e613e19565b14156125a0578585828181106123465761234661432e565b90506020028101906123589190614851565b6123669060808101906146a2565b1590506123c35760405162461bcd60e51b815260206004820152602560248201527f437261667465725472616e736665723a20746f6b656e4964732e6c656e677468604482015264020213d20360dc1b60648201526084016105d3565b60038686838181106123d7576123d761432e565b90506020028101906123e99190614851565b6123fa90604081019060200161491f565b600381111561240b5761240b613e19565b141561251f578585828181106124235761242361432e565b90506020028101906124359190614851565b6124439060608101906146a2565b90506001146124b85760405162461bcd60e51b81526020600482015260476024820152600080516020614ddb83398151915260448201527f213d20313b20726571756972656420666f72204e54696d6520436f6e73756d61606482015266626c655479706560c81b608482015260a4016105d3565b8585828181106124ca576124ca61432e565b90506020028101906124dc9190614851565b6124ea9060608101906146a2565b60008181106124fb576124fb61432e565b90506020020135610194600083815260200190815260200160002081905550612670565b8585828181106125315761253161432e565b90506020028101906125439190614851565b6125519060608101906146a2565b1590506122e45760405162461bcd60e51b81526020600482015260296024820152600080516020614ddb8339815191526044820152680213d2031206f7220360bc1b60648201526084016105d3565b60028686838181106125b4576125b461432e565b90506020028101906125c69190614851565b6125d490602081019061487e565b60028111156125e5576125e5613e19565b1415612670578585828181106125fd576125fd61432e565b905060200281019061260f9190614851565b61261d9060608101906146a2565b90508686838181106126315761263161432e565b90506020028101906126439190614851565b6126519060808101906146a2565b9050146126705760405162461bcd60e51b81526004016105d39061493c565b6101928686838181106126855761268561432e565b90506020028101906126979190614851565b8154600181018355600092835260209092209091600302016126b98282614a1e565b505080806126c690614532565b9150506121ed565b506000805b83811015612cc75760008585838181106126ef576126ef61432e565b90506020028101906127019190614851565b61270f90602081019061487e565b600281111561272057612720613e19565b141561281a578484828181106127385761273861432e565b905060200281019061274a9190614851565b6127589060808101906146a2565b1590506127775760405162461bcd60e51b81526004016105d39061489b565b8484828181106127895761278961432e565b905060200281019061279b9190614851565b6127a99060608101906146a2565b90506001146127ca5760405162461bcd60e51b81526004016105d3906148e0565b6101938585838181106127df576127df61432e565b90506020028101906127f19190614851565b8154600181018355600092835260209092209091600302016128138282614a1e565b5050612cb5565b600185858381811061282e5761282e61432e565b90506020028101906128409190614851565b61284e90602081019061487e565b600281111561285f5761285f613e19565b1415612b9957876001600160601b03168585838181106128815761288161432e565b90506020028101906128939190614851565b6128a19060808101906146a2565b90501461290d5760405162461bcd60e51b815260206004820152603460248201527f437261667465725472616e736665723a20746f6b656e6964732e6c656e67746860448201527308084f4817d8dc98599d18589b19505b5bdd5b9d60621b60648201526084016105d3565b84848281811061291f5761291f61432e565b90506020028101906129319190614851565b61293f9060608101906146a2565b1590506129885760405162461bcd60e51b815260206004820152602480820152600080516020614ddb8339815191526044820152630213d20360e41b60648201526084016105d3565b8161299281614532565b92505060006040518060a00160405280600160028111156129b5576129b5613e19565b81526020018787858181106129cc576129cc61432e565b90506020028101906129de9190614851565b6129ef90604081019060200161491f565b6003811115612a0057612a00613e19565b8152602001878785818110612a1757612a1761432e565b9050602002810190612a299190614851565b612a3a906060810190604001613eea565b6001600160a01b031681526020016000604051908082528060200260200182016040528015612a73578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015612aa4578160200160208202803683370190505b509052610193805460018181018355600092909252825160039091027ffc8af01f449989052b52093a58fc9f42d0b11f0c6dd5dca0463dab62346ccc6801805493945084939092839160ff191690836002811115612b0457612b04613e19565b021790555060208201518154829061ff001916610100836003811115612b2c57612b2c613e19565b0217905550604082015181546001600160a01b03909116620100000262010000600160b01b031990911617815560608201518051612b74916001840191602090910190613c41565b5060808201518051612b90916002840191602090910190613c41565b50505050612cb5565b6002858583818110612bad57612bad61432e565b9050602002810190612bbf9190614851565b612bcd90602081019061487e565b6002811115612bde57612bde613e19565b1415612cb557848482818110612bf657612bf661432e565b9050602002810190612c089190614851565b612c169060608101906146a2565b9050858583818110612c2a57612c2a61432e565b9050602002810190612c3c9190614851565b612c4a9060808101906146a2565b905014612c695760405162461bcd60e51b81526004016105d39061493c565b610193858583818110612c7e57612c7e61432e565b9050602002810190612c909190614851565b815460018101835560009283526020909220909160030201612cb28282614a1e565b50505b80612cbf81614532565b9150506126d3565b506000816001600160401b03811115612ce257612ce2613ce0565b604051908082528060200260200182016040528015612d1557816020015b6060815260200190600190039081612d005790505b5090506000805b85811015612e9d576001878783818110612d3857612d3861432e565b9050602002810190612d4a9190614851565b612d5890602081019061487e565b6002811115612d6957612d69613e19565b1415612e8b57896001600160601b03166001600160401b03811115612d9057612d90613ce0565b604051908082528060200260200182016040528015612db9578160200160208202803683370190505b50838381518110612dcc57612dcc61432e565b602002602001018190525060005b8a6001600160601b0316811015612e7c57878783818110612dfd57612dfd61432e565b9050602002810190612e0f9190614851565b612e1d9060808101906146a2565b82818110612e2d57612e2d61432e565b90506020020135848481518110612e4657612e4661432e565b60200260200101518281518110612e5f57612e5f61432e565b602090810291909101015280612e7481614532565b915050612dda565b5081612e8781614532565b9250505b80612e9581614532565b915050612d1c565b506001600160601b03891615612eb857612eb889838d613121565b336001600160a01b03167fa0debf7c9ca45a90f258771b745e3ecfedce2c567503855e392d93e1c7a734b589898989604051612ef79493929190614c61565b60405180910390a25050508015612f48576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6001600160a01b03163b151590565b600080516020614d94833981519152546001600160a01b031690565b60fb546001600160a01b031633146106595760405162461bcd60e51b81526004016105d3906143dc565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612fda576108d7836137c7565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561301357600080fd5b505afa925050508015613043575060408051601f3d908101601f191682019092526130409181019061462c565b60015b6130a65760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105d3565b600080516020614d9483398151915281146131155760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105d3565b506108d7838383613863565b6000836001600160601b03161161318e5760405162461bcd60e51b815260206004820152602b60248201527f437261667465725472616e736665723a206465706f736974416d6f756e74206360448201526a616e6e6f7420626520302160a81b60648201526084016105d3565b6000805b610193548110156135a157600061019382815481106131b3576131b361432e565b6000918252602082206003909102019150815460ff1660028111156131da576131da613e19565b14156132225761321d8160000160029054906101000a90046001600160a01b03168530896001600160601b03168560010160008154811061121b5761121b61432e565b61358e565b6001815460ff16600281111561323a5761323a613e19565b141561341457856001600160601b031685848151811061325c5761325c61432e565b602002602001015151146132d15760405162461bcd60e51b815260206004820152603660248201527f437261667465725472616e736665723a205f6f75747075747345524337323149604482015275191cd6da5748084f4819195c1bdcda5d105b5bdd5b9d60521b60648201526084016105d3565b60005b8584815181106132e6576132e661432e565b602002602001015151811015613401578160000160029054906101000a90046001600160a01b03166001600160a01b03166342842e0e86308988815181106133305761333061432e565b602002602001015185815181106133495761334961432e565b60200260200101516040518463ffffffff1660e01b815260040161336f939291906144f8565b600060405180830381600087803b15801561338957600080fd5b505af115801561339d573d6000803e3d6000fd5b50505050816002018685815181106133b7576133b761432e565b602002602001015182815181106133d0576133d061432e565b60209081029190910181015182546001810184556000938452919092200155806133f981614532565b9150506132d4565b5061340d600184614754565b925061358e565b6002815460ff16600281111561342c5761342c613e19565b141561358e5760018101546000906001600160401b0381111561345157613451613ce0565b60405190808252806020026020018201604052801561347a578160200160208202803683370190505b50905060005b60018301548110156134ef57876001600160601b03168360010182815481106134ab576134ab61432e565b90600052602060002001546134c091906144c2565b8282815181106134d2576134d261432e565b6020908102919091010152806134e781614532565b915050613480565b5081546201000090046001600160a01b0316632eb2c2d68630600286018560006040519080825280601f01601f191660200182016040528015613539576020820181803683370190505b506040518663ffffffff1660e01b815260040161355a9594939291906145da565b600060405180830381600087803b15801561357457600080fd5b505af1158015613588573d6000803e3d6000fd5b50505050505b508061359981614532565b915050613192565b508361019160148282829054906101000a90046001600160601b03166135c79190614c88565b82546101009290920a6001600160601b0381810219909316918316021790915561019154604051600160a01b90910490911681527f36ca321cf0c7fde128087be822283a7ca898c8a5ef818e4e079d29ab777319ff915060200160405180910390a150505050565b60fb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0383166024820152604481018290526108d790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613888565b613705846323b872dd60e01b8585856040516024016136ad939291906144f8565b50505050565b60008054610100900460ff1615613752578160ff16600114801561372e5750303b155b61374a5760405162461bcd60e51b81526004016105d390614cb3565b506000919050565b60005460ff8084169116106137795760405162461bcd60e51b81526004016105d390614cb3565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166137bf5760405162461bcd60e51b81526004016105d390614d01565b6109c361395a565b6001600160a01b0381163b6138345760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105d3565b600080516020614d9483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61386c8361398a565b6000825111806138795750805b156108d75761370583836139ca565b60006138dd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613abe9092919063ffffffff16565b8051909150156108d757808060200190518101906138fb9190614d4c565b6108d75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105d3565b600054610100900460ff166139815760405162461bcd60e51b81526004016105d390614d01565b6109c33361362f565b613993816137c7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613a325760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105d3565b600080846001600160a01b031684604051613a4d9190614d6e565b600060405180830381855af49150503d8060008114613a88576040519150601f19603f3d011682016040523d82523d6000602084013e613a8d565b606091505b5091509150613ab58282604051806060016040528060278152602001614db460279139613ad7565b95945050505050565b6060613acd8484600085613b10565b90505b9392505050565b60608315613ae6575081613ad0565b825115613af65782518084602001fd5b8160405162461bcd60e51b81526004016105d39190614d80565b606082471015613b715760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105d3565b6001600160a01b0385163b613bc85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105d3565b600080866001600160a01b03168587604051613be49190614d6e565b60006040518083038185875af1925050503d8060008114613c21576040519150601f19603f3d011682016040523d82523d6000602084013e613c26565b606091505b5091509150613c36828286613ad7565b979650505050505050565b828054828255906000526020600020908101928215613c7c579160200282015b82811115613c7c578251825591602001919060010190613c61565b50613c88929150613c8c565b5090565b5b80821115613c885760008155600101613c8d565b600060208284031215613cb357600080fd5b81356001600160e01b031981168114613ad057600080fd5b6001600160a01b038116811461065957600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613d1e57613d1e613ce0565b604052919050565b600082601f830112613d3757600080fd5b81356001600160401b03811115613d5057613d50613ce0565b613d63601f8201601f1916602001613cf6565b818152846020838601011115613d7857600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215613dab57600080fd5b8435613db681613ccb565b93506020850135613dc681613ccb565b92506040850135915060608501356001600160401b03811115613de857600080fd5b613df487828801613d26565b91505092959194509250565b600060208284031215613e1257600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110613e3f57613e3f613e19565b9052565b60048110613e3f57613e3f613e19565b600081518084526020808501945080840160005b83811015613e8357815187529582019590820190600101613e67565b509495945050505050565b613e988187613e2f565b613ea56020820186613e43565b6001600160a01b038416604082015260a060608201819052600090613ecc90830185613e53565b8281036080840152613ede8185613e53565b98975050505050505050565b600060208284031215613efc57600080fd5b8135613ad081613ccb565b60008060408385031215613f1a57600080fd5b8235613f2581613ccb565b915060208301356001600160401b03811115613f4057600080fd5b613f4c85828601613d26565b9150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561400957603f19898403018552815160a0613f9d858351613e2f565b88820151613fad8a870182613e43565b50818801516001600160a01b031685890152606080830151818701839052613fd783880182613e53565b9250505060808083015192508582038187015250613ff58183613e53565b968901969450505090860190600101613f7d565b509098975050505050505050565b80356001600160601b038116811461379357600080fd5b60008083601f84011261404057600080fd5b5081356001600160401b0381111561405757600080fd5b6020830191508360208260051b850101111561407257600080fd5b9250929050565b60008060006040848603121561408e57600080fd5b61409784614017565b925060208401356001600160401b038111156140b257600080fd5b6140be8682870161402e565b9497909650939450505050565b60006001600160401b038211156140e4576140e4613ce0565b5060051b60200190565b600082601f8301126140ff57600080fd5b8135602061411461410f836140cb565b613cf6565b82815260059290921b8401810191818101908684111561413357600080fd5b8286015b8481101561414e5780358352918301918301614137565b509695505050505050565b600080600080600060a0868803121561417157600080fd5b853561417c81613ccb565b9450602086013561418c81613ccb565b935060408601356001600160401b03808211156141a857600080fd5b6141b489838a016140ee565b945060608801359150808211156141ca57600080fd5b6141d689838a016140ee565b935060808801359150808211156141ec57600080fd5b506141f988828901613d26565b9150509295509295909350565b60006020828403121561421857600080fd5b613ad082614017565b600080600080600060a0868803121561423957600080fd5b853561424481613ccb565b9450602086013561425481613ccb565b9350604086013592506060860135915060808601356001600160401b0381111561427d57600080fd5b6141f988828901613d26565b600080600080600080600060a0888a0312156142a457600080fd5b87356142af81613ccb565b965060208801356142bf81613ccb565b95506142cd60408901614017565b945060608801356001600160401b03808211156142e957600080fd5b6142f58b838c0161402e565b909650945060808a013591508082111561430e57600080fd5b5061431b8a828b0161402e565b989b979a50959850939692959293505050565b634e487b7160e01b600052603260045260246000fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600061441f61410f846140cb565b80848252602080830192508560051b85013681111561443d57600080fd5b855b818110156144785780356001600160401b0381111561445e5760008081fd5b61446a36828a016140ee565b86525093820193820161443f565b50919695505050505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160601b03838116908316818110156144ba576144ba614484565b039392505050565b60008160001904831182151516156144dc576144dc614484565b500290565b6000828210156144f3576144f3614484565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603160045260246000fd5b600060001982141561454657614546614484565b5060010190565b6000815480845260208085019450836000528060002060005b83811015613e8357815487529582019560019182019101614566565b60005b8381101561459d578181015183820152602001614585565b838111156137055750506000910152565b600081518084526145c6816020860160208601614582565b601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a0604082018190526000906146069083018661454d565b82810360608401526146188186613e53565b90508281036080840152613ede81856145ae565b60006020828403121561463e57600080fd5b5051919050565b60208082526037908201527f437261667465725472616e736665723a2055736572206d697373696e67206d6960408201527f6e696d756d20746f6b656e2062616c616e636528732921000000000000000000606082015260800190565b6000808335601e198436030181126146b957600080fd5b8301803591506001600160401b038211156146d357600080fd5b6020019150600581901b360382131561407257600080fd5b6000602082840312156146fd57600080fd5b8151613ad081613ccb565b6020808252602c908201527f437261667465725472616e736665723a205573657220646f6573206e6f74206f60408201526b776e20746f6b656e2873292160a01b606082015260800190565b6000821982111561476757614767614484565b500190565b604080825283519082018190526000906020906060840190828701845b828110156147ae5781516001600160a01b031684529284019290840190600101614789565b505050838103828501526147c2818661454d565b9695505050505050565b600060208083850312156147df57600080fd5b82516001600160401b038111156147f557600080fd5b8301601f8101851361480657600080fd5b805161481461410f826140cb565b81815260059190911b8201830190838101908783111561483357600080fd5b928401925b82841015613c3657835182529284019290840190614838565b60008235609e1983360301811261486757600080fd5b9190910192915050565b6003811061065957600080fd5b60006020828403121561489057600080fd5b8135613ad081614871565b60208082526025908201527f437261667465725472616e736665723a20746f6b656e6964732e6c656e677468604082015264020213d20360dc1b606082015260800190565b6020808252602490820152600080516020614ddb833981519152604082015263213d203160e01b606082015260800190565b6004811061065957600080fd5b60006020828403121561493157600080fd5b8135613ad081614912565b60208082526032908201527f437261667465725472616e736665723a20746f6b656e6964732e6c656e677468604082015271040427a40c2dadeeadce8e65cd8cadccee8d60731b606082015260800190565b6000813561047281613ccb565b680100000000000000008311156149b4576149b4613ce0565b8054838255808410156149eb576000828152602081208581019083015b808210156149e7578282556001820191506149d1565b5050505b5060008181526020812083915b85811015614a165782358255602090920191600191820191016149f8565b505050505050565b8135614a2981614871565b60038110614a3957614a39613e19565b815460ff821691508160ff1982161783556020840135614a5881614912565b60048110614a6857614a68613e19565b61ff008160081b168361ffff19841617178455505050614ab5614a8d6040840161498e565b82805462010000600160b01b03191660109290921b62010000600160b01b0316919091179055565b614ac260608301836146a2565b614ad081836001860161499b565b5050614adf60808301836146a2565b61370581836002860161499b565b6000808335601e19843603018112614b0457600080fd5b83016020810192503590506001600160401b03811115614b2357600080fd5b8060051b360383131561407257600080fd5b81835260006001600160fb1b03831115614b4e57600080fd5b8260051b8083602087013760009401602001938452509192915050565b81835260006020808501808196508560051b81019150846000805b88811015614c53578385038a528235609e19893603018112614ba6578283fd5b880160a08135614bb581614871565b614bbf8882613e2f565b5087820135614bcd81614912565b614bd989890182613e43565b50604080830135614be981613ccb565b6001600160a01b0316908801526060614c0483820184614aed565b83838b0152614c16848b018284614b35565b93505050506080614c2981840184614aed565b9350888303828a0152614c3d838583614b35565b9d8a019d98505050938701935050600101614b86565b509298975050505050505050565b604081526000614c75604083018688614b6b565b8281036020840152613c36818587614b6b565b60006001600160601b03808316818516808303821115614caa57614caa614484565b01949350505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215614d5e57600080fd5b81518015158114613ad057600080fd5b60008251614867818460208701614582565b602081526000613ad060208301846145ae56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564437261667465725472616e736665723a20616d6f756e74732e6c656e67746820a2646970667358221220c9aa7b75f1d56a3157fba99a7fa27e9968902dd7d9cd071de8d7bf659b23c23c64736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Pluggable Crafting Contract.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "craft(uint96,uint256[][])": {
        "details": "Used to craft. Consumes inputs and transfers outputs.",
        "params": {
          "_inputERC721Ids": "Array of pre-approved NFTs for crafting usage.",
          "craftAmount": "How many times to craft"
        }
      },
      "deposit(uint96,uint256[][])": {
        "details": "Used to deposit recipe outputs.",
        "params": {
          "_outputsERC721Ids": "2D-array of ERC721 tokens used in crafting",
          "depositAmount": "How many times the recipe should be craftable"
        }
      },
      "getInputIngredient(uint256)": {
        "details": "Returns all details for a specific ingredient (including amounts/tokenIds)",
        "params": {
          "index": "ingredient index to return details for"
        },
        "returns": {
          "amounts": "amount of each token",
          "consumableType": "consumable type",
          "contractAddr": "token contract address",
          "token": "token type",
          "tokenIds": "token ids"
        }
      },
      "getInputs()": {
        "details": "Returns all inputs (without `amounts` or `tokenIds`)"
      },
      "getOutputIngredient(uint256)": {
        "details": "Returns all details for a specific ingredient (including amounts/tokenIds)",
        "params": {
          "index": "ingredient index to return details for"
        },
        "returns": {
          "amounts": "amount of each token",
          "consumableType": "consumable type",
          "contractAddr": "token contract address",
          "token": "token type",
          "tokenIds": "token ids"
        }
      },
      "getOutputs()": {
        "details": "Returns all outputs (without `amounts` or `tokenIds`)"
      },
      "initialize(address,address,uint96,(uint8,uint8,address,uint256[],uint256[])[],(uint8,uint8,address,uint256[],uint256[])[])": {
        "details": "Configures crafting recipe with inputs/outputs",
        "params": {
          "_burnAddress": "Burn address for burn inputs",
          "_inputs": "inputs for recipe",
          "_outputs": "outputs for recipe"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint96)": {
        "details": "Used to withdraw recipe outputs. Reverse logic as deposit().",
        "params": {
          "withdrawAmount": "How many times the craft outputs should be withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "craft(uint96,uint256[][])": {
        "notice": "Craft {craftAmount}"
      },
      "deposit(uint96,uint256[][])": {
        "notice": "Must be recipe creator. Automatically sends from `msg.sender`"
      },
      "initialize(address,address,uint96,(uint8,uint8,address,uint256[],uint256[])[],(uint8,uint8,address,uint256[],uint256[])[])": {
        "notice": "Create recipe"
      },
      "withdraw(uint96)": {
        "notice": "Must be recipe creator"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1012,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1015,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5070,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5662,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2919,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2865,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5355,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 423,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 535,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 994,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1282,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11483,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "burnAddress",
        "offset": 0,
        "slot": "401",
        "type": "t_address"
      },
      {
        "astId": 11485,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "craftableAmount",
        "offset": 20,
        "slot": "401",
        "type": "t_uint96"
      },
      {
        "astId": 11489,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "inputs",
        "offset": 0,
        "slot": "402",
        "type": "t_array(t_struct(Ingredient)9931_storage)dyn_storage"
      },
      {
        "astId": 11493,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "outputs",
        "offset": 0,
        "slot": "403",
        "type": "t_array(t_struct(Ingredient)9931_storage)dyn_storage"
      },
      {
        "astId": 11497,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "nUse",
        "offset": 0,
        "slot": "404",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11503,
        "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
        "label": "usedERC721Inputs",
        "offset": 0,
        "slot": "405",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Ingredient)9931_storage)dyn_storage": {
        "base": "t_struct(Ingredient)9931_storage",
        "encoding": "dynamic_array",
        "label": "struct CraftLib.Ingredient[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ConsumableType)9912": {
        "encoding": "inplace",
        "label": "enum CraftLib.ConsumableType",
        "numberOfBytes": "1"
      },
      "t_enum(TokenType)9916": {
        "encoding": "inplace",
        "label": "enum CraftLib.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Ingredient)9931_storage": {
        "encoding": "inplace",
        "label": "struct CraftLib.Ingredient",
        "members": [
          {
            "astId": 9919,
            "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TokenType)9916"
          },
          {
            "astId": 9922,
            "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
            "label": "consumableType",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(ConsumableType)9912"
          },
          {
            "astId": 9924,
            "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
            "label": "contractAddr",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9927,
            "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
            "label": "amounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9930,
            "contract": "contracts/plugins/Crafter/CrafterTransfer.sol:CrafterTransfer",
            "label": "tokenIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}