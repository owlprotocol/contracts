/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ERC1820RegistryInterface extends ethers.utils.Interface {
  functions: {
    "getInterfaceImplementer(address,bytes32)": FunctionFragment;
    "getManager(address)": FunctionFragment;
    "implementsERC165Interface(address,bytes4)": FunctionFragment;
    "implementsERC165InterfaceNoCache(address,bytes4)": FunctionFragment;
    "interfaceHash(string)": FunctionFragment;
    "setInterfaceImplementer(address,bytes32,address)": FunctionFragment;
    "setManager(address,address)": FunctionFragment;
    "updateERC165Cache(address,bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getInterfaceImplementer",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "implementsERC165Interface",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementsERC165InterfaceNoCache",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interfaceHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterfaceImplementer",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateERC165Cache",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getInterfaceImplementer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementsERC165Interface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementsERC165InterfaceNoCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interfaceHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterfaceImplementer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateERC165Cache",
    data: BytesLike
  ): Result;

  events: {
    "InterfaceImplementerSet(address,bytes32,address)": EventFragment;
    "ManagerChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InterfaceImplementerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerChanged"): EventFragment;
}

export type InterfaceImplementerSetEvent = TypedEvent<
  [string, string, string] & {
    addr: string;
    interfaceHash: string;
    implementer: string;
  }
>;

export type ManagerChangedEvent = TypedEvent<
  [string, string] & { addr: string; newManager: string }
>;

export class ERC1820Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC1820RegistryInterface;

  functions: {
    getInterfaceImplementer(
      _addr: string,
      _interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getManager(_addr: string, overrides?: CallOverrides): Promise<[string]>;

    implementsERC165Interface(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    implementsERC165InterfaceNoCache(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    interfaceHash(
      _interfaceName: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setInterfaceImplementer(
      _addr: string,
      _interfaceHash: BytesLike,
      _implementer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      _addr: string,
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateERC165Cache(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getInterfaceImplementer(
    _addr: string,
    _interfaceHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getManager(_addr: string, overrides?: CallOverrides): Promise<string>;

  implementsERC165Interface(
    _contract: string,
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  implementsERC165InterfaceNoCache(
    _contract: string,
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  interfaceHash(
    _interfaceName: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setInterfaceImplementer(
    _addr: string,
    _interfaceHash: BytesLike,
    _implementer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    _addr: string,
    _newManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateERC165Cache(
    _contract: string,
    _interfaceId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getInterfaceImplementer(
      _addr: string,
      _interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getManager(_addr: string, overrides?: CallOverrides): Promise<string>;

    implementsERC165Interface(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    implementsERC165InterfaceNoCache(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    interfaceHash(
      _interfaceName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setInterfaceImplementer(
      _addr: string,
      _interfaceHash: BytesLike,
      _implementer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(
      _addr: string,
      _newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateERC165Cache(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "InterfaceImplementerSet(address,bytes32,address)"(
      addr?: string | null,
      interfaceHash?: BytesLike | null,
      implementer?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { addr: string; interfaceHash: string; implementer: string }
    >;

    InterfaceImplementerSet(
      addr?: string | null,
      interfaceHash?: BytesLike | null,
      implementer?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { addr: string; interfaceHash: string; implementer: string }
    >;

    "ManagerChanged(address,address)"(
      addr?: string | null,
      newManager?: string | null
    ): TypedEventFilter<[string, string], { addr: string; newManager: string }>;

    ManagerChanged(
      addr?: string | null,
      newManager?: string | null
    ): TypedEventFilter<[string, string], { addr: string; newManager: string }>;
  };

  estimateGas: {
    getInterfaceImplementer(
      _addr: string,
      _interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManager(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    implementsERC165Interface(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementsERC165InterfaceNoCache(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interfaceHash(
      _interfaceName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setInterfaceImplementer(
      _addr: string,
      _interfaceHash: BytesLike,
      _implementer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      _addr: string,
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateERC165Cache(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getInterfaceImplementer(
      _addr: string,
      _interfaceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManager(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementsERC165Interface(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementsERC165InterfaceNoCache(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interfaceHash(
      _interfaceName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setInterfaceImplementer(
      _addr: string,
      _interfaceHash: BytesLike,
      _implementer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      _addr: string,
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateERC165Cache(
      _contract: string,
      _interfaceId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
