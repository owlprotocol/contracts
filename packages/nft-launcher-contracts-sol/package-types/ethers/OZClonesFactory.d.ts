/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OZClonesFactoryInterface extends ethers.utils.Interface {
  functions: {
    "clone(address,bytes)": FunctionFragment;
    "cloneDeterministic(address,bytes32,bytes)": FunctionFragment;
    "predictDeterministicAddress(address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "clone",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cloneDeterministic",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictDeterministicAddress",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "clone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cloneDeterministic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictDeterministicAddress",
    data: BytesLike
  ): Result;

  events: {
    "NewClone(address,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewClone"): EventFragment;
}

export type NewCloneEvent = TypedEvent<
  [string, string, string] & {
    instance: string;
    implementation: string;
    salt: string;
  }
>;

export class OZClonesFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OZClonesFactoryInterface;

  functions: {
    clone(
      implementation: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cloneDeterministic(
      implementation: string,
      salt: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    predictDeterministicAddress(
      implementation: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { predicted: string }>;
  };

  clone(
    implementation: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cloneDeterministic(
    implementation: string,
    salt: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  predictDeterministicAddress(
    implementation: string,
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    clone(
      implementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    cloneDeterministic(
      implementation: string,
      salt: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    predictDeterministicAddress(
      implementation: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "NewClone(address,address,bytes32)"(
      instance?: null,
      implementation?: null,
      salt?: null
    ): TypedEventFilter<
      [string, string, string],
      { instance: string; implementation: string; salt: string }
    >;

    NewClone(
      instance?: null,
      implementation?: null,
      salt?: null
    ): TypedEventFilter<
      [string, string, string],
      { instance: string; implementation: string; salt: string }
    >;
  };

  estimateGas: {
    clone(
      implementation: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cloneDeterministic(
      implementation: string,
      salt: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    predictDeterministicAddress(
      implementation: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clone(
      implementation: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cloneDeterministic(
      implementation: string,
      salt: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    predictDeterministicAddress(
      implementation: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
