/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MintGuardMerkleInterface extends ethers.utils.Interface {
  functions: {
    "addAllowedRoot(address,uint256,bytes32)": FunctionFragment;
    "allowMint(uint256,address,bytes32,bytes32[])": FunctionFragment;
    "removeAllowedRoot(address,uint256,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAllowedRoot",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowMint",
    values: [BigNumberish, string, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedRoot",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAllowedRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "SetAllowedRoot(address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetAllowedRoot"): EventFragment;
}

export type SetAllowedRootEvent = TypedEvent<
  [string, BigNumber, string] & {
    minterContract: string;
    speciesId: BigNumber;
    merkleRoot: string;
  }
>;

export class MintGuardMerkle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MintGuardMerkleInterface;

  functions: {
    addAllowedRoot(
      minterContract: string,
      speciesId: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowMint(
      speciesId: BigNumberish,
      user: string,
      merkleRoot: BytesLike,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeAllowedRoot(
      minterContract: string,
      speciesId: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addAllowedRoot(
    minterContract: string,
    speciesId: BigNumberish,
    merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowMint(
    speciesId: BigNumberish,
    user: string,
    merkleRoot: BytesLike,
    merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeAllowedRoot(
    minterContract: string,
    speciesId: BigNumberish,
    merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addAllowedRoot(
      minterContract: string,
      speciesId: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allowMint(
      speciesId: BigNumberish,
      user: string,
      merkleRoot: BytesLike,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAllowedRoot(
      minterContract: string,
      speciesId: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "SetAllowedRoot(address,uint256,bytes32)"(
      minterContract?: null,
      speciesId?: null,
      merkleRoot?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { minterContract: string; speciesId: BigNumber; merkleRoot: string }
    >;

    SetAllowedRoot(
      minterContract?: null,
      speciesId?: null,
      merkleRoot?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { minterContract: string; speciesId: BigNumber; merkleRoot: string }
    >;
  };

  estimateGas: {
    addAllowedRoot(
      minterContract: string,
      speciesId: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowMint(
      speciesId: BigNumberish,
      user: string,
      merkleRoot: BytesLike,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAllowedRoot(
      minterContract: string,
      speciesId: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAllowedRoot(
      minterContract: string,
      speciesId: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowMint(
      speciesId: BigNumberish,
      user: string,
      merkleRoot: BytesLike,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAllowedRoot(
      minterContract: string,
      speciesId: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
