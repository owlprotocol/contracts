/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IMinterBreedingInterface extends ethers.utils.Interface {
  functions: {
    "breed(uint256,uint256[])": FunctionFragment;
    "createSpecies(address,address,address,uint256)": FunctionFragment;
    "getBreedingRules(uint256)": FunctionFragment;
    "getSpecies(uint256)": FunctionFragment;
    "safeBreed(uint256,uint256[])": FunctionFragment;
    "setBreedingRules(uint256,uint8,uint256,uint8[],uint256[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "breed",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createSpecies",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBreedingRules",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpecies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBreed",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBreedingRules",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "breed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createSpecies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBreedingRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSpecies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeBreed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBreedingRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export class IMinterBreeding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMinterBreedingInterface;

  functions: {
    breed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSpecies(
      contractAddress: string,
      mintFeeToken: string,
      mintFeeAddress: string,
      mintFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBreedingRules(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number[], BigNumber[]] & {
        requiredParents: number;
        breedCooldownSeconds: BigNumber;
        genes: number[];
        mutationRates: BigNumber[];
      }
    >;

    getSpecies(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string] & {
        contractAddr: string;
        owner: string;
        mintFeeToken: string;
        mintFeeAmount: BigNumber;
        mintFeeAddress: string;
      }
    >;

    safeBreed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBreedingRules(
      speciesId: BigNumberish,
      requiredParents: BigNumberish,
      breedCooldownSeconds: BigNumberish,
      genes: BigNumberish[],
      mutationRates: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  breed(
    speciesId: BigNumberish,
    parents: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSpecies(
    contractAddress: string,
    mintFeeToken: string,
    mintFeeAddress: string,
    mintFeeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBreedingRules(
    speciesId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, number[], BigNumber[]] & {
      requiredParents: number;
      breedCooldownSeconds: BigNumber;
      genes: number[];
      mutationRates: BigNumber[];
    }
  >;

  getSpecies(
    speciesId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string] & {
      contractAddr: string;
      owner: string;
      mintFeeToken: string;
      mintFeeAmount: BigNumber;
      mintFeeAddress: string;
    }
  >;

  safeBreed(
    speciesId: BigNumberish,
    parents: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBreedingRules(
    speciesId: BigNumberish,
    requiredParents: BigNumberish,
    breedCooldownSeconds: BigNumberish,
    genes: BigNumberish[],
    mutationRates: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    breed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSpecies(
      contractAddress: string,
      mintFeeToken: string,
      mintFeeAddress: string,
      mintFeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBreedingRules(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number[], BigNumber[]] & {
        requiredParents: number;
        breedCooldownSeconds: BigNumber;
        genes: number[];
        mutationRates: BigNumber[];
      }
    >;

    getSpecies(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string] & {
        contractAddr: string;
        owner: string;
        mintFeeToken: string;
        mintFeeAmount: BigNumber;
        mintFeeAddress: string;
      }
    >;

    safeBreed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBreedingRules(
      speciesId: BigNumberish,
      requiredParents: BigNumberish,
      breedCooldownSeconds: BigNumberish,
      genes: BigNumberish[],
      mutationRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    breed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSpecies(
      contractAddress: string,
      mintFeeToken: string,
      mintFeeAddress: string,
      mintFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBreedingRules(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpecies(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBreed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBreedingRules(
      speciesId: BigNumberish,
      requiredParents: BigNumberish,
      breedCooldownSeconds: BigNumberish,
      genes: BigNumberish[],
      mutationRates: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    breed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSpecies(
      contractAddress: string,
      mintFeeToken: string,
      mintFeeAddress: string,
      mintFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBreedingRules(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpecies(
      speciesId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBreed(
      speciesId: BigNumberish,
      parents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBreedingRules(
      speciesId: BigNumberish,
      requiredParents: BigNumberish,
      breedCooldownSeconds: BigNumberish,
      genes: BigNumberish[],
      mutationRates: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
