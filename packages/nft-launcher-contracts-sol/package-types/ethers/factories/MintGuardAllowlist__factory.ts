/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MintGuardAllowlist,
  MintGuardAllowlistInterface,
} from "../MintGuardAllowlist";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "minterContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "speciesId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "AddAllowedUser",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "minterContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "speciesId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "RemoveAllowedUser",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "minterContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "speciesId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "addAllowedUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "speciesId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "allowMint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "minterContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "speciesId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "removeAllowedUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506108ab806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a7146100515780631f22011b14610081578063a2ab1719146100b1578063b166b89d146100cd575b600080fd5b61006b60048036038101906100669190610559565b6100e9565b60405161007891906105a1565b60405180910390f35b61009b60048036038101906100969190610650565b610153565b6040516100a891906105a1565b60405180910390f35b6100cb60048036038101906100c69190610690565b6101ac565b005b6100e760048036038101906100e29190610690565b610354565b005b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008033848460405160200161016b93929190610701565b60405160208183030381529060405280519060200120905060008082815260200190815260200160002060009054906101000a900460ff1691505092915050565b828260008273ffffffffffffffffffffffffffffffffffffffff16632be6a2a9836040518263ffffffff1660e01b81526004016101e99190610738565b60a06040518083038186803b15801561020157600080fd5b505afa158015610215573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610239919061077d565b9091929350909150905050809150503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ad90610855565b60405180910390fd5b60008686866040516020016102cd93929190610701565b604051602081830303815290604052805190602001209050600160008083815260200190815260200160002060006101000a81548160ff0219169083151502179055507ff0c64be7d6de14a2daa1f538dbe9d6447f8714ce3451fc83366958431e7466e687878760405161034393929190610701565b60405180910390a150505050505050565b828260008273ffffffffffffffffffffffffffffffffffffffff16632be6a2a9836040518263ffffffff1660e01b81526004016103919190610738565b60a06040518083038186803b1580156103a957600080fd5b505afa1580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e1919061077d565b9091929350909150905050809150503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461045e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045590610855565b60405180910390fd5b600086868660405160200161047593929190610701565b604051602081830303815290604052805190602001209050600080600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f8265c159ec4ccc320459686416a335d94f59d80ab7b1a9ec22f849a099888e1b8787876040516104eb93929190610701565b60405180910390a150505050505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61053681610501565b811461054157600080fd5b50565b6000813590506105538161052d565b92915050565b60006020828403121561056f5761056e6104fc565b5b600061057d84828501610544565b91505092915050565b60008115159050919050565b61059b81610586565b82525050565b60006020820190506105b66000830184610592565b92915050565b6000819050919050565b6105cf816105bc565b81146105da57600080fd5b50565b6000813590506105ec816105c6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061061d826105f2565b9050919050565b61062d81610612565b811461063857600080fd5b50565b60008135905061064a81610624565b92915050565b60008060408385031215610667576106666104fc565b5b6000610675858286016105dd565b92505060206106868582860161063b565b9150509250929050565b6000806000606084860312156106a9576106a86104fc565b5b60006106b78682870161063b565b93505060206106c8868287016105dd565b92505060406106d98682870161063b565b9150509250925092565b6106ec81610612565b82525050565b6106fb816105bc565b82525050565b600060608201905061071660008301866106e3565b61072360208301856106f2565b61073060408301846106e3565b949350505050565b600060208201905061074d60008301846106f2565b92915050565b60008151905061076281610624565b92915050565b600081519050610777816105c6565b92915050565b600080600080600060a08688031215610799576107986104fc565b5b60006107a788828901610753565b95505060206107b888828901610753565b94505060406107c988828901610753565b93505060606107da88828901610768565b92505060806107eb88828901610753565b9150509295509295909350565b600082825260208201905092915050565b7f4e6f7420746865206f776e657221000000000000000000000000000000000000600082015250565b600061083f600e836107f8565b915061084a82610809565b602082019050919050565b6000602082019050818103600083015261086e81610832565b905091905056fea26469706673582212204de3e535cbbd4ed5604cb5bd9acbae6af2057af1c74f66276ce26f24a12d82c764736f6c63430008090033";

export class MintGuardAllowlist__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MintGuardAllowlist> {
    return super.deploy(overrides || {}) as Promise<MintGuardAllowlist>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MintGuardAllowlist {
    return super.attach(address) as MintGuardAllowlist;
  }
  connect(signer: Signer): MintGuardAllowlist__factory {
    return super.connect(signer) as MintGuardAllowlist__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MintGuardAllowlistInterface {
    return new utils.Interface(_abi) as MintGuardAllowlistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MintGuardAllowlist {
    return new Contract(address, _abi, signerOrProvider) as MintGuardAllowlist;
  }
}
