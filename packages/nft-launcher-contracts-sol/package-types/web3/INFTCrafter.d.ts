/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface INFTCrafter extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): INFTCrafter;
  clone(): INFTCrafter;
  methods: {
    craftForRecipe(
      recipeId: number | string | BN,
      inputERC721Ids: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    createRecipe(
      inputsERC20: [string, number | string | BN, number | string | BN][],
      inputsERC721: [string, number | string | BN][],
      outputsERC20: [string, number | string | BN][],
      outputsERC721: [string, (number | string | BN)[]][]
    ): NonPayableTransactionObject<void>;

    createRecipeWithDeposit(
      inputsERC20: [string, number | string | BN, number | string | BN][],
      inputsERC721: [string, number | string | BN][],
      outputsERC20: [string, number | string | BN][],
      outputsERC721: [string, (number | string | BN)[]][],
      craftAmount: number | string | BN,
      outputsERC721Ids: (number | string | BN)[][]
    ): NonPayableTransactionObject<void>;

    depositForRecipe(
      recipeId: number | string | BN,
      craftAmount: number | string | BN,
      outputsERC721Ids: (number | string | BN)[][]
    ): NonPayableTransactionObject<void>;

    getRecipe(recipeId: number | string | BN): NonPayableTransactionObject<{
      0: [string, string, string][];
      1: [string, string][];
      2: [string, string][];
      3: [string, string[]][];
      4: string;
      5: string;
    }>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    withdrawForRecipe(
      recipeId: number | string | BN,
      withdrawCraftAmount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
