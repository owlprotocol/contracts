/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type SetAllowedMints = ContractEventLog<{
  minterContract: string;
  speciesId: string;
  user: string;
  mintsAllowed: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface MintGuardLimitedMints extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MintGuardLimitedMints;
  clone(): MintGuardLimitedMints;
  methods: {
    allowMint(
      speciesId: number | string | BN,
      user: string
    ): NonPayableTransactionObject<boolean>;

    setUserMints(
      minterContract: string,
      speciesId: number | string | BN,
      user: string,
      mintsAllowed: number | string | BN
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    SetAllowedMints(cb?: Callback<SetAllowedMints>): EventEmitter;
    SetAllowedMints(
      options?: EventOptions,
      cb?: Callback<SetAllowedMints>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "SetAllowedMints", cb: Callback<SetAllowedMints>): void;
  once(
    event: "SetAllowedMints",
    options: EventOptions,
    cb: Callback<SetAllowedMints>
  ): void;
}
