/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewClone = ContractEventLog<{
  proxyAddr: string;
  logicAddr: string;
  salt: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Create2CloneFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Create2CloneFactory;
  clone(): Create2CloneFactory;
  methods: {
    create2AtomicallyClone(
      logicAddr: string,
      salt: string | number[],
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    create2Clone(
      logicAddr: string,
      salt: string | number[]
    ): NonPayableTransactionObject<string>;

    getBytecodeHash(logicAddr: string): NonPayableTransactionObject<string>;

    getCloneAddr(
      deployer: string,
      logicAddr: string,
      salt: string | number[]
    ): NonPayableTransactionObject<string>;

    getInitBytes(logicAddr: string): NonPayableTransactionObject<string>;
  };
  events: {
    NewClone(cb?: Callback<NewClone>): EventEmitter;
    NewClone(options?: EventOptions, cb?: Callback<NewClone>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewClone", cb: Callback<NewClone>): void;
  once(event: "NewClone", options: EventOptions, cb: Callback<NewClone>): void;
}
