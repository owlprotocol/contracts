/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CreateRecipe = ContractEventLog<{
  recipeId: string;
  owner: string;
  inputsERC20: [string, string, string][];
  inputsERC721: [string, string][];
  outputsERC20: [string, string][];
  outputsERC721: [string, string[]][];
  0: string;
  1: string;
  2: [string, string, string][];
  3: [string, string][];
  4: [string, string][];
  5: [string, string[]][];
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type RecipeCraft = ContractEventLog<{
  recipeId: string;
  craftedAmount: string;
  crafter: string;
  0: string;
  1: string;
  2: string;
}>;
export type RecipeUpdate = ContractEventLog<{
  recipeId: string;
  0: string;
}>;

export interface CrafterMint extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CrafterMint;
  clone(): CrafterMint;
  methods: {
    craftForRecipe(
      recipeId: number | string | BN,
      inputERC721Ids: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    createRecipe(
      inputsERC20: [string, number | string | BN, number | string | BN][],
      inputsERC721: [string, number | string | BN][],
      outputsERC20: [string, number | string | BN][],
      outputsERC721: [string, (number | string | BN)[]][]
    ): NonPayableTransactionObject<void>;

    getRecipe(recipeId: number | string | BN): NonPayableTransactionObject<{
      inputsERC20: [string, string, string][];
      inputsERC721: [string, string][];
      outputsERC20: [string, string][];
      outputsERC721: [string, string[]][];
      craftedAmount: string;
      0: [string, string, string][];
      1: [string, string][];
      2: [string, string][];
      3: [string, string[]][];
      4: string;
    }>;

    initialize(): NonPayableTransactionObject<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: string | number[]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    CreateRecipe(cb?: Callback<CreateRecipe>): EventEmitter;
    CreateRecipe(
      options?: EventOptions,
      cb?: Callback<CreateRecipe>
    ): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    RecipeCraft(cb?: Callback<RecipeCraft>): EventEmitter;
    RecipeCraft(
      options?: EventOptions,
      cb?: Callback<RecipeCraft>
    ): EventEmitter;

    RecipeUpdate(cb?: Callback<RecipeUpdate>): EventEmitter;
    RecipeUpdate(
      options?: EventOptions,
      cb?: Callback<RecipeUpdate>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CreateRecipe", cb: Callback<CreateRecipe>): void;
  once(
    event: "CreateRecipe",
    options: EventOptions,
    cb: Callback<CreateRecipe>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "RecipeCraft", cb: Callback<RecipeCraft>): void;
  once(
    event: "RecipeCraft",
    options: EventOptions,
    cb: Callback<RecipeCraft>
  ): void;

  once(event: "RecipeUpdate", cb: Callback<RecipeUpdate>): void;
  once(
    event: "RecipeUpdate",
    options: EventOptions,
    cb: Callback<RecipeUpdate>
  ): void;
}
