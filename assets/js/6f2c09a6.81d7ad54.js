"use strict";(self.webpackChunkowlprotocol_contracts_docs=self.webpackChunkowlprotocol_contracts_docs||[]).push([[8629],{7522:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>m});var r=n(9901);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),d=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=d(t.components);return r.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),c=d(n),m=a,f=c["".concat(s,".").concat(m)]||c[m]||p[m]||i;return n?r.createElement(f,o(o({ref:e},u),{},{components:n})):r.createElement(f,o({ref:e},u))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:a,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4426:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var r=n(2875),a=n(358),i=(n(9901),n(7522)),o=["components"],l={},s=void 0,d={unversionedId:"contract-docs/Transformer",id:"contract-docs/Transformer",title:"Transformer",description:"Transformer",source:"@site/docs/contract-docs/Transformer.md",sourceDirName:"contract-docs",slug:"/contract-docs/Transformer",permalink:"/contracts/docs/contract-docs/Transformer",draft:!1,editUrl:"https://github.com/owlprotocol/contracts/docs/contract-docs/Transformer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SourceRandom",permalink:"/contracts/docs/contract-docs/SourceRandom"},next:{title:"TransformerCore",permalink:"/contracts/docs/contract-docs/TransformerCore"}},u={},p=[{value:"Transformer",id:"transformer",level:2},{value:"version",id:"version",level:3},{value:"ERC165TAG",id:"erc165tag",level:3},{value:"Transform",id:"transform",level:3},{value:"burnAddress",id:"burnaddress",level:3},{value:"inputs",id:"inputs",level:3},{value:"nftAddr",id:"nftaddr",level:3},{value:"genes",id:"genes",level:3},{value:"modifications",id:"modifications",level:3},{value:"initialize",id:"initialize",level:3},{value:"proxyInitialize",id:"proxyinitialize",level:3},{value:"__Transformer_init",id:"__transformer_init",level:3},{value:"__Transformer_init_unchained",id:"__transformer_init_unchained",level:3},{value:"transform",id:"transform-1",level:3},{value:"supportsInterface",id:"supportsinterface",level:3}],c={toc:p};function m(t){var e=t.components,n=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"transformer"},"Transformer"),(0,i.kt)("p",null,'Contract module that enables "transformation" of {ERC721OwlAttributes}\ntokens. The assumption with {ERC721OwlAttributes} is that the attributes of\none individual token are encoded into a number, called "dna". This number is\nthen mapped to the ',(0,i.kt)("inlineCode",{parentName:"p"},"tokenId"),". Transforming configuration is set by one\n{Ingredient}[] (the inputs) and a {GeneMod}[] (the modifications). The inputs\nare the cost for the modifications to go through (as set by the contract\ndeployer)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"enum GeneTransformType {\n    none,\n    add,\n    sub,\n    mult,\n    set\n}\n\nstruct GeneMod {\n    GeneTransformType geneTransformType;\n    uint256 value;\n}\n\nstruct Ingredient {\n    TokenType token;\n    ConsumableType consumableType;\n    address contractAddr;\n    uint256[] amounts;\n    uint256[] tokenIds;\n}\n")),(0,i.kt)("p",null,"Once the {Ingredient}s in the ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs"),' array have been used/consumed, the\ncontract will update the "dna" associated with the ',(0,i.kt)("inlineCode",{parentName:"p"},"tokenId"),' submitted by the\nuser. See {ERC721OwlAttributes} for an in-depth explanation of how "dna"\nencodes ',(0,i.kt)("inlineCode",{parentName:"p"},"tokenId")," attributes."),(0,i.kt)("h3",{id:"version"},"version"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"string version\n")),(0,i.kt)("h3",{id:"erc165tag"},"ERC165TAG"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes4 ERC165TAG\n")),(0,i.kt)("h3",{id:"transform"},"Transform"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event Transform(address nftAddr, uint256 tokenId, uint256 oldDna, uint256 newDna)\n")),(0,i.kt)("h3",{id:"burnaddress"},"burnAddress"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"address burnAddress\n")),(0,i.kt)("h3",{id:"inputs"},"inputs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct PluginsCore.Ingredient[] inputs\n")),(0,i.kt)("h3",{id:"nftaddr"},"nftAddr"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"address nftAddr\n")),(0,i.kt)("h3",{id:"genes"},"genes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"uint8[] genes\n")),(0,i.kt)("h3",{id:"modifications"},"modifications"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct TransformerCore.GeneMod[] modifications\n")),(0,i.kt)("h3",{id:"initialize"},"initialize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize(address _admin, address _burnAddress, struct PluginsCore.Ingredient[] _inputs, uint8[] _genes, struct TransformerCore.GeneMod[] _modifications, address _nftAddr, address _forwarder) external\n")),(0,i.kt)("p",null,"Initializes contract (replaces constructor in proxy pattern)"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"_admin"),(0,i.kt)("td",{parentName:"tr",align:null},"address"),(0,i.kt)("td",{parentName:"tr",align:null},"owner, no special permissions as of current release")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"_burnAddress"),(0,i.kt)("td",{parentName:"tr",align:null},"address"),(0,i.kt)("td",{parentName:"tr",align:null},"Burn address for burn inputs")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"_inputs"),(0,i.kt)("td",{parentName:"tr",align:null},"struct PluginsCore.Ingredient[]"),(0,i.kt)("td",{parentName:"tr",align:null},"input ingredients for configuration")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"_genes"),(0,i.kt)("td",{parentName:"tr",align:null},"uint8[]"),(0,i.kt)("td",{parentName:"tr",align:null},"array denoting start location of genes within the 256 bit DNA")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"_modifications"),(0,i.kt)("td",{parentName:"tr",align:null},"struct TransformerCore.GeneMod[]"),(0,i.kt)("td",{parentName:"tr",align:null},"array denoting the modifications to be made upon each gene after transformation")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"_nftAddr"),(0,i.kt)("td",{parentName:"tr",align:null},"address"),(0,i.kt)("td",{parentName:"tr",align:null},"the address of the ERC721Owl contract")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"_forwarder"),(0,i.kt)("td",{parentName:"tr",align:null},"address"),(0,i.kt)("td",{parentName:"tr",align:null},"trusted forwarder address for open GSN")))),(0,i.kt)("h3",{id:"proxyinitialize"},"proxyInitialize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function proxyInitialize(address _admin, address _burnAddress, struct PluginsCore.Ingredient[] _inputs, uint8[] _genes, struct TransformerCore.GeneMod[] _modifications, address _nftAddr, address _forwarder) external\n")),(0,i.kt)("p",null,"Initializes contract through beacon proxy (replaces constructor in\nproxy pattern)"),(0,i.kt)("h3",{id:"__transformer_init"},"__Transformer_init"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function __Transformer_init(address _admin, address _burnAddress, struct PluginsCore.Ingredient[] _inputs, uint8[] _genes, struct TransformerCore.GeneMod[] _modifications, address _nftAddr, address _forwarder) internal\n")),(0,i.kt)("p",null,"performs validations that ",(0,i.kt)("inlineCode",{parentName:"p"},"_inputs")," are valid and\ncreates the configuration"),(0,i.kt)("h3",{id:"__transformer_init_unchained"},"__Transformer_init_unchained"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function __Transformer_init_unchained(address _burnAddress, struct PluginsCore.Ingredient[] _inputs, uint8[] _genes, struct TransformerCore.GeneMod[] _modifications, address _nftAddr) internal\n")),(0,i.kt)("p",null,"performs validations that ",(0,i.kt)("inlineCode",{parentName:"p"},"_inputs")," and are valid and\ncreates the configuration"),(0,i.kt)("h3",{id:"transform-1"},"transform"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function transform(uint256 tokenId, uint256[][] _inputERC721Ids) external\n")),(0,i.kt)("p",null,"the transformer instance from which this method is called from\nmust have ERC721OwlAttributes DNA_ROLE"),(0,i.kt)("p",null,"Used to transform. Consumes inputs and modifies DNA of inputted NFT\ntoken."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"tokenId"),(0,i.kt)("td",{parentName:"tr",align:null},"uint256"),(0,i.kt)("td",{parentName:"tr",align:null},"ID of NFT token to transform")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"_inputERC721Ids"),(0,i.kt)("td",{parentName:"tr",align:null},"uint256","[][]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array of pre-approved NFTs for crafting usage.")))),(0,i.kt)("h3",{id:"supportsinterface"},"supportsInterface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool)\n")),(0,i.kt)("p",null,"ERC165 Support"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"interfaceId"),(0,i.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,i.kt)("td",{parentName:"tr",align:null},"hash of the interface testing for")))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"[0]"),(0,i.kt)("td",{parentName:"tr",align:null},"bool"),(0,i.kt)("td",{parentName:"tr",align:null},"bool whether interface is supported")))))}m.isMDXComponent=!0}}]);