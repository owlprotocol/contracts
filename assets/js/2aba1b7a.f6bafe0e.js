"use strict";(self.webpackChunkowlprotocol_contracts_docs=self.webpackChunkowlprotocol_contracts_docs||[]).push([[5781],{7522:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>c});var a=n(9901);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),d=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=d(t.components);return a.createElement(p.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),m=d(n),c=r,k=m["".concat(p,".").concat(c)]||m[c]||s[c]||l;return n?a.createElement(k,i(i({ref:e},u),{},{components:n})):a.createElement(k,i({ref:e},u))}));function c(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6056:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var a=n(2875),r=n(358),l=(n(9901),n(7522)),i=["components"],o={},p=void 0,d={unversionedId:"contract-docs/CrafterMint",id:"contract-docs/CrafterMint",title:"CrafterMint",description:"CrafterMint",source:"@site/docs/contract-docs/CrafterMint.md",sourceDirName:"contract-docs",slug:"/contract-docs/CrafterMint",permalink:"/contracts/docs/contract-docs/CrafterMint",draft:!1,editUrl:"https://github.com/owlprotocol/contracts/docs/contract-docs/CrafterMint.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CrafterCore",permalink:"/contracts/docs/contract-docs/CrafterCore"},next:{title:"CrafterTransfer",permalink:"/contracts/docs/contract-docs/CrafterTransfer"}},u={},s=[{value:"CrafterMint",id:"craftermint",level:2},{value:"VERSION",id:"version",level:3},{value:"ERC165TAG",id:"erc165tag",level:3},{value:"constructor",id:"constructor",level:3},{value:"initialize",id:"initialize",level:3},{value:"proxyInitialize",id:"proxyinitialize",level:3},{value:"__CrafterMint_init",id:"__craftermint_init",level:3},{value:"__CrafterMint_init_unchained",id:"__craftermint_init_unchained",level:3},{value:"deposit",id:"deposit",level:3},{value:"_deposit",id:"_deposit",level:3},{value:"withdraw",id:"withdraw",level:3},{value:"craft",id:"craft",level:3},{value:"_addOutputs",id:"_addoutputs",level:3},{value:"_removeOutputs",id:"_removeoutputs",level:3},{value:"supportsInterface",id:"supportsinterface",level:3}],m={toc:s};function c(t){var e=t.components,n=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"craftermint"},"CrafterMint"),(0,l.kt)("p",null,"Contract module that enables crafting of different types of assets\n(ERC20, ERC721, ERC1155) whose crafting outputs are minted to the caller."),(0,l.kt)("p",null,"Crafting configuration is designated by two {Ingredient}[]. One array is the\n",(0,l.kt)("inlineCode",{parentName:"p"},"inputs")," and the other is the ",(0,l.kt)("inlineCode",{parentName:"p"},"outputs"),". The contract allows for the ",(0,l.kt)("inlineCode",{parentName:"p"},"inputs"),"\nto be redeemed for the ",(0,l.kt)("inlineCode",{parentName:"p"},"outputs"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"craftableAmount")," times."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct Ingredient {\n    TokenType token;\n    ConsumableType consumableType;\n    address contractAddr;\n    uint256[] amounts;\n    uint256[] tokenIds;\n}\n")),(0,l.kt)("p",null,"Configuration is set in the initializers and cannot be edited once the\ncontract has been launched Other configurations will require their own\ncontract to be deployed"),(0,l.kt)("p",null,"However, ",(0,l.kt)("inlineCode",{parentName:"p"},"craftableAmount")," can be dynamically updated through the {deposit}\nand {withdraw} functions which are only accessible to ",(0,l.kt)("inlineCode",{parentName:"p"},"DEFAULT_ADMIN_ROLE")),(0,l.kt)("p",null,"Each Ingredient has a ",(0,l.kt)("inlineCode",{parentName:"p"},"consumableType")," field.* This field is for the ",(0,l.kt)("inlineCode",{parentName:"p"},"inputs"),"\nelements and ignored by the ",(0,l.kt)("inlineCode",{parentName:"p"},"outputs")," elements. ERC20 and ERC1155 ",(0,l.kt)("inlineCode",{parentName:"p"},"inputs"),"\nelements can be ",(0,l.kt)("inlineCode",{parentName:"p"},"unaffected")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"burned"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"unaffected")," will check for\nownership/balance while ",(0,l.kt)("inlineCode",{parentName:"p"},"burned")," will send the asset(s) to the ",(0,l.kt)("inlineCode",{parentName:"p"},"burnAddress"),".\nERC721 inputs can be ",(0,l.kt)("inlineCode",{parentName:"p"},"NTime")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"burned"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"NTime")," allows for a specfic\n",(0,l.kt)("inlineCode",{parentName:"p"},"tokenId")," to only be used 'n times', as defined by contract deployer."),(0,l.kt)("p",null,"ERC20 ",(0,l.kt)("inlineCode",{parentName:"p"},"inputs")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"outputs")," elements should have one number in the ",(0,l.kt)("inlineCode",{parentName:"p"},"amounts"),"\narray denoting ERC20 token amount requirement.* ",(0,l.kt)("inlineCode",{parentName:"p"},"tokenIds")," should be empty."),(0,l.kt)("p",null,"NTime consumable type ERC721 inputs should have empty ",(0,l.kt)("inlineCode",{parentName:"p"},"tokenIds")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"amounts[0]")," equal to ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," - the maximum number of times the input can be\nused.",(0,l.kt)("em",{parentName:"p"}," Burned ERC721 ",(0,l.kt)("inlineCode",{parentName:"em"},"inputs")," elements should have ")," empty ",(0,l.kt)("inlineCode",{parentName:"p"},"amounts")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"tokenIds")," array. This contract accepts ",(0,l.kt)("em",{parentName:"p"},"all")," ",(0,l.kt)("inlineCode",{parentName:"p"},"tokenId"),"s from an ERC721\ncontract as inputs. ERC721 ",(0,l.kt)("inlineCode",{parentName:"p"},"outputs")," elements must have empty ",(0,l.kt)("inlineCode",{parentName:"p"},"amounts"),"\narray. ",(0,l.kt)("inlineCode",{parentName:"p"},"tokenIds")," array length should be ",(0,l.kt)("inlineCode",{parentName:"p"},"craftableAmount"),". The ",(0,l.kt)("inlineCode",{parentName:"p"},"tokenIds"),"\narray will contain the ",(0,l.kt)("inlineCode",{parentName:"p"},"tokenIds")," to be transferred out when {craft} is\ncalled. Important to note that output transfers will be from the ",(0,l.kt)("em",{parentName:"p"},"end")," of the\narray since ",(0,l.kt)("inlineCode",{parentName:"p"},".pop()")," is used."),(0,l.kt)("p",null,"ERC1155 ",(0,l.kt)("inlineCode",{parentName:"p"},"inputs")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"outputs")," elements should have the length of ",(0,l.kt)("inlineCode",{parentName:"p"},"amounts"),"\nand ",(0,l.kt)("inlineCode",{parentName:"p"},"tokenIds")," array be the same. The indices will be linked where each index\ndenotes how much of each ERC1155 ",(0,l.kt)("inlineCode",{parentName:"p"},"tokenId")," is required."),(0,l.kt)("p",null,"This module is used through composition. It can be deployed to create\ncrafting logic with asset contracts that are already on chain and active;\nplug-and-play, so to speak."),(0,l.kt)("h3",{id:"version"},"VERSION"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string VERSION\n")),(0,l.kt)("h3",{id:"erc165tag"},"ERC165TAG"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes4 ERC165TAG\n")),(0,l.kt)("h3",{id:"constructor"},"constructor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"constructor() public\n")),(0,l.kt)("h3",{id:"initialize"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize(address _admin, address _burnAddress, uint96 _craftableAmount, struct PluginsCore.Ingredient[] _inputs, struct PluginsCore.Ingredient[] _outputs, address _forwarder) external\n")),(0,l.kt)("p",null,"Initializes contract (replaces constructor in proxy pattern)"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_admin"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"owner, can control outputs on contract")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_burnAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Burn address for burn inputs")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_craftableAmount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint96"),(0,l.kt)("td",{parentName:"tr",align:null},"limit on the number of times this configuration can be crafted")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_inputs"),(0,l.kt)("td",{parentName:"tr",align:null},"struct PluginsCore.Ingredient[]"),(0,l.kt)("td",{parentName:"tr",align:null},"inputs for configuration")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_outputs"),(0,l.kt)("td",{parentName:"tr",align:null},"struct PluginsCore.Ingredient[]"),(0,l.kt)("td",{parentName:"tr",align:null},"outputs for configuration")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_forwarder"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"trusted forwarder address for openGSN")))),(0,l.kt)("h3",{id:"proxyinitialize"},"proxyInitialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function proxyInitialize(address _admin, address _burnAddress, uint96 _craftableAmount, struct PluginsCore.Ingredient[] _inputs, struct PluginsCore.Ingredient[] _outputs, address _forwarder) external\n")),(0,l.kt)("p",null,"Initializes contract through beacon proxy (replaces constructor in\nproxy pattern)"),(0,l.kt)("h3",{id:"__craftermint_init"},"__CrafterMint_init"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function __CrafterMint_init(address _admin, address _burnAddress, uint96 _craftableAmount, struct PluginsCore.Ingredient[] _inputs, struct PluginsCore.Ingredient[] _outputs, address _forwarder) internal\n")),(0,l.kt)("p",null,"performs validations that ",(0,l.kt)("inlineCode",{parentName:"p"},"_inputs")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"_outputs")," are valid and\ncreates the configuration"),(0,l.kt)("h3",{id:"__craftermint_init_unchained"},"__CrafterMint_init_unchained"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function __CrafterMint_init_unchained(uint96 _craftableAmount, struct PluginsCore.Ingredient[] _outputs) internal\n")),(0,l.kt)("p",null,"performs validations that ",(0,l.kt)("inlineCode",{parentName:"p"},"_inputs")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"_outputs")," are valid and\ncreates the configuration"),(0,l.kt)("h3",{id:"deposit"},"deposit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function deposit(uint96 amount, uint256[][] _outputsERC721Ids) public\n")),(0,l.kt)("p",null,"Must be ",(0,l.kt)("inlineCode",{parentName:"p"},"DEFAULT_ADMIN_ROLE"),"."),(0,l.kt)("p",null,"Used to deposit configuration outputs."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint96"),(0,l.kt)("td",{parentName:"tr",align:null},"How many more times the configuration should be craftable")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_outputsERC721Ids"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256","[][]"),(0,l.kt)("td",{parentName:"tr",align:null},"2D-array of ERC721 tokens used in crafting Example of ",(0,l.kt)("inlineCode",{parentName:"td"},"_outputERC721Ids")," with ",(0,l.kt)("inlineCode",{parentName:"td"},"amount = 2")," with 3 ",(0,l.kt)("inlineCode",{parentName:"td"},"Ingredient"),"s in ",(0,l.kt)("inlineCode",{parentName:"td"},"outputs")," with ",(0,l.kt)("inlineCode",{parentName:"td"},"TokenType.ERC721")," ",(0,l.kt)("inlineCode",{parentName:"td"},"[  [1, 2]  [3, 4]  [5, 6] ]"))))),(0,l.kt)("h3",{id:"_deposit"},"_deposit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _deposit(uint96 amount, uint256[][] _outputsERC721Ids) internal\n")),(0,l.kt)("p",null,"Must be ",(0,l.kt)("inlineCode",{parentName:"p"},"DEFAULT_ADMIN_ROLE")),(0,l.kt)("p",null,"Used to deposit configuration outputs. This is only ever directly\ncalled in intializations."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint96"),(0,l.kt)("td",{parentName:"tr",align:null},"How many times the configuration should be craftable")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_outputsERC721Ids"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256","[][]"),(0,l.kt)("td",{parentName:"tr",align:null},"2D-array of ERC721 tokens used in crafting")))),(0,l.kt)("h3",{id:"withdraw"},"withdraw"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function withdraw(uint96 amount) external\n")),(0,l.kt)("p",null,"Must be ",(0,l.kt)("inlineCode",{parentName:"p"},"DEFAULT_ADMIN_ROLE")),(0,l.kt)("p",null,"Used to withdraw configuration outputs out of contract by decreasing\n",(0,l.kt)("inlineCode",{parentName:"p"},"craftableAmount"),"."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint96"),(0,l.kt)("td",{parentName:"tr",align:null},"How many sets of outputs should be withdrawn")))),(0,l.kt)("h3",{id:"craft"},"craft"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function craft(uint96 amount, uint256[][] _inputERC721Ids) external\n")),(0,l.kt)("p",null,"Craft ",(0,l.kt)("inlineCode",{parentName:"p"},"amount")),(0,l.kt)("p",null,"Used to craft. Consumes inputs and mints outputs."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint96"),(0,l.kt)("td",{parentName:"tr",align:null},"How many times to craft")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_inputERC721Ids"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256","[][]"),(0,l.kt)("td",{parentName:"tr",align:null},"Array of pre-approved NFTs for crafting usage. Example of ",(0,l.kt)("inlineCode",{parentName:"td"},"_inputERC721Ids")," with ",(0,l.kt)("inlineCode",{parentName:"td"},"amount = 2")," with 3 ",(0,l.kt)("inlineCode",{parentName:"td"},"Ingredient"),"s in ",(0,l.kt)("inlineCode",{parentName:"td"},"inputs")," with ",(0,l.kt)("inlineCode",{parentName:"td"},"TokenType.ERC721")," ",(0,l.kt)("inlineCode",{parentName:"td"},"[  [1, 2]  [3, 4]  [5, 6] ]"))))),(0,l.kt)("h3",{id:"_addoutputs"},"_addOutputs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _addOutputs(uint256 amount, uint256[][] _outputsERC721Ids, address) internal\n")),(0,l.kt)("p",null,"adds outputs to the contract balances"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"sets of outputs to add")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_outputsERC721Ids"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256","[][]"),(0,l.kt)("td",{parentName:"tr",align:null},"if there are ERC721 tokens present, supply their ",(0,l.kt)("inlineCode",{parentName:"td"},"tokenId"),"s Example of ",(0,l.kt)("inlineCode",{parentName:"td"},"_outputERC721Ids")," with ",(0,l.kt)("inlineCode",{parentName:"td"},"amount = 2")," with 3 ",(0,l.kt)("inlineCode",{parentName:"td"},"Ingredient"),"s in ",(0,l.kt)("inlineCode",{parentName:"td"},"outputs")," with ",(0,l.kt)("inlineCode",{parentName:"td"},"TokenType.ERC721")," ",(0,l.kt)("inlineCode",{parentName:"td"},"[  [1, 2]  [3, 4]  [5, 6] ]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"_removeoutputs"},"_removeOutputs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _removeOutputs(uint96 amount, address to) internal\n")),(0,l.kt)("p",null,"removes outputs from the contract balances. If to != address(0),\nthen assets are also minted to that address"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint96"),(0,l.kt)("td",{parentName:"tr",align:null},"sets of outputs to remove")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"to"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"address to send outputs to, if applicable")))),(0,l.kt)("h3",{id:"supportsinterface"},"supportsInterface"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool)\n")),(0,l.kt)("p",null,"ERC165 Support"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"interfaceId"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,l.kt)("td",{parentName:"tr",align:null},"hash of the interface testing for")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"bool whether interface is supported")))))}c.isMDXComponent=!0}}]);