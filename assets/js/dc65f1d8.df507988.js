"use strict";(self.webpackChunkowlprotocol_contracts_docs=self.webpackChunkowlprotocol_contracts_docs||[]).push([[820],{7522:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(9901);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return a?n.createElement(y,i(i({ref:t},p),{},{components:a})):n.createElement(y,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1745:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=a(2875),r=a(358),l=(a(9901),a(7522)),i=["components"],o={},s=void 0,c={unversionedId:"contract-docs/NFTOwnershipPaymaster",id:"contract-docs/NFTOwnershipPaymaster",title:"NFTOwnershipPaymaster",description:"NFTOwnershipPaymaster",source:"@site/docs/contract-docs/NFTOwnershipPaymaster.md",sourceDirName:"contract-docs",slug:"/contract-docs/NFTOwnershipPaymaster",permalink:"/contracts/docs/contract-docs/NFTOwnershipPaymaster",draft:!1,editUrl:"https://github.com/owlprotocol/contracts/docs/contract-docs/NFTOwnershipPaymaster.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MinterSimpleMerkle",permalink:"/contracts/docs/contract-docs/MinterSimpleMerkle"},next:{title:"NaivePaymaster",permalink:"/contracts/docs/contract-docs/NaivePaymaster"}},p={},d=[{value:"NFTOwnershipPaymaster",id:"nftownershippaymaster",level:2},{value:"PreRelayed",id:"prerelayed",level:3},{value:"PostRelayed",id:"postrelayed",level:3},{value:"acceptableToken",id:"acceptabletoken",level:3},{value:"payer",id:"payer",level:3},{value:"limit",id:"limit",level:3},{value:"numTimes",id:"numtimes",level:3},{value:"constructor",id:"constructor",level:3},{value:"initialize",id:"initialize",level:3},{value:"proxyinitialize",id:"proxyinitialize",level:3},{value:"__NFTOwnershipPaymaster_init",id:"__nftownershippaymaster_init",level:3},{value:"__NFTOwnershipPaymaster_init_unchained",id:"__nftownershippaymaster_init_unchained",level:3},{value:"getNumTransactions",id:"getnumtransactions",level:3},{value:"preRelayedCall",id:"prerelayedcall",level:3},{value:"postRelayedCall",id:"postrelayedcall",level:3},{value:"versionPaymaster",id:"versionpaymaster",level:3}],u={toc:d};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"nftownershippaymaster"},"NFTOwnershipPaymaster"),(0,l.kt)("p",null,"This paymaster will approve transactions sent through a relay provider\nif the client owns an approved ERC721 token in a collection. The paymaster\ntakes in an address of a collection of acceptable tokenIds that a client\ncan own to be able to complete a gasless transaction. A mapping also keeps\ntrack of how many times a specific tokenId is used to get approved, and there\nis a limit on how many times each tokenId can be used."),(0,l.kt)("h3",{id:"prerelayed"},"PreRelayed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event PreRelayed()\n")),(0,l.kt)("h3",{id:"postrelayed"},"PostRelayed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event PostRelayed()\n")),(0,l.kt)("h3",{id:"acceptabletoken"},"acceptableToken"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"contract IERC721Upgradeable acceptableToken\n")),(0,l.kt)("h3",{id:"payer"},"payer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"address payer\n")),(0,l.kt)("h3",{id:"limit"},"limit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 limit\n")),(0,l.kt)("h3",{id:"numtimes"},"numTimes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => uint256) numTimes\n")),(0,l.kt)("h3",{id:"constructor"},"constructor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"constructor() public\n")),(0,l.kt)("h3",{id:"initialize"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize(address _admin, address _acceptableToken, uint256 _limit, address _forwarder) external\n")),(0,l.kt)("p",null,"initializes a paymaster contract"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_admin"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"admin of the paymaster")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_acceptableToken"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"address for acceptable token contract for approving transactions")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_limit"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"the maximum number of times a tokenId can be used to approve a transaction")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_forwarder"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"address for the trusted forwarder for open GSN")))),(0,l.kt)("h3",{id:"proxyinitialize"},"proxyinitialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function proxyinitialize(address _admin, address _acceptableToken, uint256 _limit, address _forwarder) external\n")),(0,l.kt)("h3",{id:"__nftownershippaymaster_init"},"__NFTOwnershipPaymaster_init"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function __NFTOwnershipPaymaster_init(address _admin, address _acceptableToken, uint256 _limit, address _forwarder) internal\n")),(0,l.kt)("h3",{id:"__nftownershippaymaster_init_unchained"},"__NFTOwnershipPaymaster_init_unchained"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function __NFTOwnershipPaymaster_init_unchained(address _acceptableToken, uint256 _limit) internal\n")),(0,l.kt)("h3",{id:"getnumtransactions"},"getNumTransactions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getNumTransactions(uint256 tokenId) external view returns (uint256)\n")),(0,l.kt)("p",null,"function that returns the number of times a tokenId has been used\nfor approving a transaction"),(0,l.kt)("h3",{id:"prerelayedcall"},"preRelayedCall"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function preRelayedCall(struct GsnTypes.RelayRequest relayRequest, bytes signature, bytes approvalData, uint256 maxPossibleGas) external virtual returns (bytes context, bool revertOnRecipientRevert)\n")),(0,l.kt)("p",null,"function that performs all access control. It verifies that\nthe client owns an acceptable token in the approved collection.\nit also ensures that the tokenId usage has not reached it's limit"),(0,l.kt)("h3",{id:"postrelayedcall"},"postRelayedCall"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function postRelayedCall(bytes context, bool success, uint256 gasUseWithoutPost, struct GsnTypes.RelayData relayData) external virtual\n")),(0,l.kt)("p",null,"function that performs all bookkeeping after a function call\nhas been made."),(0,l.kt)("h3",{id:"versionpaymaster"},"versionPaymaster"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function versionPaymaster() external view virtual returns (string)\n")),(0,l.kt)("p",null,"function that is required for open GSN paymasters"))}m.isMDXComponent=!0}}]);