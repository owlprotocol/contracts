"use strict";(self.webpackChunkowlprotocol_contracts_docs=self.webpackChunkowlprotocol_contracts_docs||[]).push([[6228],{7522:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>g});var r=n(9901);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},o=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,o=d(e,["components","mdxType","originalType","parentName"]),p=s(n),g=a,m=p["".concat(u,".").concat(g)]||p[g]||c[g]||i;return n?r.createElement(m,l(l({ref:t},o),{},{components:n})):r.createElement(m,l({ref:t},o))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=p;var d={};for(var u in t)hasOwnProperty.call(t,u)&&(d[u]=t[u]);d.originalType=e,d.mdxType="string"==typeof e?e:a,l[1]=d;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>u,default:()=>g,frontMatter:()=>d,metadata:()=>s,toc:()=>c});var r=n(2875),a=n(358),i=(n(9901),n(7522)),l=["components"],d={},u=void 0,s={unversionedId:"contract-docs/MinterBreeding",id:"contract-docs/MinterBreeding",title:"MinterBreeding",description:"MinterBreeding",source:"@site/docs/contract-docs/MinterBreeding.md",sourceDirName:"contract-docs",slug:"/contract-docs/MinterBreeding",permalink:"/contracts/docs/contract-docs/MinterBreeding",draft:!1,editUrl:"https://github.com/owlprotocol/contracts/docs/contract-docs/MinterBreeding.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MinterAutoId",permalink:"/contracts/docs/contract-docs/MinterAutoId"},next:{title:"MinterCore",permalink:"/contracts/docs/contract-docs/MinterCore"}},o={},c=[{value:"MinterBreeding",id:"minterbreeding",level:2},{value:"defaultGenesNum",id:"defaultgenesnum",level:3},{value:"defaultRequiredParents",id:"defaultrequiredparents",level:3},{value:"defaultBreedingCooldownSeconds",id:"defaultbreedingcooldownseconds",level:3},{value:"version",id:"version",level:3},{value:"ERC165TAG",id:"erc165tag",level:3},{value:"BreedingRules",id:"breedingrules",level:3},{value:"lastBredTime",id:"lastbredtime",level:3},{value:"_breedingRules",id:"_breedingrules",level:3},{value:"SetBreedingRules",id:"setbreedingrules",level:3},{value:"constructor",id:"constructor",level:3},{value:"initialize",id:"initialize",level:3},{value:"proxyIntiialize",id:"proxyintiialize",level:3},{value:"__MinterBreeding_init",id:"__minterbreeding_init",level:3},{value:"__MinterBreeding_init_unchained",id:"__minterbreeding_init_unchained",level:3},{value:"breed",id:"breed",level:3},{value:"safeBreed",id:"safebreed",level:3},{value:"setBreedingRules",id:"setbreedingrules-1",level:3},{value:"getBreedingRules",id:"getbreedingrules",level:3},{value:"_breedSpecies",id:"_breedspecies",level:3},{value:"_getBreedingRules",id:"_getbreedingrules",level:3},{value:"supportsInterface",id:"supportsinterface",level:3}],p={toc:c};function g(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"minterbreeding"},"MinterBreeding"),(0,i.kt)("p",null,"Decentralized NFT Minter contract"),(0,i.kt)("h3",{id:"defaultgenesnum"},"defaultGenesNum"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"uint8 defaultGenesNum\n")),(0,i.kt)("h3",{id:"defaultrequiredparents"},"defaultRequiredParents"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"uint8 defaultRequiredParents\n")),(0,i.kt)("h3",{id:"defaultbreedingcooldownseconds"},"defaultBreedingCooldownSeconds"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 defaultBreedingCooldownSeconds\n")),(0,i.kt)("h3",{id:"version"},"version"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"string version\n")),(0,i.kt)("h3",{id:"erc165tag"},"ERC165TAG"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes4 ERC165TAG\n")),(0,i.kt)("h3",{id:"breedingrules"},"BreedingRules"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct BreedingRules {\n  uint8 requiredParents;\n  uint16 generationCooldownMultiplier;\n  uint8[] genes;\n  uint256 breedCooldownSeconds;\n  uint256[] mutationRates;\n}\n")),(0,i.kt)("h3",{id:"lastbredtime"},"lastBredTime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => uint256) lastBredTime\n")),(0,i.kt)("h3",{id:"_breedingrules"},"_breedingRules"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct MinterBreeding.BreedingRules _breedingRules\n")),(0,i.kt)("h3",{id:"setbreedingrules"},"SetBreedingRules"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event SetBreedingRules(uint8 requiredParents, uint256 breedCooldownSeconds, uint8[] genes, uint256[] mutationRates)\n")),(0,i.kt)("h3",{id:"constructor"},"constructor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"constructor() public\n")),(0,i.kt)("h3",{id:"initialize"},"initialize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize(address _admin, address _mintFeeToken, address _mintFeeAddress, uint256 _mintFeeAmount, address _nftContractAddr, struct MinterBreeding.BreedingRules breedingRules_, address _forwarder) external\n")),(0,i.kt)("h3",{id:"proxyintiialize"},"proxyIntiialize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function proxyIntiialize(address _admin, address _mintFeeToken, address _mintFeeAddress, uint256 _mintFeeAmount, address _nftContractAddr, struct MinterBreeding.BreedingRules breedingRules_, address _forwarder) external\n")),(0,i.kt)("h3",{id:"__minterbreeding_init"},"__MinterBreeding_init"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function __MinterBreeding_init(address _admin, address _mintFeeToken, address _mintFeeAddress, uint256 _mintFeeAmount, address _nftContractAddr, struct MinterBreeding.BreedingRules breedingRules_, address _forwarder) internal\n")),(0,i.kt)("h3",{id:"__minterbreeding_init_unchained"},"__MinterBreeding_init_unchained"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function __MinterBreeding_init_unchained(struct MinterBreeding.BreedingRules breedingRules_) internal\n")),(0,i.kt)("h3",{id:"breed"},"breed"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function breed(uint256[] parents) public returns (uint256 dna)\n")),(0,i.kt)("p",null,"Create a new type of species and define attributes."),(0,i.kt)("h3",{id:"safebreed"},"safeBreed"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function safeBreed(uint256[] parents) public returns (uint256 dna)\n")),(0,i.kt)("p",null,"Create a new type of species and define attributes."),(0,i.kt)("h3",{id:"setbreedingrules-1"},"setBreedingRules"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setBreedingRules(uint8 requiredParents, uint16 generationCooldownMultiplier, uint256 breedCooldownSeconds, uint8[] genes, uint256[] mutationRates) public\n")),(0,i.kt)("p",null,"Create a new type of species and define attributes."),(0,i.kt)("h3",{id:"getbreedingrules"},"getBreedingRules"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function getBreedingRules() public view returns (uint8 requiredParents, uint256 breedCooldownSeconds, uint8[] genes, uint256[] mutationRates)\n")),(0,i.kt)("p",null,"Returns the current breeding rules used for a species"),(0,i.kt)("h3",{id:"_breedspecies"},"_breedSpecies"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function _breedSpecies(uint256[] parents, address caller) internal returns (uint256 dna)\n")),(0,i.kt)("p",null,"Internal function to do the heavy lifting for breeding"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"parents"),(0,i.kt)("td",{parentName:"tr",align:null},"uint256[]"),(0,i.kt)("td",{parentName:"tr",align:null},"parents to use for breeding")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"caller"),(0,i.kt)("td",{parentName:"tr",align:null},"address"),(0,i.kt)("td",{parentName:"tr",align:null},"owner of parent NFTs (this will be verified)")))),(0,i.kt)("h3",{id:"_getbreedingrules"},"_getBreedingRules"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function _getBreedingRules() internal view returns (uint8 requiredParents, uint256 breedCooldownSeconds, uint8[] genes, uint256[] mutationRates)\n")),(0,i.kt)("p",null,"Internal function to do the heavy lifting for breeding"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"requiredParents"),(0,i.kt)("td",{parentName:"tr",align:null},"uint8"),(0,i.kt)("td",{parentName:"tr",align:null},"number of parents required (defaults to 2)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"breedCooldownSeconds"),(0,i.kt)("td",{parentName:"tr",align:null},"uint256"),(0,i.kt)("td",{parentName:"tr",align:null},"number of seconds to cooldown (defaults to 7 days)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"genes"),(0,i.kt)("td",{parentName:"tr",align:null},"uint8[]"),(0,i.kt)("td",{parentName:"tr",align:null},"256-bit gene split locations (defaults to 8 32-bit genes)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"mutationRates"),(0,i.kt)("td",{parentName:"tr",align:null},"uint256[]"),(0,i.kt)("td",{parentName:"tr",align:null},"mutation rate locations (defaults to none)")))),(0,i.kt)("h3",{id:"supportsinterface"},"supportsInterface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool)\n")),(0,i.kt)("p",null,"ERC165 Support"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"interfaceId"),(0,i.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,i.kt)("td",{parentName:"tr",align:null},"hash of the interface testing for")))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"[0]"),(0,i.kt)("td",{parentName:"tr",align:null},"bool"),(0,i.kt)("td",{parentName:"tr",align:null},"bool whether interface is supported")))))}g.isMDXComponent=!0}}]);