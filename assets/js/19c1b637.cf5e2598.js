"use strict";(self.webpackChunkowlprotocol_contracts_docs=self.webpackChunkowlprotocol_contracts_docs||[]).push([[9607],{7522:(t,e,r)=>{r.d(e,{Zo:()=>m,kt:()=>d});var n=r(9901);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var c=n.createContext({}),s=function(t){var e=n.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):l(l({},e),t)),r},m=function(t){var e=s(t.components);return n.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),u=s(r),d=a,k=u["".concat(c,".").concat(d)]||u[d]||p[d]||o;return r?n.createElement(k,l(l({ref:e},m),{},{components:r})):n.createElement(k,l({ref:e},m))}));function d(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,l=new Array(o);l[0]=u;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i.mdxType="string"==typeof t?t:a,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7344:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>m,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(2875),a=r(358),o=(r(9901),r(7522)),l=["components"],i={},c=void 0,s={unversionedId:"contract-docs/TransformerCore",id:"contract-docs/TransformerCore",title:"TransformerCore",description:"TransformerCore",source:"@site/docs/contract-docs/TransformerCore.md",sourceDirName:"contract-docs",slug:"/contract-docs/TransformerCore",permalink:"/contracts/docs/contract-docs/TransformerCore",draft:!1,editUrl:"https://github.com/owlprotocol/contracts/docs/contract-docs/TransformerCore.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Transformer",permalink:"/contracts/docs/contract-docs/Transformer"},next:{title:"UpgradeableBeaconInitializable",permalink:"/contracts/docs/contract-docs/UpgradeableBeaconInitializable"}},m={},p=[{value:"TransformerCore",id:"transformercore",level:2},{value:"GeneTransformType",id:"genetransformtype",level:3},{value:"GeneMod",id:"genemod",level:3},{value:"transform",id:"transform",level:3},{value:"get256Bitmask",id:"get256bitmask",level:3}],u={toc:p};function d(t){var e=t.components,r=(0,a.Z)(t,l);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"transformercore"},"TransformerCore"),(0,o.kt)("p",null,"abstract contract that contains all the utilities and types required for\nTransformer contract"),(0,o.kt)("h3",{id:"genetransformtype"},"GeneTransformType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"enum GeneTransformType {\n  none,\n  add,\n  sub,\n  mult,\n  set\n}\n")),(0,o.kt)("h3",{id:"genemod"},"GeneMod"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"struct GeneMod {\n  enum TransformerCore.GeneTransformType geneTransformType;\n  uint256 value;\n}\n")),(0,o.kt)("h3",{id:"transform"},"transform"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function transform(uint256 currDna, uint8[] genes, struct TransformerCore.GeneMod[] modifications) internal pure returns (uint256 newDna)\n")),(0,o.kt)("p",null,"Uses bitmask to transform inputted DNA according to modifications"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"currDna"),(0,o.kt)("td",{parentName:"tr",align:null},"uint256"),(0,o.kt)("td",{parentName:"tr",align:null},"original DNA, represented in base 10")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"genes"),(0,o.kt)("td",{parentName:"tr",align:null},"uint8[]"),(0,o.kt)("td",{parentName:"tr",align:null},"array representing start indexes of genes within binary representation of currDna")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"modifications"),(0,o.kt)("td",{parentName:"tr",align:null},"struct TransformerCore.GeneMod[]"),(0,o.kt)("td",{parentName:"tr",align:null},"array describing modifications to each gene")))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"newDna"),(0,o.kt)("td",{parentName:"tr",align:null},"uint256"),(0,o.kt)("td",{parentName:"tr",align:null},"the transformed DNA")))),(0,o.kt)("h3",{id:"get256bitmask"},"get256Bitmask"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function get256Bitmask(uint16 startBit, uint16 endBit) internal pure returns (uint256 bitMask)\n")),(0,o.kt)("p",null,"Generates a 256-bit bitmask from startBit:endBit"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"startBit"),(0,o.kt)("td",{parentName:"tr",align:null},"uint16"),(0,o.kt)("td",{parentName:"tr",align:null},"beginning of mask")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"endBit"),(0,o.kt)("td",{parentName:"tr",align:null},"uint16"),(0,o.kt)("td",{parentName:"tr",align:null},"end of mask")))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"bitMask"),(0,o.kt)("td",{parentName:"tr",align:null},"uint256"),(0,o.kt)("td",{parentName:"tr",align:null},"combined bitmask")))))}d.isMDXComponent=!0}}]);