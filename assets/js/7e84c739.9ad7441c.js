"use strict";(self.webpackChunkowlprotocol_contracts_docs=self.webpackChunkowlprotocol_contracts_docs||[]).push([[7033],{7522:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(9901);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),d=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(a),m=n,y=u["".concat(o,".").concat(m)]||u[m]||c[m]||l;return a?r.createElement(y,s(s({ref:t},p),{},{components:a})):r.createElement(y,s({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,s=new Array(l);s[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var d=2;d<l;d++)s[d]=a[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8591:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var r=a(2875),n=a(358),l=(a(9901),a(7522)),s=["components"],i={},o=void 0,d={unversionedId:"contract-docs/NaivePaymaster",id:"contract-docs/NaivePaymaster",title:"NaivePaymaster",description:"NaivePaymaster",source:"@site/docs/contract-docs/NaivePaymaster.md",sourceDirName:"contract-docs",slug:"/contract-docs/NaivePaymaster",permalink:"/contracts/docs/contract-docs/NaivePaymaster",draft:!1,editUrl:"https://github.com/owlprotocol/contracts/docs/contract-docs/NaivePaymaster.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NFTOwnershipPaymaster",permalink:"/contracts/docs/contract-docs/NFTOwnershipPaymaster"},next:{title:"OwlBase",permalink:"/contracts/docs/contract-docs/OwlBase"}},p={},c=[{value:"NaivePaymaster",id:"naivepaymaster",level:2},{value:"targets",id:"targets",level:3},{value:"TargetSet",id:"targetset",level:3},{value:"constructor",id:"constructor",level:3},{value:"initialize",id:"initialize",level:3},{value:"proxyinitialize",id:"proxyinitialize",level:3},{value:"__NaivePaymaster_init",id:"__naivepaymaster_init",level:3},{value:"__NaivePaymaster_init_unchained",id:"__naivepaymaster_init_unchained",level:3},{value:"setTarget",id:"settarget",level:3},{value:"removeTarget",id:"removetarget",level:3},{value:"PreRelayed",id:"prerelayed",level:3},{value:"PostRelayed",id:"postrelayed",level:3},{value:"preRelayedCall",id:"prerelayedcall",level:3},{value:"postRelayedCall",id:"postrelayedcall",level:3},{value:"versionPaymaster",id:"versionpaymaster",level:3}],u={toc:c};function m(e){var t=e.components,a=(0,n.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"naivepaymaster"},"NaivePaymaster"),(0,l.kt)("p",null,"This paymaster will approve transactions sent through a relay provider\nby the target contracts that are updated in the 'targets' mapping. This\nmapping maps an address to a boolean to indicate whether or not the address\ncan be approved or not for gasless transactions\n",(0,l.kt)("a",{parentName:"p",href:"https://docs.opengsn.org/tutorials/integration.html#creating_a_paymaster"},"https://docs.opengsn.org/tutorials/integration.html#creating_a_paymaster")),(0,l.kt)("h3",{id:"targets"},"targets"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(address => bool) targets\n")),(0,l.kt)("h3",{id:"targetset"},"TargetSet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event TargetSet(address target)\n")),(0,l.kt)("h3",{id:"constructor"},"constructor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"constructor() public\n")),(0,l.kt)("h3",{id:"initialize"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize(address _admin, address _target, address _forwarder) external\n")),(0,l.kt)("p",null,"initializes a paymaster contract"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_admin"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"admin of the paymaster")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_target"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"the target address that should be approved for gasless transactions")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_forwarder"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"address for the trusted forwarder for open GSN")))),(0,l.kt)("h3",{id:"proxyinitialize"},"proxyinitialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function proxyinitialize(address _admin, address _target, address _forwarder) external\n")),(0,l.kt)("h3",{id:"__naivepaymaster_init"},"__NaivePaymaster_init"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function __NaivePaymaster_init(address _admin, address _target, address _forwarder) internal\n")),(0,l.kt)("h3",{id:"__naivepaymaster_init_unchained"},"__NaivePaymaster_init_unchained"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function __NaivePaymaster_init_unchained(address _target) internal\n")),(0,l.kt)("h3",{id:"settarget"},"setTarget"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function setTarget(address target) external\n")),(0,l.kt)("p",null,"updates the mapping of target addresses to approve\nthe passed in address"),(0,l.kt)("h3",{id:"removetarget"},"removeTarget"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function removeTarget(address target) external\n")),(0,l.kt)("p",null,"updates the mapping of target addresses to disapprove\nthe passed in address"),(0,l.kt)("h3",{id:"prerelayed"},"PreRelayed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event PreRelayed(uint256)\n")),(0,l.kt)("h3",{id:"postrelayed"},"PostRelayed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event PostRelayed(uint256)\n")),(0,l.kt)("h3",{id:"prerelayedcall"},"preRelayedCall"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function preRelayedCall(struct GsnTypes.RelayRequest relayRequest, bytes signature, bytes approvalData, uint256 maxPossibleGas) external virtual returns (bytes context, bool)\n")),(0,l.kt)("p",null,"function that performs all access control. It verifies that\nthe relay request passes in an address that has been set as a\ntarget address and is approved for a gasless transaction"),(0,l.kt)("h3",{id:"postrelayedcall"},"postRelayedCall"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function postRelayedCall(bytes context, bool success, uint256 gasUseWithoutPost, struct GsnTypes.RelayData relayData) external virtual\n")),(0,l.kt)("p",null,"function that performs all bookkeeping after a function call\nhas been made."),(0,l.kt)("h3",{id:"versionpaymaster"},"versionPaymaster"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function versionPaymaster() external view virtual returns (string)\n")),(0,l.kt)("p",null,"function that is required for open GSN paymasters"))}m.isMDXComponent=!0}}]);